{
  "id": "10124",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10124/",
  "title": "What’s new in AppKit",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello! I’m Matt Zanchelli, an engineer on the AppKit team and this is What’s new in AppKit.\n\nIf you love AppKit and the Mac as much as I do, then you’re in the right place. I’m going to show you many improvements made in macOS Sequoia, and let you know how you can make your AppKit apps even better.\n\nIn this video, I’ll cover a broad range of topics, starting with some of new system-wide features and how your app can adopt them.\n\nThen, I’ll show you some changes made to AppKit that will help you when using SwiftUI.\n\nAnd lastly, I’ll share with you many of the great new API refinements in the framework.\n\nLet’s start with new macOS features.\n\nWith Writing Tools, macOS can now not only help you with spelling & grammar, but more sophisticated writing concepts like structure, clarity, and tone. We’ve worked hard to bring these writing tools system-wide, and your apps get these intelligence features automatically. For the best writing experience in your app, consider the interaction behaviors they bring. If your app handles a lot of text input, or does advanced things with text views, be sure to watch \"Get started with Writing Tools\".\n\nI’ve been having a lot of fun creating some emoji I’ve always wanted. I can now express very specific emotions, objects, and scenes, and then share them with friends, in apps like Messages and Notes. I’m excited to be able to create and use these new emoji in your app, too. The new emoji you create are images and aren’t just Unicode characters, so there may be a small amount of adoption needed to display and store these images inline with text in your app.\n\nWatch \"Bring expression to your app with Genmoji\", to learn how to adopt custom emoji in your app.\n\nIn addition to custom emoji, people can now create full images, in the new Image Playground app.\n\nYou can enable this magical image creation in your app too, by adopting the new Image Playground experience. Here’s how to add the Image Playground experience to your app. First, initialize an instance of the Image Playground view controller and assign its delegate.\n\nThe delegate will hear about important lifecycle events, like when the image creation has finished or cancelled.\n\nIf there is some specific context in your app leading into the Image Playground experience, your app can optionally set up the view controller with some initial concepts and source imagery. Concepts describe the expected contents of the output image, and the source image acts as a graphical reference for the created image. These two properties give the person viewing the sheet a jump start in creating their image. They can still choose different images and concepts inside the image creation sheet.\n\nThen, present the view controller as a sheet to get creating.\n\nWhen the image has been created, the view controller’s delegate receives a callback with a reference to the image’s file URL. This file URL is located in the app’s sandboxed temporary directory. Use that file URL to insert the image into your user interface and then dismiss the playground sheet.\n\nIf your app allows the insertion of images from the photo library, the Finder, or Continuity Camera, consider adding Image Playground as another source of images. And that’s just how easy it is to integrate the Image Playground experience into your app.\n\nI cannot wait to share with you one of my favorite new features in macOS Sequoia: Window Tiling. I just gotta show it to you now.\n\nWindow Tiling makes it fast to move your windows into some common arrangements. I’ll start moving this window, and put my cursor to the right edge of the screen.\n\nDropping the window here fills that half of the screen.\n\nIf I drag this window out of its tiled position, it goes back to its untiled size.\n\nThis is great when I want a window prominently displayed for a little while, and then back to its regular size when I’m done. I don’t even have to move my cursor all the way to the screen’s edge to tile it. Holding Option while dragging immediately shows a preview of the nearest tile, and I can drop it right there. I can also access these Window Tiling options in the Window > Move & Resize menu.\n\nHere, I can also see all their keyboard shortcuts. With those, I can really quickly move my windows around.\n\nBOOM. BOOM.\n\nBOOM.\n\nAnd If I want to see these two windows side-by-side, there’s an arrangement for that as well.\n\nIn addition to the Window menu, I can now conveniently access these options in the window titlebar, too.\n\nWhen two windows are tiled side-by-side like this, I can resize both at the same time, to get the proportions as I see fit.\n\nWhen opening a new window, it appears at an untiled size.\n\nTo arrange all three of these windows, I can select a three-window arrangement.\n\nHow cool is that? Window Tiling is awesome and it works with all your apps on macOS Sequoia.\n\nTo make your apps work best with Window Tiling, consider a few things.\n\nYour window’s minimum and maximum size.\n\nWindow Tiling lets people fill windows to a half or quarter of their screen. If your app’s window sizes are flexible enough, people can avoid overlapping windows. Check your window’s layout constraints that contribute to its minimum size.\n\nIf a window should only be resized in fixed width and height increments, use the resizeIncrements property. This can be used to resize a window in increments of a single character’s width or height, like in Terminal.\n\nWhen opening new windows, consider how they are positioned relative to existing windows.\n\nUse the new cascadingReferenceFrame property to get an existing window’s untiled frame. Cascade newly-opened windows relative to that frame. Or, if you’re using NSWindowController, this already happens by default in macOS Sequoia. I love using SwiftUI in my Mac apps, as it’s a fantastic way to build user interfaces. It’s been designed from the beginning to work alongside AppKit, so that it can be adopted incrementally. We’ve been deepening that integration for many years, and have taken it even further in macOS Sequoia.\n\nJust like you can use SwiftUI views inside your AppKit app using NSHostingView, you can now use SwiftUI menus, too. This allows you share menu definitions between the parts of your app that use AppKit and the parts that use SwiftUI. You use SwiftUI menus in AppKit contexts using NSHostingMenu, which is a new NSMenu subclass. Doing so is easy.\n\nCreate your menu definition using a SwiftUI View. In the body, use the SwiftUI views that best describe the data relationship. Use a Toggle to switch a value on and off. A Picker to select one value from a list, and a Button to perform an action.\n\nInitialize an NSHostingMenu with that SwiftUI view. And then use it in any AppKit context that accepts an NSMenu, like the new NSPopUpButton initializer with a pull-down menu parameter. In macOS Sequoia, AppKit gets animated with SwiftUI! You can now use a SwiftUI Animation type to animate NSViews! This lets you use the full set of powerful SwiftUI Animation types, including SwiftUI CustomAnimations! To animate your NSViews, use NSAnimationContext, passing in a SwiftUI animation type, and adjust your layout or drawing. SwiftUI animations are even interruptible and re-targetable.\n\nFor a more in-depth dive into SwiftUI animations with UIKit and AppKit, check out the video “Enhance your UI animations and transitions”.\n\nNext, I’ll share some of the fantastic AppKit API refinements.\n\nThere’s a new way to open context menus, new capabilities in the text system and SF symbols, a new convenience when saving documents, some new cursors, more control over toolbars, and an exciting new API to assist with text input.\n\nNew in macOS Sequoia, is the ability to use the keyboard to open a context menu for the currently-focused UI element. People can use this feature to more quickly or comfortably access an app’s functionality. This shortcut is Control-return by default, but can be customized in System Settings.\n\nBut when a context menu is presented with the keyboard, instead of the mouse, where does the menu present from? I’ll show you how to influence the positioning of these context menus.\n\nIf your view has a value for the menu property, the menu is positioned automatically over the view’s bounds.\n\nIf your view draws a custom selection, implement the new NSViewContentSelectionInfo protocol to provide geometry information about the selection. The view’s menu will then be positioned appropriately near the selection. That’s how you control the position of a keyboard-presented context menu.\n\nThe next new API refinement I’ll share is Text highlighting.\n\nHighlights can be used to emphasize text with a background color and contrasting foreground color.\n\nThis works in any NSTextView that supports rich text. First, select a range of text. Then, right-click and use the Font menu, and navigate to the Highlight submenu. You can choose from a number of highlight color schemes, or use the app’s accent color. For TextEdit, that’s blue. While support for this is automatic on rich text text views, you may wish to implement this new feature if your app has custom text attribute controls.\n\nText highlighting is controlled by attributed string attributes. The new .textHighlight attribute corresponds to a text highlight style. Set this to .systemDefault to indicate that a range of text should be highlighted. The colors used are based off of the app’s accent color. To control the colors, use the new .textHighlightColorScheme attribute, and associate it with one of the system-provided color schemes, like pink. macOS Sequoia comes with SF Symbols 6, which includes over 800 new symbols covering a wide variety of subjects.\n\nIt also includes even more effects, like wiggle, rotate, and breathe.\n\nThere are also new playback options for symbol effects, like repeating an effect a specific number of times or playing an animation in a continuous loop.\n\nAnd my favorite addition is the ability to magically replace a symbol’s badge or slash. The new symbol effects are really cool! For more information on them, and how to author custom symbols, check out “What’s new in SF Symbols 6”. Also watch “Animate symbols in your app” for more information on how to use these expressive animations.\n\nNext, an enhancement to the Save Panel.\n\nWhen saving a document, it’s often convenient to be able to select the format of file you’d like to save, right in the save panel.\n\nIn macOS Sequoia, there’s now a standard file format picker, so you don’t have to create a custom accessory view just for this. Using the standard file format picker is as easy as setting the showsContentTypes property on the save panel to true. The picker contains an option for each of the allowed content types that the save panel supports, as specified by the existing allowedContentTypes property. By default, each menu item uses the content type’s localized description. To provide custom display names, implement the panel(_ displayNameFor type:) delegate function. In this function, return content type names that are appropriate for the context of your app.\n\nI hope this new Save Panel enhancement saves you some development time.\n\nAnd now, finally making their first public appearance in the macOS SDK, after years of following your mouse around, you guessed it! Cursors! The system’s cursors are now available to use in the macOS Sequoia SDK.\n\nLet’s start with frame-resize cursors.\n\nThey’re used to resize an element from its edges and corners. It takes two parameters. The first is the position. This is the edge or corner that the cursor is interacting with. The second is the directions in which the element can be resized. Handle the case where the element is at its minimum or maximum size. Frame resize cursors are intended to be used when resizing a single element. But if you’re moving a separator between two elements, use the columnResize and rowResize cursors. The bar that’s perpendicular to the arrow in the cursor artwork depicts the separator that’s being resized. These cursors are useful when resizing the widths of table columns, or the heights of rows in a spreadsheet. Specify in which directions the separator can be moved to handle the cases where it’s at its limits.\n\nFor zooming in and out, there’s the new zoomIn and zoomOut cursors. Use these cursors when a click would cause the app’s contents to be magnified larger or smaller. Those are the system cursors newly available in AppKit. Using the system cursors gets you the standard appearance, for consistency across apps. If your app’s custom cursors aren’t communicating something that the system ones don’t, question whether the custom ones are really needed. Not only is it easier to make use of the standard cursors, and not have to draw them yourself, but they also support the larger accessibility sizes, as set in the Accessibility section in System Settings. As well as the settings for adjusting the pointer’s colors for those rely on a more unique color to see and locate the cursor effectively.\n\nNext up, three enhancements to NSToolbar to give you more control over display mode, displayed items, and item visibility. NSToolbar supports displaying items with and without text labels. While your app’s preferred style might be icon-only, some people find it easier to locate a toolbar item if they can scan through the text labels as well, so it’s good to offer the choice. In macOS Sequoia, you can now offer that choice of style, even if the contents of your toolbar aren’t otherwise customizable, using the allowsDisplayModeCustomization property. It’s enabled by default. Make sure that your toolbar has an identifier so that AppKit can save the style preference, and double-check that all your toolbar items have good labels. As a convenience over NSToolbar’s existing items property, you can use the new itemIdentifiers property. Setting a toolbar’s item identifiers automatically makes the minimal additions and removals for you. Keep in mind that if allowsUserCustomization is enabled, changing values here will override any customizations. So only use this for dynamic, non-customizable toolbars. Prefer simply disabling items that aren’t applicable for the current selection. Only programmatically remove items from a toolbar when there’s a change in a window’s mode, like between document editing and viewing modes.\n\nYou can also conditionally hide and show toolbar items using the new isHidden property. Hidden items still appear in customization, so people can choose where they want it to appear when they’re made visible. Use this when an item isn’t applicable regardless of the current selection in the window.\n\nFor example, an app can hide the item that shows downloads until the first download starts.\n\nNext, I want to share a brand-new API: text entry suggestions. It allows your app to provide custom suggestions as people type, in a system standard suggestions menu. This common pattern seen across many apps is now being standardized in AppKit in macOS Sequoia. It works on any NSTextField, including subclasses like NSSearchField. Get started by setting the suggestionsDelegate property on the text field. The delegate is asked for suggestions as text is typed, and can respond with results both synchronously, and asynchronously. It can also optionally customize the text completions on highlight and selection, too.\n\nHere are some design tips when using text entry suggestions. Ensure that the suggestions displayed at any given point in time are relevant to the typed text, as people expect the interface to keep up with how fast they type. Provide consistent and predictable suggestions, to preserve muscle memory and build trust in the results. When asynchronous suggestions are provided, place those after the immediate suggestions you already provided. And keep it simple. Don’t provide anything but the most important results and details, to make it easy to find the right result quickly.\n\nThose are just some of the AppKit enhancements in macOS Sequoia. There’s a lot more, which you can read all about in the release notes on developer.apple.com.\n\nStart using the new intelligence features and adopt the APIs to integrate them seamlessly in your app.\n\nGet rid of your window panes with window tiling. Ensure your apps windows are ready to be cleaned and tidied. Continue incrementally adopting SwiftUI with the new menu and animation APIs. Adopt the new system-standard components, like content type pickers, cursors, and text entry suggestions. Let people fly through your app with keyboard-presented context menus, and ensure your toolbars support all display modes.\n\nThank you so much for watching and developing great apps for the Mac. If these APIs are the paint, then Xcode is your paintbrush, and the Mac is your canvas! Go on and show the world what you can create!",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "2:09",
      "title": "Adding the Image Playground experience",
      "language": "swift",
      "code": "extension DocumentCanvasViewController {\n\n    @IBAction\n    func importFromImagePlayground(_ sender: Any?) {\n        // Initialize the playground, get set up to be notified of lifecycle events.\n        let playground = ImagePlaygroundViewController()\n        playground.delegate = self\n    \n        // Seed the playground with concepts and source imagery. (Optional)\n        playground.concepts = [.text(\"birthday card\")]\n        playground.sourceImage = NSImage(named: \"balloons\")\n\n        presentAsSheet(playground)\n    }\n\n}\n\nextension DocumentCanvasViewController: ImagePlaygroundViewController.Delegate {\n\n    func imagePlaygroundViewController(\n        _ imagePlaygroundViewController: ImagePlaygroundViewController,\n        didCreateImageAt resultingImageURL: URL\n    ) {\n        if let image = NSImage(contentsOf: resultingImageURL) {\n            imageView.image = image\n        } else {\n            logger.error(\"Could not read image at \\(resultingImageURL)\")\n        }\n        dismiss(imagePlaygroundViewController)\n    }\n\n}"
    },
    {
      "timestamp": "5:50",
      "title": "Using window resize increments",
      "language": "swift",
      "code": "window.resizeIncrements = NSSize(width: characterWidth, height: characterHeight)"
    },
    {
      "timestamp": "7:05",
      "title": "Build menus with SwiftUI",
      "language": "swift",
      "code": "struct ActionMenu: View {\n\n    var body: some View {\n        Toggle(\"Use Groups\", isOn: $useGroups)\n        Picker(\"Sort By\", selection: $sortOrder) {\n            ForEach(SortOrder.allCases) { Text($0.title) }\n        }.pickerStyle(.inline)\n        Button(\"Customize View…\") { <#Action#> }\n    }\n\n}\n\nlet menu = NSHostingMenu(rootView: ActionMenu())\n\nlet pullDown = NSPopUpButton(image: image, pullDownMenu: menu)"
    },
    {
      "timestamp": "7:43",
      "title": "Get animated with SwiftUI",
      "language": "swift",
      "code": "NSAnimationContext.animate(with: .spring(duration: 0.3)) {\n    drawer.isExpanded.toggle()\n}"
    },
    {
      "timestamp": "7:55",
      "title": "Get animated with SwiftUI",
      "language": "swift",
      "code": "class PaletteView: NSView {\n\n    @Invalidating(.layout)    \n    var isExpanded: Bool = false\n\n    private func onHover(_ isHovered: Bool) {\n        NSAnimationContext.animate(with: .spring) {\n            isExpanded = isHovered\n            layoutSubtreeIfNeeded()\n        }\n    }\n\n}"
    },
    {
      "timestamp": "10:31",
      "title": "Text highlighting",
      "language": "swift",
      "code": "let attributes: [NSAttributedString.Key: Any] = [\n    .textHighlight: NSAttributedString.TextHighlightStyle.systemDefault,\n    .textHighlightColorScheme: NSAttributedString.TextHighlightColorScheme.pink,\n]"
    },
    {
      "timestamp": "11:11",
      "title": "SF Symbols effects",
      "language": "swift",
      "code": "imageView.addSymbolEffect(.wiggle)\nimageView.addSymbolEffect(.rotate)\nimageView.addSymbolEffect(.breathe)"
    },
    {
      "timestamp": "11:24",
      "title": "SF Symbols playback (periodic)",
      "language": "swift",
      "code": "imageView.addSymbolEffect(.wiggle, options: .repeat(.periodic(3, delay: 0.5)))"
    },
    {
      "timestamp": "11:30",
      "title": "SF Symbols playback (continuous)",
      "language": "swift",
      "code": "imageView.addSymbolEffect(.wiggle, options: .repeat(.continuous))"
    },
    {
      "timestamp": "11:37",
      "title": "SF Symbols magic replace",
      "language": "swift",
      "code": "imageView.setSymbolImage(badgedSymbolImage, contentTransition: .replace)"
    },
    {
      "timestamp": "12:19",
      "title": "Save panel content types",
      "language": "swift",
      "code": "extension ImageViewController: NSOpenSavePanelDelegate {\n    \n    @MainActor\n    @IBAction\n    internal func saveDocument(_ sender: Any?) {\n        Task {\n            let savePanel = NSSavePanel()\n            savePanel.delegate = self\n            savePanel.identifier = NSUserInterfaceItemIdentifier(\"ImageExport\")\n            savePanel.showsContentTypes = true\n            savePanel.allowedContentTypes = [.png, .jpeg]\n            let result = await savePanel.beginSheetModal(for: window)\n            switch result {\n                case .OK:\n                    let url = savePanel.url\n                    // Save the document to 'url'. It already has the appropriate extension.\n                case .cancel: break\n                default: break\n            }\n        }\n    }\n    \n    func panel(_ panel: Any, displayNameFor type: UTType) -> String? {\n        switch type {\n            case .png:\n                NSLocalizedString(\"PNG (Greater Quality)\", comment: <#Comment#>)\n            case .jpeg:\n                NSLocalizedString(\"JPG (Smaller File Size)\", comment: <#Comment#>)\n            default:\n                nil\n        }\n    }\n    \n}"
    },
    {
      "timestamp": "13:34",
      "title": "Frame-resize cursors",
      "language": "swift",
      "code": "let cursor = NSCursor.frameResize(position: .bottomRight, directions: .all)"
    },
    {
      "timestamp": "14:20",
      "title": "Column and row resize cursors",
      "language": "swift",
      "code": "let cursor = NSCursor.columnResize(directions: .left)\nlet cursor = NSCursor.rowResize(directions: .up)"
    },
    {
      "timestamp": "14:29",
      "title": "Zoom in and out cursors",
      "language": "swift",
      "code": "let cursor = NSCusor.zoomIn\nlet cursor = NSCusor.zoomOut"
    },
    {
      "timestamp": "15:57",
      "title": "Display mode customizable toolbar",
      "language": "swift",
      "code": "let toolbar = NSToolbar(identifier: NSToolbar.Identifier(\"ViewerWindow\"))\ntoolbar.allowsDisplayModeCustomization // Defaults to `true`."
    },
    {
      "timestamp": "16:57",
      "title": "Hidden toolbar items",
      "language": "swift",
      "code": "let downloadsToolbarItem: NSToolbarItem\ndownloadsToolbarItem.isHidden = downloadsManager.downloads.isEmpty"
    },
    {
      "timestamp": "17:49",
      "title": "Text entry suggestions",
      "language": "swift",
      "code": "class MYViewController: NSViewController {\n    \n    let museumTextField = NSTextField(string: \"\")\n    \n    let museumTextSuggestionsController = MuseumTextSuggestionsController()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.museumTextField.suggestionsDelegate = self.museumTextSuggestionsController\n    }\n    \n}\n\nclass MuseumTextSuggestionsController: NSTextSuggestionsDelegate {\n    \n    typealias SuggestionItemType = Museum\n    \n    func textField(\n        _ textField: NSTextField,\n        provideUpdatedSuggestions responseHandler: @escaping ((ItemResponse) -> Void)\n    ) {\n        let searchString = textField.stringValue\n        \n        func museumItem(_ museum: Museum) -> Item {\n            var item = NSSuggestionItem(representedValue: museum, title: museum.name)\n            item.secondaryTitle = museum.address\n            return item\n        }\n        \n        let favoriteMuseums = Museum.favorites.filter({\n            $0.matches(searchString)\n        })\n        \n        let favorites = NSSuggestionItemSection(\n            title: NSLocalizedString(\"Favorites\", comment: \"The title of suggestion results section containing favorite museums.\"),\n            items: favoriteMuseums.map(museumItem(_:))\n        )\n        var response = NSSuggestionItemResponse(itemSections: [favorites])\n        response.phase = .intermediate\n        responseHandler(response)\n        \n        Task {\n            let otherMuseums = await Museum.allMatching(searchString)\n            let nonFavorites = NSSuggestionItemSection(items: otherMuseums.map(museumItem(_:)))\n            \n            var response = NSSuggestionItemResponse(itemSections: [\n                favorites,\n                nonFavorites,\n            ])\n            response.phase = .final\n            responseHandler(response)\n        }\n    }\n    \n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "AppKit updates",
        "url": "https://developer.apple.com/documentation/Updates/AppKit"
      },
      {
        "title": "Forum: UI Frameworks",
        "url": "https://developer.apple.com/forums/topics/ui-frameworks?cid=vf-a-0010"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10124/6/75BDBA0D-71A3-435A-8E9E-AE18B78981B0/downloads/wwdc2024-10124_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10124/6/75BDBA0D-71A3-435A-8E9E-AE18B78981B0/downloads/wwdc2024-10124_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10220",
      "year": "2024",
      "title": "Bring expression to your app with Genmoji",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10220"
    },
    {
      "id": "10145",
      "year": "2024",
      "title": "Enhance your UI animations and transitions",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10145"
    },
    {
      "id": "10168",
      "year": "2024",
      "title": "Get started with Writing Tools",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10168"
    },
    {
      "id": "10188",
      "year": "2024",
      "title": "What’s new in SF Symbols 6",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10188"
    },
    {
      "id": "10258",
      "year": "2023",
      "title": "Animate symbols in your app",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10258"
    }
  ],
  "extractedAt": "2025-07-18T09:11:14.444Z"
}