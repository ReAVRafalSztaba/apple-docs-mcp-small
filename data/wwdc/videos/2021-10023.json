{
  "id": "10023",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10023/",
  "title": "Direct and reflect focus in SwiftUI",
  "speakers": [],
  "duration": "",
  "topics": [
    "SwiftUI & UI Frameworks"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Tanu Singhal: Hello, everyone.\n\nMy name is Tanu, and I'm a SwiftUI engineer on the Apple TV team.\n\nToday, we'll talk about some new ways of working with focus in SwiftUI.\n\nOne of the great things about SwiftUI is how much functionality you get for free, right out of the box.\n\nBuilt-in components base their default behavior on SwiftUI's knowledge of platform conventions, resulting in an overall experience that is sensible and familiar in various contexts.\n\nWe see this intelligence at work when we look at focus.\n\nFocus is the system that lets your app take input from keyboards, remotes, game controllers, accessible switch controls, and other sources that -- unlike touch inputs -- are not tied to specific screen coordinates.\n\nOften, the focus view is drawn with special embellishments, making it easy for people to predict where their input will be directed.\n\nFor the most part, SwiftUI manages focus on your behalf.\n\nWhen someone clicks in a text field or presses the Tab key or when someone taps an adjustable watch complication or swipes on the Siri Remote, SwiftUI decides how focus is affected and how its next placement is indicated.\n\nThis is great for simple cases where the right behavior can be decided by convention.\n\nThere are, however, some cases where you may want a more accelerated experience around focus.\n\nIn this example from the Notes app, when we select the new note button, we want focus to automatically move to the newly created note.\n\nThis type of behavior certainly requires custom implementation.\n\nOver here, we have a scenario in which we want to move focus from a button on the bottom-left side to content near the top of the screen when a user swipes right on the remote.\n\nSince the Music button and the App tiles are not adjacent to each other, SwiftUI cannot automatically guess where to move focus.\n\nIt needs more information before distant focus targets can be linked.\n\nAnd in this example from iOS, we simply want the keyboard to go away when a user selects an event.\n\nThanks to new APIs we're introducing this year, you can now do all of this in SwiftUI.\n\nIn this talk, we will focus on two kinds of use cases.\n\nWe'll see how we can move focus to a particular view without any direct input, and we'll make large navigation targets out of small views so that nothing is out of the user's reach.\n\nLet's first look an example where we may want to move focus to help direct the user's attention.\n\nWe're so ready to go on a vacation, and we've started working on a vacation planner app.\n\nThis app works across all Apple platforms, and it allows you to browse destinations as well as book trips.\n\nWhen you launch this app, we present an email field, a password field, and a Sign in with Apple button so you can log into your account.\n\nOn this login screen, if we discover that the email entered was not in the correct format, we want to programmatically move focus back to the email field.\n\nTo accomplish this behavior, we'll use the FocusState APIs.\n\nThe existing code for our login view contains a VStack that has a TextField and a SecureField.\n\nNow, we'll add a FocusState property wrapper to this view.\n\nFocusState is a new API that we have introduced this year! This is a special type of state that changes depending on the current location of focus.\n\nWe'll use FocusState to hold an identifier for the field that is focused.\n\nThe focusedField variable is of an enum type that we created for this example.\n\nYou can use strings, integers, or any other hashable value type for FocusState.\n\nNote that the FocusState value is optional.\n\nIn general, types used for FocusState must be both hashable and optional, with nil used for cases where focus is in an unrelated part of the screen.\n\nNext we'll add a focused modifier to the TextField and the SecureField.\n\nAlso new this year, this modifier creates a link between the placement of focus and the value of the focusedField property.\n\nThis simple link is a powerful tool, because it means you can use the current placement of focus for making other decisions in your app.\n\nWe can watch that play out in our login form.\n\nWhen the screen first appears, nothing has focus, so the value of focusedField is nil.\n\nBut if someone then taps on the email text field, that field gains focus and the keyboard appears.\n\nSince the focused text field is bound to a FocusState value, the value of focusedField will automatically be updated to hold the identifier for the email text field.\n\nThe link between focus placement and FocusState works both ways.\n\nThis means that we are not limited to reacting to focus changes; we can move focus programmatically just by updating our FocusState property.\n\nSo for example, if we programmatically set the value of focusedField to .password, SwiftUI will know that our SecureField is associated with the new value we're setting and focus will automatically move to the password field.\n\nNow that our focus bindings are in place, we can put them to work.\n\nIn the Vacation Planner app, when a user submits their data, we want to validate it.\n\nIf the email is not in the expected format, we set the focusedField to email.\n\nThis will send focus back to the email text field, if it's not there already.\n\nFurther, we'd like to highlight the email field with a border if the email was invalid.\n\nWe want this border to appear only while focus is on the email field.\n\nTo do that, we can easily read the value of focusedField when we create the border.\n\nLet's see how this all comes together.\n\nNote the email field doesn't have a valid address.\n\nFocus is currently on the password field.\n\nWhen we hit Go, the onSubmit callback is triggered where the focusedField is set.\n\nThis causes the cursor to move back to the email field.\n\nWhile the email field is focused, we see the red border around it.\n\nHowever, once we move focus away from the email field, our focusedField is no longer equal to the email identifier, and so the red border disappears.\n\nIn the scenario where all the form data is valid, we want to simply dismiss the keyboard.\n\nTo dismiss the keyboard, we will set our FocusState variable to nil.\n\nSince the focusedField is an optional, we use nil to indicate that focus has left this view.\n\nIn the video, notice that the email address has been updated.\n\nThis time when we submit, the keyboard gets dismissed since we have set the FocusState variable to nil.\n\nWe've seen how it can be helpful to programmatically control focus when our app has text fields.\n\nHowever, FocusStates are not just for text fields.\n\nThey can be used to programmatically control focus for any focusable view on iOS, tvOS, watchOS, or macOS! In the next section, we'll discuss the role of focus-based navigation in our apps.\n\nLet's take a look at the tvOS version of our Vacation Planner app.\n\nWe have leveraged the extra space on TV by adding photos from some destinations that you may want to visit.\n\nYou can view more photos by clicking the Browse Photos button even before you've logged in.\n\nNotice that focus is initially on the Email field.\n\nIf we swipe right on the Siri Remote, we'd expect focus to move to the Browse Photos button.\n\nHowever, that doesn't work by default.\n\nThis is because directional focus navigation is based on adjacency relationships.\n\nWhen swiping to move focus, focus will only move if there is something adjacent and focusable in the given direction.\n\nTake a look at the focusable views in this app.\n\nSince there's no focusable view adjacent to the login fields on the left, the button on the bottom is unreachable.\n\nTo make this screen navigable, we will extend the Browse button's focusable area, so it becomes adjacent to the login fields.\n\nThis is done using the new FocusSections API.\n\nLet's see how easy that is.\n\nHere we have a simplified version of the Vacation Planner code for TV.\n\nIt contains an HStack with two VStacks; one for the login fields, and another VStack for the image and the button.\n\nWe want to create a larger logical focus target around the button so focus can behave as if the button was adjacent to the login fields.\n\nThis can be done by simply adding a focusSection() modifier to the VStack that contains the button.\n\nWhen focusSection() modifier is added to any view, the frame of that view becomes capable of accepting focus if it contains any focusable subviews.\n\nSince we also want to move focus back to the login fields when swiping left on the button, we'll add another focusSection() modifier to the first VStack.\n\nNow when we run this app, users can move focus between the input fields and the Browse button by swiping left and right on the remote.\n\nAs we wrap things up, I'd encourage you to think about focus, which can often look different on different platforms.\n\nSwiftUI has great default behaviors built in for most cases.\n\nThe new focus states and FocusSections APIs can help you take advantage of focus to create even more streamlined experiences.\n\nAs you work on your apps, take a moment to observe the many ways in which focus impacts user behavior.\n\nWe hope this session has equipped you with the tools that'll help users focus on what's most important.\n\nThanks for watching, and have an awesome WWDC! ♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "3:38",
      "title": "Slide 13 - Textfield and Securefield",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nstruct ContentView: View {\n\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n        }\n    }\n\n}"
    },
    {
      "timestamp": "3:49",
      "title": "Slide 14 - Focus State",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n        }\n    }\n\n}"
    },
    {
      "timestamp": "4:07",
      "title": "Slide 15 - Focus Field",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nenum Field: Hashable {\n    case email\n    case password\n}\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n        }\n    }\n\n}"
    },
    {
      "timestamp": "4:32",
      "title": "Slide 17 - focused modifiers",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nenum Field: Hashable {\n    case email\n    case password\n}\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .email)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .password)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n        }\n    }\n\n}"
    },
    {
      "timestamp": "6:07",
      "title": "Slide 25 - onSubmit",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nenum Field: Hashable {\n    case email\n    case password\n}\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n    @State private var submittedEmail: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .email)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .password)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n            .onSubmit {\n                submittedEmail = email\n                if !isEmailValid {\n                    focusedField = .email\n                }\n            }\n        }\n    }\n  \n    private var isEmailValid : Bool {\n        let regex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n        let predicate = NSPredicate(format:\"SELF MATCHES %@\", regex)\n        return submittedEmail.isEmpty || predicate.evaluate(with: submittedEmail)\n    }\n\n}"
    },
    {
      "timestamp": "6:25",
      "title": "Slide 26 - border",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nenum Field: Hashable {\n    case email\n    case password\n}\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n    @State private var submittedEmail: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .email)\n                    .border(Color.red,\n                            width: (focusedField == .email &&\n                                    !isEmailValid) ? 2 : 0)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .password)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n            .onSubmit {\n                submittedEmail = email\n                if !isEmailValid {\n                    focusedField = .email\n                }\n            }\n        }\n    }\n  \n    private var isEmailValid : Bool {\n        let regex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n        let predicate = NSPredicate(format:\"SELF MATCHES %@\", regex)\n        return submittedEmail.isEmpty || predicate.evaluate(with: submittedEmail)\n    }\n\n}"
    },
    {
      "timestamp": "7:17",
      "title": "Slide 29 - dismiss keyboard with nil",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\nenum Field: Hashable {\n    case email\n    case password\n}\n\nstruct ContentView: View {\n\n    @FocusState private var focusedField: Field?\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n    @State private var submittedEmail: String = \"\"\n\n    var body: some View {\n        ZStack {\n            Image(\"backgroundImage\")\n                .resizable()\n                .opacity(0.7)\n                .ignoresSafeArea()\n\n            VStack(alignment: .center) {\n                Text(\"Vacation Planner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(.black.opacity(0.8))\n                    .frame(alignment: .top)\n\n                Spacer(minLength: 30)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n                    .padding()\n                    .frame(height: 50)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .email)\n                    .border(Color.red,\n                            width: (focusedField == .email &&\n                                    !isEmailValid) ? 2 : 0)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .padding()\n                    .frame(height:50)\n                    .textContentType(.password)\n                    .background(Color.white.opacity(0.9))\n                    .cornerRadius(15)\n                    .padding(10)\n                    .focused($focusedField, equals: .password)\n\n                Spacer().frame(height: 20)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(.black.opacity(0.7))\n                \n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                .cornerRadius(15)\n\n                Spacer().frame(height: 20)\n\n            }\n            .frame(width: 280, height: 500, alignment: .bottom)\n            .onSubmit {\n                submittedEmail = email\n                if !isEmailValid {\n                    focusedField = .email\n                } else {\n                    focusedField = nil\n                    // Show progress indicator, and log in.\n                }\n            }\n        }\n    }\n  \n    private var isEmailValid : Bool {\n        let regex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n        let predicate = NSPredicate(format:\"SELF MATCHES %@\", regex)\n        return submittedEmail.isEmpty || predicate.evaluate(with: submittedEmail)\n    }\n\n}"
    },
    {
      "timestamp": "9:24",
      "title": "tv code",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\n\nstruct ContentView: View {\n\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Spacer(minLength:60).frame(height: 150)\n                Text(\"Vacation\\nPlanner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(Color.black.opacity(0.8))\n                    .lineLimit(nil)\n                    .multilineTextAlignment(.center)\n                    .padding(.horizontal, 40)\n\n                Spacer().frame(height:80)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n\n                Spacer().frame(height:30)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .textContentType(.password)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(Color.black.opacity(0.7))\n\n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                Spacer()\n            }\n            .frame(width: 350, alignment: .center)\n\n            VStack {\n                Image(photoName)\n                    .resizable()\n                    .frame(width: 1400)\n                    .aspectRatio(contentMode: .fit)\n                    .ignoresSafeArea(edges: [.trailing])\n                BrowsePhotosButton()\n            }\n        }.preferredColorScheme(.light)\n    }\n}"
    },
    {
      "timestamp": "9:47",
      "title": "focus section 1",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\n\nstruct ContentView: View {\n\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Spacer(minLength:60).frame(height: 150)\n                Text(\"Vacation\\nPlanner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(Color.black.opacity(0.8))\n                    .lineLimit(nil)\n                    .multilineTextAlignment(.center)\n                    .padding(.horizontal, 40)\n\n                Spacer().frame(height:80)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n\n                Spacer().frame(height:30)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .textContentType(.password)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(Color.black.opacity(0.7))\n\n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                Spacer()\n            }\n            .frame(width: 350, alignment: .center)\n\n            VStack {\n                Image(photoName)\n                    .resizable()\n                    .frame(width: 1400)\n                    .aspectRatio(contentMode: .fit)\n                    .ignoresSafeArea(edges: [.trailing])\n                BrowsePhotosButton()\n            }\n            .focusSection()\n        }.preferredColorScheme(.light)\n    }\n}"
    },
    {
      "timestamp": "10:06",
      "title": "focus section 2",
      "language": "swift",
      "code": "import SwiftUI\nimport AuthenticationServices\n\n\nstruct ContentView: View {\n\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Spacer(minLength:60).frame(height: 150)\n                Text(\"Vacation\\nPlanner\")\n                    .font(.custom(\"Baskerville-SemiBoldItalic\", size: 60))\n                    .foregroundColor(Color.black.opacity(0.8))\n                    .lineLimit(nil)\n                    .multilineTextAlignment(.center)\n                    .padding(.horizontal, 40)\n\n                Spacer().frame(height:80)\n\n                TextField(\"Email\", text: $email)\n                    .submitLabel(.next)\n                    .textContentType(.emailAddress)\n                    .keyboardType(.emailAddress)\n\n                Spacer().frame(height:30)\n\n                SecureField(\"Password\", text: $password)\n                    .submitLabel(.go)\n                    .textContentType(.password)\n\n                HStack {\n                    Rectangle().frame(height: 1)\n                    Text(\"or\").bold().padding()\n                    Rectangle().frame(height: 1)\n                }\n                .foregroundColor(Color.black.opacity(0.7))\n\n                Spacer().frame(height: 20)\n\n                SignInWithAppleButton(.signIn) { request in\n                    request.requestedScopes = [.fullName, .email]\n                } onCompletion: { result in\n                    switch result {\n                    case .success (_):\n                        print(\"Authorization successful.\")\n                    case .failure (let error):\n                        print(\"Authorization failed: \" + error.localizedDescription)\n                    }\n                }\n                .frame(height: 50)\n                Spacer()\n            }\n            .frame(width: 350, alignment: .center)\n            .focusSection()\n\n            VStack {\n                Image(photoName)\n                    .resizable()\n                    .frame(width: 1400)\n                    .aspectRatio(contentMode: .fit)\n                    .ignoresSafeArea(edges: [.trailing])\n                BrowsePhotosButton()\n            }\n            .focusSection()\n        }.preferredColorScheme(.light)\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Input and event modifiers",
        "url": "https://developer.apple.com/documentation/SwiftUI/View-Input-and-Events"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10023/5/ED227AE3-34ED-45F7-BB9D-7E4F06876C3B/downloads/wwdc2021-10023_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10023/5/ED227AE3-34ED-45F7-BB9D-7E4F06876C3B/downloads/wwdc2021-10023_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10075",
      "year": "2022",
      "title": "Use SwiftUI with AppKit",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10075"
    },
    {
      "id": "10120",
      "year": "2021",
      "title": "Support Full Keyboard Access in your iOS app",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10120"
    },
    {
      "id": "10018",
      "year": "2021",
      "title": "What's new in SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10018"
    }
  ],
  "extractedAt": "2025-07-18T10:54:21.935Z"
}