{
  "id": "10039",
  "year": "2023",
  "url": "https://developer.apple.com/videos/play/wwdc2023/10039/",
  "title": "Meet device management for Apple Watch",
  "speakers": [],
  "duration": "",
  "topics": [
    "Business & Education"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ ♪ Melissa: Hi, I’m Melissa Nierle. I’m a software engineer on the Enterprise and Education Technologies team, and today I’m excited to introduce you to device management for Apple Watch.\n\nApple Watch has become an indispensable daily companion for users by helping us stay connected, active, and healthy.\n\nHands-free communication, responding to notifications on the go, and safety features like fall detection make Apple Watch the perfect addition for enterprise customers.\n\nFrom small businesses and public utilities to large enterprises and healthcare systems, there’s no limit to the places where you’ll find Apple Watch at work. Companies like Volvo already use Apple Watch to enhance their employee workflow by using it to log jobs and streamline communication with customers. We want to enable organizations to create solutions that improve productivity, support wellness, and provide additional safety by deploying Apple Watch to their employees. That’s why this year, we’re introducing Device Management for watchOS.\n\nOrganizations can now deploy and configure Apple Watches along with all their other Apple devices.\n\nWe’re excited to see all the ways Apple Watch will impact both users and their organizations when deployed at scale.\n\nLet’s get started with how it works. First, we’ll discuss the new enrollment flow for Apple Watch, and then later, we’ll talk about what you need to know when managing Apple Watch.\n\nThere are a few things we should consider when Apple Watch enrolls into MDM.\n\nFirst, just like how we use Apple Watch and iPhone together as a pair, they are managed together as a pair as well.\n\nThe devices share functionality between them like apps and restrictions, as well as hand off information to each other to perform tasks in one seamless flow.\n\nWe’ve leveraged this to create the Apple Watch enrollment flow.\n\nThe enrollment flow actually begins on iPhone for both the organization administrator and the end user. The host iPhone will need to already be enrolled with MDM, and supervised in order to perform the watch enrollment flow.\n\nMDM enrollment happens during the watch pairing flow, so you will need to begin with a new or reset Apple Watch.\n\nExisting paired Apple Watches will need to be reset in order to be enrolled. The Apple Watch enrollment flow utilizes declarative device management so your server will need to support both Apple Watch and Declarative Device Management to enroll Apple Watch.\n\nCheck out what’s new this year in declarative device management by checking out its session. Now that we know the prerequisites, let's dive into the enrollment flow step by step.\n\nWe start with a managed and supervised iPhone.\n\nFirst, the organization administrator will send a new declaration to the phone.\n\nThis is the new Watch Enrollment configuration. It signifies to the iPhone that any Apple Watch that pairs to it should be enrolled into MDM.\n\nHere is the content of that configuration. Let's take a look at the payload keys.\n\nFirst is the key for the enrollment URL endpoint.\n\nThis endpoint delivers the MDM profile that the Apple Watch will download and install.\n\nThe MDM profile for Apple Watch is just like the MDM profiles already used for iOS and macOS devices.\n\nThe next key, AnchorCertificateAssetReferences, is an optional item and specifies an array of anchor certificates.\n\nThese anchor certs will be used to evaluate the trust of the enrollment profile server.\n\nEach anchor certificate used in this flow must be included in an asset declaration already present on the iPhone.\n\nNow that the configuration is installed, let’s bring in Apple Watch. Like I mentioned, the Apple Watch will be in its pairing state, and once the user initiates pairing from the phone, they will be prompted to accept Remote Management.\n\nHere. the user will need to allow remote management for their Watch to continue.\n\nIf they don’t accept remote management, the pairing flow will end without the Watch getting set up. The enrollment flow for Apple Watch is designed with security in mind to address the need to manage iPhone and Apple Watch together as a pair.\n\nThere are two key pieces to ensure security.\n\nFirst, the administrator needs to verify that the host iPhone is enrolled into an MDM server managed by their organization.\n\nSecondly, they need to be able to identity which iPhones and Apple Watches are paired together. Let’s see how we accomplish that with this new enrollment flow.\n\nDuring Watch pairing, the iPhone sends information from its Watch enrollment configuration to the Apple Watch.\n\nThe Apple Watch uses the URL and any provided anchor certificates to make initial contact with the server.\n\nWithin this request, it will provide signed machine info. Upon receiving the enrollment request from the Apple Watch, the server will inspect the machine info data and look for a new \"pairing token\" key.\n\nBecause the pairing token key will not be present on this first attempt, the server will issue an HTTP 403 response.\n\nHere’s what that 403 response will look like.\n\nFirst, the error code tells us that the Watch pairing token is missing from the request.\n\nThen, within the details dictionary, you will provide a security-token.\n\nThis random UUID string will be used by the Watch to kick off the pairing token retrieval flow. The Watch sends this security-token to the iPhone. The iPhone performs a GetToken checkIn request, which includes both the phone and Watch UDID, as well as the security token received from the Watch’s MDM server.\n\nHere’s what this new checkin request looks like. We’ve added a new CheckIn message type this year called the “get token” check in request.\n\nThis new message type allows the device to request secure tokens for various services the MDM server supports.\n\nThe TokenServiceType key indicates which service we are requesting a token for.\n\nHere, the value indicates it needs a Watch pairing token.\n\nNext, the TokenParameters key is a dictionary containing parameters specific to the token service type. For the Watch pairing token, the phone includes the security token from the Watch, its own UDID, and the Apple Watch’s UDID. The MDM server takes this information and uses it to generate a secure pairing token that can be verified by the Apple Watch’s MDM server upon receipt. Here, the MDM server can create the correct relationship between the iPhone and Apple Watch based on the received UDIDs. The server finishes by sending its generated pairing token to the iPhone.\n\nHere’s an example of what that token response from the server will look like. The token is in the form of base64 encoded data.\n\nUpon receipt, the phone sends the pairing token to the Apple Watch.\n\nThe pairing token is then added into the Watch’s Machine Info, and sent back to the MDM server in a new enrollment request.\n\nHere’s an example of the Apple Watch machine info sent to the server with the secure pairing token included.\n\nThe MDM server securely verifies the pairing token it received with the machine info, and can therefore confirm the identity of the iPhone’s MDM server and the paired relationship between the iPhone and Apple Watch.\n\nNow the server returns the MDM enrollment profile to the Apple Watch.\n\nThe user will finish the steps on the phone to complete Apple Watch setup, and the Enrollment profile will be installed on the Apple Watch at the end of the pairing flow. Just like on iOS, enrollment is officially complete when the Apple Watch sends a CheckIn request with the Authenticate messageType.\n\nAnd now Apple Watch is enrolled and supervised! With this specialized enrollment flow, you will want to keep a few things in mind for Apple Watch. First, when building your device management solution, utilize the data sent to the server during enrollment to detect which Apple Watch is paired to which iPhone.\n\nUse this information to create an intuitive UI for IT administrators who will need to identify the pairs.\n\nKeep in mind that once the Watch Enrollment configuration is applied to the phone, all Apple Watches that begin to pair with the phone will be prompted to enroll into management.\n\nHowever, any Apple Watches already paired to the phone will not be affected and would need to be wiped and paired again in order to be enrolled.\n\nAnd lastly, remember that Apple Watch is supervised once its enrolled, so you can add it to all of your workflows for organization owned devices.\n\nAnd just like with iOS, health information and fitness activity is never sent to the MDM server. Now that we know how to enroll Apple Watch, let’s talk about how you’ll manage it.\n\nWe are starting right out of the gate with declarative device management support for watchOS.\n\nIn watchOS 10, all declaration types are supported on watchOS.\n\nPredicates in activation declarations are supported as well, so you can build custom multi-step management workflows right on the Watch. The status channel has also made its way to Apple Watch, so you will be able to receive proactive updates from all of your Apple devices.\n\nHere’s a look at the declarative device management features in watchOS 10.\n\nFind the full list of support in our open source schema and developer documentation that has been updated to reflect availability on watchOS. Of course, the MDM protocol is also supported on managed watches. Payloads, restrictions, and MDM commands and queries can all be sent to the Apple Watch, just as you do today for your other Apple devices.\n\nThere’s a wide range of supported MDM features for watchOS this year. Let’s talk about a few of the available configuration payloads.\n\nFirst we have our suite of networking capabilities. New this year in watchOS 10 is the ability to have a dedicated VPN installed on Apple Watch.\n\nIn addition to our existing networking payloads, Wi-Fi and Cellular, we’ve also brought support for the per-app VPN payload to watchOS.\n\nNow you can equip all your Apple devices with access to your secure enterprise VPN.\n\nNext, let's talk about the payloads you can use to ensure security on watchOS.\n\nThe same payloads you already use to install SCEP and ACME certificates, enforce passcode rules, and apply restrictions on your Apple devices are now all supported for watchOS.\n\nThe password policy and restrictions payloads both share unique behavior on watchOS. Let’s cover that now.\n\nRestrictions and passcode rules that are applied to iPhone will be synced to the paired Apple Watch.\n\nFor example, if you apply a passcode enforcement policy to the iPhone, the paired managed Watch will prompt the user to create a passcode for it as well.\n\nIf an alphanumeric password is required by the iPhone’s policy, the user will need to use their iPhone in order to unlock their Apple Watch, Like, for instance, when it's taken off their wrist. However, both Restriction payloads and password payloads applied directly to Apple Watch will not be synced back to iPhone. Use this detail in the directionality of the rules to customize your restrictions and password policy payloads for each platform. MDM queries are helpful to learn the current status of the device and its content. These queries, of course, operate in a polling manner, from the server to the device.\n\nInstead of constantly polling the Apple Watch with queries, you should instead use the status channel of declarative device management. This way, the Apple Watch proactively tells the server whenever a change occurs to a status item the server subscribes to.\n\nNow, let's turn to commands that you'll want to consider for watchOS.\n\nThe same commands from iOS are supported on watchOS to ensure the integrity of the enterprise data on your Apple Watch.\n\nYou can remotely clear the passcode, lock and erase the device as needed.\n\nUn-enrolling from MDM by removing the profile is also supported for watchOS, but it has different on-device behavior.\n\nLet’s look at that now.\n\nRemoving the MDM profile from Apple Watch, whether by a user or via MDM command, causes it to be unenrolled from the server.\n\nWhen Apple Watch is unenrolled, it is unpaired from its host iPhone and its content and settings are all erased.\n\nUn-enrolling Apple Watch will not effect the enrollment status of its host iPhone.\n\nNow, if the host iPhone becomes unenrolled, whether by the user or the organization, it will trigger the Watch to be unenrolled as well.\n\nTherefore, removing management from the host iPhone will ultimately result in the managed Apple Watch being unpaired and reset. The last piece of the MDM protocol we will want to discuss is app deployment.\n\nOn watchOS, there are three different kinds of apps.\n\nFirst, there are Paired apps, which are watch apps that share data between itself and its complementary iPhone app, but the Watch app can function on its own in the absence of the iPhone app.\n\nNext, there are dependent watchOS apps.\n\nThese Apple Watch apps require a companion iPhone app to be functional.\n\nAnd lastly, there are Standalone watchOS apps. These apps exist only on the watchOS platform and have no iOS companion app.\n\nFor both the Paired and Dependent watchOS app types, administrators will need to manage these apps together across the two devices.\n\nStandalone watchOS apps are also supported.\n\nThese apps will only need the App Install command sent to the Apple Watch. When installing paired and dependent apps to iPhone and Apple Watch, the app should be installed to the iPhone first.\n\nThen, once you ensure the app installed on iPhone, send the install app command to Apple Watch. When updating Paired or Dependent watchOS app types, both the phone and the Watch app will need to be sent commands to update their apps.\n\nSimilarly, when deleting paired or dependent apps, the remove command will need to be sent to both Apple Watch and iPhone in order to ensure correct behavior.\n\nManaging paired and dependent iPhone and Apple Watch apps in tandem like this will make for the best user experience and the smoothest workflow for administrators because it ensures apps are available and properly managed.\n\nThat’s just a small glimpse of all the things you can do with managing Apple Watch.\n\nUnderstanding these best practices we’ve gone over is the best way to ensure a smooth adoption and ramp up of your watchOS management.\n\nLet's summarize some of the key points now. Administrators will need to manage iPhones and watchOS together as a pair, so make sure your MDM products are built with this relationship in mind.\n\nCreating combined workflows and exposing the device relationships in your UI will help admins keep the two platforms in sync with each other.\n\nTake advantage of the proactive status channel built into Declarative Device Management to avoid constantly polling the device for information, which could be a drain on power.\n\nThe Declarative Device Management status channel will update the server whenever a meaningful change occurs.\n\nAlthough there are new considerations for managing Apple Watch, the MDM protocol together with the Declarative Device Management features are all the same tools you’re familiar with using already, so you’ll be able to get started with managing Apple Watch today.\n\nLet's wrap up what we’ve discussed today about Apple Watch.\n\nApple Watch is now manageable in watchOS 10, paired to a supervised iPhone running iOS 17.\n\nBegin implementing your Apple Watch enrollment and management support for your MDM solutions today to empower IT admins and their organizations to make their enterprise Apple Watch workflows as easy as possible. Admins, start planning how managed Apple Watch will optimize your organization’s productivity and end user’s connectivity and well-being.\n\nWe’re excited to learn about the Apple Watch workflows you plan to implement and how it will improve your organization's digital ecosystem.\n\nAnd whether you are the MDM developer or admin looking to deploy Apple Watch, we want to hear from you.\n\nBe sure to file feedback requests at feedback.apple.com.\n\nAnd finally, check out our other sessions this week on declarative device management as well as everything else that’s new in managing Apple Devices. That’s Device Management for Apple Watch.\n\nThanks for being here today, and have a great week!",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Device Management",
        "url": "https://developer.apple.com/documentation/DeviceManagement"
      },
      {
        "title": "Mobile Device Management Protocol Reference",
        "url": "https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/MobileDeviceManagementProtocolRef/3-MDM_Protocol/MDM_Protocol.html"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10039/4/5852C97C-D712-4FA9-BDB2-2FC9C69289EB/downloads/wwdc2023-10039_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10039/4/5852C97C-D712-4FA9-BDB2-2FC9C69289EB/downloads/wwdc2023-10039_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10041",
      "year": "2023",
      "title": "Explore advances in declarative device management",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10041"
    },
    {
      "id": "10040",
      "year": "2023",
      "title": "What’s new in managing Apple devices",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10040"
    }
  ],
  "extractedAt": "2025-07-18T09:26:42.580Z"
}