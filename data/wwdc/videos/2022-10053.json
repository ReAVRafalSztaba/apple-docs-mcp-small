{
  "id": "10053",
  "year": "2022",
  "url": "https://developer.apple.com/videos/play/wwdc2022/10053/",
  "title": "Discover Sign in with Apple at Work & School",
  "speakers": [],
  "duration": "",
  "topics": [
    "Business & Education"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ instrumental hip hop music ♪ ♪ Hello. My name is Ashwath and I am an engineer with the Education team.\n\nToday I am excited to talk to you about Sign in with Apple at Work & School.\n\nIn this presentation, I will be covering the key features that we are introducing this fall.\n\nI will first walk you through what Sign in with Apple at Work & School is and how it works.\n\nThen I will talk about the Roster API and specifics about how you can make use of it.\n\nAnd finally, I will be talking about access management, where I discuss how IT admins can manage access to Sign in with Apple at Work & School and the Roster API on behalf of their organization.\n\nLet me begin by covering two concepts you may be familiar with but are important to review for this session.\n\nThe first is Sign in with Apple.\n\nSign in with Apple is a fast and easy way for users to sign in to apps with their Apple ID.\n\nUsers are able to create an account within your app with a simple tap.\n\nThe second concept is Managed Apple IDs.\n\nLike Apple IDs, Managed Apple IDs are used to personalize a device.\n\nThey're also used to access Apple apps and services.\n\nUnlike Apple IDs, Managed Apple IDs are owned by an organization and managed through Apple School Manager or Apple Business Manager.\n\nWith those definitions in mind, I am excited to share that Sign in with Apple has now been extended to support Managed Apple IDs.\n\nNow you can get the benefits of a fast and easy sign-in experience of Sign in with Apple, but with the management capabilities of Managed Apple IDs.\n\nTo showcase the user experience of Sign in with Apple at Work & School, let us take a look at an example.\n\nHere is the login screen for Slack.\n\nTo use Sign in with Apple, a user can just tap Continue with Apple.\n\nWhen using an Apple ID, they will then see this welcome screen for Sign in with Apple.\n\nOn the other hand, if they are using a Managed Apple ID, they will see the welcome screen for Sign in with Apple at Work & School.\n\nYou will notice a difference in the welcome screen.\n\nWhat do we mean when we say we make it easy for apps to provide access control? Let's take a look at an example.\n\nWhen using their personal Apple ID with Sign in with Apple, the user sees the account creation screen where they may edit their name and choose whether to share or hide their email.\n\nBut in an organizational context, it is important for the app to understand who is logging in and what level of access to provide them.\n\nIn the example shown on this screen, the user is signing in to Slack at work.\n\nIn order to know which Slack channels this employee should be allowed to join, Slack needs to know which user is signing in.\n\nSo this is an example of Slack providing access control using the name and email shared with their app when using Sign in with Apple at Work & School.\n\nSo this is what the user sees, but what does this mean for you? It means when a user uses Sign in with Apple at Work & School, the name and email fields will always be accessible.\n\nIf you are a developer working on a client-side app, here's a look at some example code showing the authorization controller.\n\nOn a successful authorization, the highlighted statements indicate the full name and email received by your app.\n\nThis assumes that the request for authorization included the scopes for the full name and email.\n\nIf you are a developer supporting Sign in with Apple on the web, here's a look at some example code that uses the signIn method to start the authorization process.\n\nUpon successful authorization, the server returns the response to the data object.\n\nThat data object looks like this.\n\nThe highlighted fields contain the email and full name of the user signing in.\n\nIt is important to note a few points here.\n\nIn this release, Sign in with Apple at Work & School uses the primary Managed Apple ID that is signed in on the device.\n\nEven though the example screens that we showed you were for the login flow on the device, the web flow is supported as well.\n\nSome accounts may not have email addresses provided.\n\nFor example, schools may not assign email addresses to younger students.\n\nLet's see what the account creation screen looks like in this scenario where an email address is not present.\n\nThis user, Fatima Silva, does not have an email address, so only their full name is present on the account creation screen.\n\nIf you have already implemented Sign in with Apple, there is no work needed from your end to add support for Managed Apple IDs.\n\nIf you haven't implemented support yet, I would highly suggest taking a look at the \"Get the most out of Sign in with Apple\" session from WWDC2020 and the \"Enhance your Sign in with Apple experience\" session from this year.\n\nThat was Sign in with Apple at Work & School, which brings the fast and easy sign-in experience of Sign in with Apple to Managed Apple IDs.\n\nNow let's dive into the Roster API.\n\nBut before jumping into any specifics, let's consider the following scenario.\n\nYou're a developer in the education space.\n\nYour app is being used by school districts.\n\nYou have implemented support for Sign in with Apple in your app.\n\nThat's great! Students, teachers, and staff can use their Managed Apple IDs to log in to your app.\n\nIn this scenario, your app allows teachers to share assignments and announcements with their students.\n\nTo support this, IT administrators need to enter students, teachers, and classes into your app prior to the start of the school year.\n\nFor a school with hundreds or thousands of students, creating these records by hand would quickly become a time-consuming and tedious process.\n\nWe've created the Roster API to address this problem.\n\nThe Roster API provides programmatic access to resources like users and classes in Apple School Manager.\n\nThis allows an IT admin to automate the process of importing this information to your app.\n\nThese resources are defined in the form of REST endpoints.\n\nThis data can be accessed by your app after the IT admin has granted permission through a successful OAuth 2.0 authorization.\n\nThe Administrator and Site Manager accounts in Apple School Manager can manage which apps are able to access the data.\n\nAs part of this release, we have created a standardized way for apps to request access to organizational data.\n\nWe call this Organizational Data Sharing.\n\nWe wanted to follow industry standards when it comes to UI design patterns and choice of technology so developer adoption is easy.\n\nSo we created an authorization flow using OAuth 2.0, which includes using scopes and asking the IT admin to consent to sharing their organizational data.\n\nHere is what it looks like.\n\nThe consent screen provides information on which app is requesting access to the organization's data and what data the app is requesting access to.\n\nLooking more closely, the consent screen contains information on the requestor -- which represents the app requesting access to the data made available by Apple School Manager; in this case, the requesting app is Quizzler -- and the scopes, which represent the data that the app will have access to.\n\nIn this case, once the IT admin consents, Quizzler will be able to access all user and class information for this organization.\n\nWhat does your implementation journey look like? The first step is to register in the developer portal, which involves requesting scopes.\n\nThe next step is to request consent from the IT admin to share the data with your app through the OAuth 2.0 authorization flow.\n\nFinally, your app queries the Roster API endpoints to fetch the data.\n\nLet us take a look at each of these steps.\n\nTo request scopes, visit the Developer portal.\n\nUnder the Certificates, Identifiers & Profiles page, click on Configure under Account & Organizational Data Sharing.\n\nIn the next step, click on \"Set up a configuration.\" Choose the primary app ID from the drop-down and hit Continue.\n\nIn the additional configuration details page, under Organizational Data Sharing Scopes, choose the scopes desired.\n\nRight now, we offer two: user access and class access.\n\nEnsure return URLs are configured for your app.\n\nThis step is important as the return URLs will be used in the OAuth 2.0 authorization flow.\n\nHit Continue.\n\nFinally, confirm your configuration.\n\nNow we're ready for the next step.\n\nThe second step in the implementation journey is getting the access token through the OAuth 2.0 authorization flow.\n\nLet us look at this in detail.\n\nThe IT admin first logs in to your app.\n\nThe IT admin then interacts with your app to initiate the authorization flow -- for example, by clicking a button named \"Connect to Apple School Manager.\" This starts a sequence of events following the OAuth 2.0 standard.\n\nThe first step is to execute a GET API call to the authorize endpoint.\n\nLet us take a look at the details of this request.\n\nThe request takes in a few query parameters: the client_id, the redirect_uri, the state, response_type, and scopes.\n\nThe response will be a redirect to the Apple OAuth consent screen to request access from the IT admin.\n\nIn this diagram, we assume that the IT admin has authenticated with their Managed Apple ID.\n\nIf they have not, they would be prompted to authenticate first.\n\nThe IT admin is presented with the consent screen to confirm that they would like to share their organizational data with your app.\n\nThis is the same consent screen that we saw earlier.\n\nAs a reminder, it looks like this.\n\nOnce they click Allow, your app is provided with an authorization code at your return URL that you registered in the developer portal.\n\nThe final step involves a POST request to the token endpoint to retrieve your app's access token.\n\nLet us see what this request looks like.\n\nThe request body is composed of standard OAuth parameters including the authorization code received on your return URL.\n\nThe response would have the access token, its expiration, and the refresh token that is used to create a new access token when it expires.\n\nLet us take a look at the request details to generate a new access token using a refresh token.\n\nThe request body is composed of the standard OAuth parameters, including the refresh token, and the response would have the access token and its expiration.\n\nAfter successfully completing the OAuth 2.0 authorization flow, your app now has the access token, which can be used to fetch user and class information from the Roster API.\n\nAs part of our current release, we are introducing five endpoints that the apps can query.\n\nThese include fetching a list of classes, a list of users, a specific class, a specific user, users in a class.\n\nLet's walk through a simple example flow to demonstrate how you can fetch users and classes.\n\nYour app server can first retrieve the list of students, teachers, and staff by querying the users endpoint.\n\nLet us take a look at the request and response in detail.\n\nThe users endpoint takes in three query parameters.\n\nThe pageToken and limit are pagination parameters, and an optional role parameter lets you query for students, instructors, or staff.\n\nThe request requires the authorization header with the access token generated from the authorization flow.\n\nThe response is a JSON payload that includes a \"users\" key, which has the list of users; the \"nextPageToken\" key that is used to fetch the next set of records, and a \"moreToFollow\" Boolean key that indicates if there are any more records to query.\n\nLet's take a look at an example request.\n\nThe API call here is retrieving a list of students with a maximum of 10 students in the response.\n\nThis is the first API request, so the pageToken query parameter is not specified.\n\nThe response has standard user information such as givenName, familyName, etcetera, but I would like to draw your attention to the stable unique identifier for the user.\n\nThis is the same identifier your app receives when the user authenticates with Sign in with Apple.\n\nThe email address of the user and their roles in the organization are also included.\n\nThe nextPageToken needs to be used in the subsequent API request as a query parameter to fetch the next set of students, since the moreToFollow key is set to true.\n\nAfter querying the users endpoint, your app server can now query the classes endpoint, which gives you the list of classes for that particular school district and the relationship between the class and the students and teachers associated with that class.\n\nLet us take a look at the request and response in detail.\n\nAs part of the get classes request, the request takes in two query parameters: the pageToken and the limit parameter, both of which we saw before.\n\nThe headers are the same as when querying users.\n\nThe response is a JSON payload in which the \"classes\" key holds the list of classes.\n\nLet us take a look at an example request.\n\nThis request retrieves a list of classes with a maximum of 200 to be included in the response.\n\nThe API request also has the pageToken parameter, which means it is in the middle of fetching all classes.\n\nThe response has standard class information such as the name, the class identifier, etcetera, but I would like to draw your attention to the list of instructor IDs and student IDs that belong to the class.\n\nThat was the Roster API.\n\nWith these endpoints, your app can now programmatically query users and classes from Apple School Manager.\n\nFinally, I would like to talk to you about access management.\n\nIt is vital to provide management capabilities to organizations using Organizational Data Sharing and Sign in with Apple at Work & School.\n\nLet me explain what this means in more detail.\n\nWhen using Sign in with Apple, users manage their own account and it's solely up to them to decide which apps they choose to sign in to.\n\nBut when using Sign in with Apple at Work & School, the IT admin at the organization centrally manages access on behalf of all the users at that organization.\n\nThis is because the IT admin is responsible for ensuring the safety and security of the organization's data.\n\nSo, they must be empowered to manage which apps users are allowed to use Sign in with Apple at Work & School, and which apps are allowed to use Organizational Data Sharing.\n\nThese access management capabilities can be configured in Apple School Manager and Apple Business Manager.\n\nFor Sign in with Apple at Work & School, we offer two modes.\n\nThe first mode is \"Allow all apps.\" Let us see what this mode looks like.\n\nHere, the IT admin is logged in to Apple Business Manager.\n\nOn selecting Access Management from the sidebar and choosing Sign in with Apple, they are presented with the two modes.\n\nThe \"Allow all apps\" mode lets all users of the organization log in to all apps that support Sign in with Apple.\n\nThe second mode is \"Allow only certain apps.\" Let us see what this mode looks like.\n\nThe \"Allow only certain apps\" mode lets the IT admin search for apps that support Sign in with Apple to add to the list.\n\nUsers will only be able to use Sign in with Apple with the apps that have been added to the list.\n\nIf a user tries to log in to an app that is not on the list, they will see an error message.\n\nIt is important to note that this functionality is the same for Apple School Manager, Apple Business Manager, and Business Essentials customers.\n\nSimilar to Sign in with Apple at Work & School, Organizational Data Sharing also has the same two modes.\n\nLet's take a look.\n\nThe \"Allow only certain apps\" mode lets the IT admin search for supported apps to add to the list.\n\nIt is these apps that can access user and class information using the Roster API.\n\nIn addition to the consent screen, this is a second layer of control for the IT admin to manage which apps can access organizational data.\n\nWith the release of Sign in with Apple at Work & School, now users in any environment can use an Apple ID or a Managed Apple ID to log in to your app.\n\nIf you haven't already implemented Sign in with Apple, I encourage you to do so.\n\nI would also highly encourage you to adopt the Roster API if you are in the education space.\n\nImplementing support for Roster API will provide a seamless onboarding experience for IT administrators, staff, teachers, and students.\n\nAs always, we love hearing from you.\n\nSo please submit any feedback you may have.\n\nIf you'd like to learn more, I would highly suggest the \"Get the most out of Sign in with Apple\" session from 2020 and the \"Enhance your Sign in with Apple experience\" session this year.\n\nThank you so much for watching and we hope you enjoy this year's WWDC.\n\n♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Implementing User Authentication with Sign in with Apple",
        "url": "https://developer.apple.com/documentation/AuthenticationServices/implementing-user-authentication-with-sign-in-with-apple"
      },
      {
        "title": "Roster API",
        "url": "https://developer.apple.com/documentation/RosterAPI"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10053/4/8898553F-A636-4C8D-AAAF-DE7463409879/downloads/wwdc2022-10053_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10053/4/8898553F-A636-4C8D-AAAF-DE7463409879/downloads/wwdc2022-10053_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10122",
      "year": "2022",
      "title": "Enhance your Sign in with Apple experience",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10122"
    },
    {
      "id": "10045",
      "year": "2022",
      "title": "What's new in managing Apple devices",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10045"
    },
    {
      "id": "10173",
      "year": "2020",
      "title": "Get the most out of Sign in with Apple",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10173"
    }
  ],
  "extractedAt": "2025-07-18T09:27:10.008Z"
}