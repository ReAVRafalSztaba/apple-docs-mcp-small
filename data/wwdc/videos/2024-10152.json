{
  "id": "10152",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10152/",
  "title": "Create custom hover effects in visionOS",
  "speakers": [],
  "duration": "",
  "topics": [
    "Design"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello, and welcome to “Create custom hover effects in visionOS”. I’m Christian, an engineer on the SwiftUI team. In this video, you’ll learn how to make SwiftUI views respond when people look at them, using the new Custom Hover Effect API.\n\nOn visionOS, interactive areas highlight when people look at them. These highlights are applied using hover effects. Hover effects make your app feel responsive while providing feedback about which element will be triggered when people tap their fingers together.\n\nHover effects are added automatically to standard controls And can be added to custom controls, using the hoverEffect view modifier.\n\nFor more about standard effects like highlight, watch \"Elevate your windowed app for spatial computing\".\n\nThe standard highlight effect works great in most cases, but some views benefit from custom effects.\n\nSliders show a knob to invite interaction. Back buttons grow to show the name of the previous page. Tab bars pop open to show labels.\n\nAnd the Safari navigation bar expands to reveal browser tabs.\n\nWith the new Custom Hover Effect API in visionOS 2, you can build custom hover effects just like these.\n\nCustom hover effects can be applied to SwiftUI views anywhere in your app, including ornaments, and Reality View attachments. These effects are applied when people look at views, reach out with their finger or move a mouse cursor over them.\n\nCustom hover effects were designed from the ground up to preserve privacy. They’re applied by the system, outside the app process. without requiring extra entitlements or extensions.\n\nRealityKit also has new API to apply hover effects to 3D content. For details, check out \"What’s New in RealityKit\".\n\nI’m really excited to share this API with you. I’ll start by explaining how to change a view’s appearance using content effects. Then I’ll show how to apply multiple effects in concert, using effect groups. Next, I’ll describe how to control the timing of an effect, using delayed effects.\n\nFinally, I’ll use the new CustomHoverEffect protocol to create reusable effects that adapt to people’s accessibility preferences. Let’s get started talking about content effects! Content effects are fundamental effects that change how a view looks. They can change a view’s opacity, transform its geometry, or apply a clip shape. These effects only change how a view looks, and can’t impact the layout of nearby views. Effects transition between two states. When a view isn’t being looked at, the effect applies its inactive state.\n\nWhen someone looks at the view, the effect transitions to its active state and updates the view. Geometry effects, like this scale effect, modify a view’s geometry.\n\nClip effects reveal hidden parts of a view And opacity effects fade content in or out. When someone looks away from the view, the effect transitions back to its inactive state. Multiple effects can be composed together to create detailed transitions like this expansion effect. I’ve been developing this effect for a video playback app I’m working on. I’ll spend the rest of this video building this effect, step-by-step, until it’s perfect.\n\nHere’s the Destination Video app, running in the simulator. In the top-left corner, I’ve added a button to switch profiles. When I look at the button, it highlights. As a first step towards building the full expansion effect, I’ll make the button scale up when I look at it. Let’s write some code.\n\nI’ve already placed the icon and detail text in a custom button and am using a custom button style to control how the button looks. This is where I’ll add the scale effect.\n\nInside the ButtonStyle, I’ve added a standard highlight using the hoverEffect modifier.\n\nTo apply the scale effect, I’ll add a new block-based hoverEffect modifier.\n\nInside the block, I can use modifiers like scaleEffect to change how the view looks as it transitions between the active and inactive states.\n\nThe block will be called with isActive true to get the effect’s active state, and with isActive false to get the effect’s inactive state. Since effects are applied by the system, these calls happen up front, not when the hover actually occurs.\n\nSince I want the button to scale up when I look at it, I’ll apply a 5% scale when active, and no scale when inactive. Let’s check this out in the simulator.\n\nNice. The highlight and scale effects are applied together as I look at the button.\n\nNext, I’ll use a clip effect to hide and reveal the button’s detail text. Clip effects change which part of a view is visible and can be used to hide additional content when not active. When the effect becomes active, the clip effect can expand to reveal the previously hidden content.\n\nBack in the custom button style, I’ll move the existing clipShape modifier into the hoverEffect block so I can change the clipShape as the effect becomes active or inactive.\n\nTo change the clip shape’s size, I’ll add a size modifier to the shape and use the geometry proxy provided to the hover effect block to calculate the size of the active and inactive clip shapes.\n\nWhen the effect is active, the clipShape should span the width of the button, so that the entire button is visible. But when the effect is inactive, the button should be circular and only the icon should be visible. So I’ll make the clipShape’s width and height match, resulting in a circular clipShape.\n\nLastly, I’ll use the new anchor parameter to align the clip shape to the button’s leading edge, ensuring the icon is visible when the effect is inactive. Let’s try this out in the simulator.\n\nAmazing! When I look at the button it expands, and it collapses when I look away. I’ll add a little bit of polish to the effect, and make the detail text fade in as the button expands.\n\nSince only the text should fade, I’ll add a hoverEffect to the detail text and apply an opacity effect that fades the text from 0 to 1.\n\nThis is close, but not quite right. Let’s look at it again.\n\nI wanted the detail text to fade in as the button expands, but it only fades in when I look at the space where the detail text should be. Let’s discuss why.\n\nHover effects become active when someone looks at the view they’re attached to. I applied the scale and clipShape effects to the entire button, so they become active when I look anywhere inside the button. But I applied the opacity effect to the detail text, so it only becomes active when I look at the text. Instead, I need a way for the effects to activate together and to do that I’ll use Effect groups. Grouped effects are applied together, whenever any effect in the group becomes active. When effects from different views are grouped together, the group becomes active when I look at any of those views. This means effect groups control which areas of your app activate an effect.\n\nThere are two ways to group effects. Explicitly, and implicitly. I’ll start by explicitly grouping these effects.\n\nTo do so, I’ll create a HoverEffectGroup to represent the group. I’ll provide the group a unique ID using a Namespace.\n\nNow that I’ve identified the group, I’ll explicitly add each effect to the group, starting with the opacity effect. I’ll provide the group to the ButtonStyle and add the remaining effects to the group. With all the effects in the same group, they should now activate together as a single effect.\n\nThis is really good! All the effects activate together in concert. The text fades in as the button expands, and fades out as the button collapses.\n\nExplicitly grouping effects like this provides the most flexibility and control when grouping effects. But when I don’t need that level of control, I can also implicitly group effects.\n\nInstead of providing a hoverEffectGroup to every effect, I can simply add a hoverEffectGroup modifier to the view. This will implicitly add every effect on this view and its sub-views to the group. So, I don’t need to add the group to every effect. And if I don’t provide a group to the modifier, a group will be implicitly created for me as well. Super convenient, right? The profile button’s really coming along. I’ve used content effects and effect groups to apply all the visual changes I need. But the button expands as soon as I look at it, which can get distracting. It would be better if it waited a moment before expanding. I can control when my button expands using delayed effects. By default, hover effects are applied immediately. This is great for subtle effects that invite interaction. But nearly all effects benefit from even a short delay. This prevents effects from briefly activating as people glance around an app.\n\nPeople are never perfectly still. Using a delay to briefly keep an effect active accommodates for this natural motion, and avoids flickering.\n\nLastly, effects that reveal additional content should have longer delays. These effects easily become distracting, and should be reserved for moments when people are focused on a particular element of an app. The right delay is different for every effect, so always try effects out while wearing Apple Vision Pro and see what feels right.\n\nSince the profile button reveals content, I’ll add a longer delay.\n\nTo apply the delay, I’ll wrap the effect in an animation modifier and provide a delayed animation.\n\nI’ve used the default animation with a longer delay when the effect becomes active, and a shorter delay when the effect becomes inactive.\n\nI won’t delay the scaleEffect though. This effect provides immediate feedback, so it should apply immediately as well.\n\nSince the text fades in as the button expands, I’ll apply the same animation to the opacity effect so the effects stay in sync. Let’s try the effect again now that it has a delay.\n\nSweet. The button still provides immediate feedback via the scale and highlight effects. But it waits a moment before expanding.\n\nBefore moving on, let’s talk a bit more about animating effects.\n\nWhen an animation isn’t specified, effects use SwiftUI’s default animation.\n\nHover effects support familiar animations like linear, easeOut, and spring animations as well as animations with custom timing curves.\n\nBut CustomAnimation types are not supported, since they can’t be applied outside your app’s process.\n\nThe expanding button feels really great to me. But for people with motion sensitivity, it could feel uncomfortable. You should always keep accessibility in mind when developing effects, and provide alternative effects when needed. In the remainder of this video, I’ll update the profile button to use a cross-fade effect when the “reduce motion” setting is enabled.\n\nThe button will still expand and collapse as I look at it, but will use a fade effect instead. Now, I’ve already written a fade effect to fade in the detail text. Instead of creating a duplicate effect, I’ll use the new CustomHoverEffect protocol to create an effect that I can use in both places.\n\nTo create a reusable effect, I’ll copy the hoverEffect modifier I wrote earlier and place it in a new FadeEffect type that conforms to CustomHoverEffect.\n\nWithin the effect’s body method, I have access to the same hoverEffect modifiers I used in the view. This makes it easy to start simple, and then refactor as I need to. Now that this effect is it’s own type, I can make it even more useful by allowing the inactive and active opacity values to be customized.\n\nNow that I have a re-usable fade effect, I’ll go back and use it in the button view. I simply need to remove the hoverEffect block And replace it with my new FadeEffect().\n\nI really love how this makes my code reusable and cleaner at the same time. So I’ll move the expand effect into a CustomHoverEffect type as well. Just as before, I’ll move the hoverEffect block from the view and place it in a new CustomHoverEffect type which I’ll call ExpandEffect.\n\nBack in the button style, I’ll remove the block-based hoverEffect and replace it with my new ExpandEffect(). Beautiful! Now that all my effects are reusable, I can update the profile button to cross-fade when reduce motion is enabled.\n\nI’ll start by adding an @Environment property to access the reduceMotion setting.\n\nWhen reduceMotion is enabled my ExpandEffect() shouldn’t be applied. So I’ll apply an empty effect instead. The empty effect is just that an effect that does nothing. To dynamically switch between different effects, I need to wrap each in a HoverEffect type to erase their individual types. I’m not done yet, but I’ll check my progress in the simulator.\n\nThe background shape isn’t right yet, but the button isn’t expanding anymore and the detail text still fades in as it should. Let’s update the background to cross-fade in sync with the text.\n\nTo do that I’ll replace the existing background with two separate background views. The first is a Capsule() that spans the width of the button, and should become visible when I look at the button. So I’ll apply my FadeEffect to it when reduceMotion is enabled.\n\nThe second, circular background should only be visible when I’m not looking at the button. I’ll apply my FadeEffect here as well with custom opacity values so it fades out as the other fades in.\n\nThis works great! When I look at the button, the background and detail text now fade in together. The expanding button is now complete! I’ve created a detailed effect by combining just a few simple effects together. By choosing the right delays, and respecting peoples’ accessibility preferences I’ve ensured the effect feels great for everyone. Now it’s time to get creative and build your own custom hover effects! I encourage you to start simple, and build effects step-by-step. But keep some parts of a view static, like the icon in the profile button I created. These anchoring elements provide continuity during effect transitions. And of course, thoroughly test your effects. The simulator is great for quick iteration, but the only way to know how effects feel is to test them out while wearing Apple Vision Pro.\n\nFor more tips on creating amazing hover effects, check out the updated Human Interface Guidelines., and thanks for watching!",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "4:06",
      "title": "Button with Scale Effect",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .clipShape(.capsule)\n                .hoverEffect { effect, isActive, _ in\n                    effect.scaleEffect(isActive ? 1.05 : 1.0)\n                }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(width: 44, height: 44)\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "5:37",
      "title": "Button with Clip and Scale Effects",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .hoverEffect { effect, isActive, proxy in\n                    effect.clipShape(.capsule.size(\n                        width: isActive ? proxy.size.width : proxy.size.height,\n                        height: proxy.size.height,\n                        anchor: .leading\n                    ))\n                    .scaleEffect(isActive ? 1.05 : 1.0)\n                }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(\n                    width: 44,\n                    height: 44\n                )\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "6:50",
      "title": "Expanding Button with Ungrouped Fade",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect { effect, isActive, _ in\n                        effect.opacity(isActive ? 1 : 0)\n                    }\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .hoverEffect { effect, isActive, proxy in\n                    effect.clipShape(.capsule.size(\n                        width: isActive ? proxy.size.width : proxy.size.height,\n                        height: proxy.size.height,\n                        anchor: .leading\n                    ))\n                    .scaleEffect(isActive ? 1.05 : 1.0)\n                }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(width: 44, height: 44)\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "8:19",
      "title": "Expanding Button with Explicit Group",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    @Namespace var hoverNamespace\n    var hoverGroup: HoverEffectGroup {\n        HoverEffectGroup(hoverNamespace)\n    }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect(in: hoverGroup) { effect, isActive, _ in\n                        effect.opacity(isActive ? 1 : 0)\n                    }\n            }\n        }\n        .buttonStyle(ProfileButtonStyle(hoverGroup: hoverGroup))\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(width: 44, height: 44)\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}\n\nstruct ProfileButtonStyle: ButtonStyle {\n    var hoverGroup: HoverEffectGroup?\n    func makeBody(configuration: Configuration) -> some View {\n        configuration.label\n            .background(.thinMaterial)\n            .hoverEffect(.highlight, in: hoverGroup)\n            .hoverEffect(in: hoverGroup) { effect, isActive, proxy in\n                effect.clipShape(.capsule.size(\n                    width: isActive ? proxy.size.width : proxy.size.height,\n                    height: proxy.size.height,\n                    anchor: .leading\n                ))\n                .scaleEffect(isActive ? 1.05 : 1.0)\n            }\n    }\n}"
    },
    {
      "timestamp": "9:13",
      "title": "Expanding Button with Implicit Group",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect { effect, isActive, _ in\n                        effect.opacity(isActive ? 1 : 0)\n                    }\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n        .hoverEffectGroup()\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .hoverEffect { effect, isActive, proxy in\n                    effect.clipShape(.capsule.size(\n                        width: isActive ? proxy.size.width : proxy.size.height,\n                        height: proxy.size.height,\n                        anchor: .leading\n                    ))\n                    .scaleEffect(isActive ? 1.05 : 1.0)\n                }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(\n                    width: 44,\n                    height: 44\n                )\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "10:51",
      "title": "Expanding Button with Delayed Effect",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect { effect, isActive, _ in\n                        effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                            $0.opacity(isActive ? 1 : 0)\n                        }\n                    }\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n        .hoverEffectGroup()\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .hoverEffect { effect, isActive, proxy in\n                    effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                        $0.clipShape(.capsule.size(\n                            width: isActive ? proxy.size.width : proxy.size.height,\n                            height: proxy.size.height,\n                            anchor: .leading\n                        ))\n                    }.scaleEffect(isActive ? 1.05 : 1.0)\n                }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(\n                    width: 44,\n                    height: 44\n                )\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "12:50",
      "title": "Expanding Button with Reusable Effects",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect(FadeEffect())\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n        .hoverEffectGroup()\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background(.thinMaterial)\n                .hoverEffect(.highlight)\n                .hoverEffect(ExpandEffect())\n        }\n    }\n\n    struct ExpandEffect: CustomHoverEffect {\n        func body(content: Content) -> some CustomHoverEffect {\n            content.hoverEffect { effect, isActive, proxy in\n                effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                    $0.clipShape(.capsule.size(\n                        width: isActive ? proxy.size.width : proxy.size.height,\n                        height: proxy.size.height,\n                        anchor: .leading\n                    ))\n                }.scaleEffect(isActive ? 1.05 : 1.0)\n            }\n        }\n    }\n\n    struct FadeEffect: CustomHoverEffect {\n        var from: Double = 0\n        var to: Double = 1\n\n        func body(content: Content) -> some CustomHoverEffect {\n            content.hoverEffect { effect, isActive, _ in\n                effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                    $0.opacity(isActive ? to : from)\n                }\n            }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(\n                    width: 44,\n                    height: 44\n                )\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    },
    {
      "timestamp": "14:14",
      "title": "Final Expanding Button with Accessibility Support",
      "language": "swift",
      "code": "struct ProfileButtonView: View {\n    var action: () -> Void = { }\n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 2) {\n                ProfileIconView()\n                ProfileDetailView()\n                    .hoverEffect(FadeEffect())\n            }\n        }\n        .buttonStyle(ProfileButtonStyle())\n        .hoverEffectGroup()\n    }\n\n    struct ProfileButtonStyle: ButtonStyle {\n        @Environment(\\.accessibilityReduceMotion) var reduceMotion\n        func makeBody(configuration: Configuration) -> some View {\n            configuration.label\n                .background {\n                    ZStack(alignment: .leading) {\n                        Capsule()\n                            .fill(.thinMaterial)\n                            .hoverEffect(.highlight)\n                            .hoverEffect(\n                                reduceMotion ? HoverEffect(FadeEffect()) : HoverEffect(.empty))\n                        if reduceMotion {\n                            Circle()\n                                .fill(.thinMaterial)\n                                .hoverEffect(.highlight)\n                                .hoverEffect(FadeEffect(from: 1, to: 0))\n                        }\n                    }\n                }\n                .hoverEffect(\n                    reduceMotion\n                    ? HoverEffect(.empty)\n                    : HoverEffect(ExpandEffect())\n                )\n        }\n    }\n\n    struct ExpandEffect: CustomHoverEffect {\n        func body(content: Content) -> some CustomHoverEffect {\n            content.hoverEffect { effect, isActive, proxy in\n                effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                    $0.clipShape(.capsule.size(\n                        width: isActive ? proxy.size.width : proxy.size.height,\n                        height: proxy.size.height,\n                        anchor: .leading\n                    ))\n                }.scaleEffect(isActive ? 1.05 : 1.0)\n            }\n        }\n    }\n\n    struct FadeEffect: CustomHoverEffect {\n        var from: Double = 0\n        var to: Double = 1\n\n        func body(content: Content) -> some CustomHoverEffect {\n            content.hoverEffect { effect, isActive, _ in\n                effect.animation(.default.delay(isActive ? 0.8 : 0.2)) {\n                    $0.opacity(isActive ? to : from)\n                }\n            }\n        }\n    }\n\n    struct ProfileIconView: View {\n        var body: some View {\n            Image(systemName: \"person.crop.circle\")\n                .resizable()\n                .scaledToFit()\n                .frame(\n                    width: 44,\n                    height: 44\n                )\n                .padding(6)\n        }\n    }\n\n    struct ProfileDetailView: View {\n        var body: some View {\n            VStack(alignment: .leading) {\n                Text(\"Peter McCullough\")\n                    .font(.body)\n                    .foregroundStyle(.primary)\n                Text(\"Switch profiles\")\n                    .font(.footnote)\n                    .foregroundStyle(.tertiary)\n            }\n            .padding(.trailing, 24)\n        }\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "CustomHoverEffect",
        "url": "https://developer.apple.com/documentation/SwiftUI/CustomHoverEffect"
      },
      {
        "title": "Destination Video",
        "url": "https://developer.apple.com/documentation/visionOS/destination-video"
      },
      {
        "title": "Forum: UI Frameworks",
        "url": "https://developer.apple.com/forums/topics/ui-frameworks?cid=vf-a-0010"
      },
      {
        "title": "Human Interface Guidelines: Eyes",
        "url": "https://developer.apple.com/design/human-interface-guidelines/eyes"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10152/5/A8C4BDC1-D218-446B-AABE-C4419C65C6A6/downloads/wwdc2024-10152_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10152/5/A8C4BDC1-D218-446B-AABE-C4419C65C6A6/downloads/wwdc2024-10152_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10103",
      "year": "2024",
      "title": "Discover RealityKit APIs for iOS, macOS, and visionOS",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10103"
    },
    {
      "id": "10110",
      "year": "2023",
      "title": "Elevate your windowed app for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10110"
    }
  ],
  "extractedAt": "2025-07-18T09:35:51.783Z"
}