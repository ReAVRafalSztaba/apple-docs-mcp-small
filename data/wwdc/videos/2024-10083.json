{
  "id": "10083",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10083/",
  "title": "Get started with HealthKit in visionOS",
  "speakers": [],
  "duration": "",
  "topics": [
    "Health & Fitness",
    "Spatial Computing"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello, and welcome. My name is Zach. And I'm Sirinda. We’re engineers working on visionOS Health experiences.\n\nAs you might know, HealthKit provides a centralized and encrypted repository for the user’s health data, and with permission, you can access this data to create experiences that help people get healthy and stay healthy.\n\nHealthKit capabilities include the ability to query and write health data, as well as aggregate and compute statistics of data over time.\n\nYou can also register your app to receive updates in the foreground or background when data changes.\n\nData can be stored in HealthKit across a broad spectrum of health domains, including activity, heart, and sleep, as well as clinical health records such as immunizations and procedures.\n\nFor more information on HealthKit, refer to our 2020 session, \"Getting Started with HealthKit\".\n\nLast year, we brought HealthKit to a new platform with the release of iPadOS 17, which enabled you to create rich experiences that draw upon data stored in HealthKit to explore on iPad, like this app, Rise.\n\nThat’s right! And now, with visionOS 2, HealthKit is available on Apple Vision Pro. Spatial computing unlocks exciting opportunities to build a wide range of immersive and collaborative Health experiences.\n\nWe’re excited to show you how easy it is to build a HealthKit-powered app for visionOS. In this presentation, we’ll go over the capabilities of HealthKit in visionOS. Then, we’ll demonstrate some ways to craft experiences that feel at home within the Shared Space.\n\nFinally, we’ll discuss the Guest User feature of visionOS and how HealthKit operates for Guest Users. Let’s begin by taking a look at the capabilities of the framework on the new platform.\n\nHealthKit in visionOS behaves very similarly as in iPadOS. Your app can read and write data, compute statistics, as well as register for updates. Here are a couple other things to keep in mind.\n\nAs on other platforms, the user can view and edit each app’s authorization to health data in the Settings app.\n\nAnd users can have their data sync between their devices periodically through iCloud.\n\nHealthKit in visionOS is available for apps using the visionOS SDK and iPadOS apps compiled against iOS 17 or later.\n\nFor today’s session, we’ve been working on an app that lets you log emotions corresponding to calendar events using the new HealthKit state of mind API, and I want to bring this app to visionOS. To learn more about how we’re using the state of mind API, check out this year’s session, \"Explore wellbeing APIs in HealthKit\".\n\nLet’s review the basics. When adopting HealthKit, it’s essential for your app to check whether health data is available, which can vary based on factors such as device and OS version.\n\nUse the function isHealthDataAvailable to adjust your app’s experience appropriately if you want to continue supporting previous versions of visionOS.\n\nAfter checking whether health data is available, you must next request authorization from the user to read or write the data types your app is interested in.\n\nThe healthDataAccessRequest function will trigger a prompt for the user to grant your app access to health data. It’s best to request only what you need and only at the moment your app needs it.\n\nFollowing these best practices makes it really easy to update an iPadOS app to run on visionOS. In fact, you don’t need to do anything! Since my app is checking for health data availability using the APIs I outlined, when I compile it against iOS 17 or later, the app already offers a Designed for iPad experience on visionOS 2.0, with no updates needed. This puts me at an excellent starting point. Now, I’ll hand it off to Sirinda to walk through some best practices to consider if you’re interested in developing a HealthKit app that leans in to spatial computing.\n\nThanks, Zach. I’d like to show how easy it is to design our app for visionOS.\n\nFirst, I’ll make sure that our app adopts the design and interaction patterns of visionOS, so that it takes advantage of the strengths of the platform.\n\nI’ll also look for opportunities to refine and enhance our experience to surface more information and add nuance to the health data we display.\n\nI’ll then take a moment to get inspired by ways to go above and beyond to really make HealthKit experiences shine on visionOS.\n\nLet’s begin.\n\nFirst, I’ll add visionOS as a destination to our app target, which will enable running our app on the platform.\n\nChoosing Designed for iPad will get you the experience that Zach demoed. For today, I’ll choose Apple Vision to fully utilize the visionOS SDK.\n\nOur app will use the same HealthKit data authorization configurations as iPadOS. It just works! For more information on bringing your existing apps to visionOS, check out the session \"Elevate your windowed app for spatial computing\".\n\nAlright! Now that I've built our app for visionOS, it automatically adopts the standard system appearance. Standard SwiftUI components like TabView and Sheets translate beautifully to visionOS.\n\nSince health data syncs across devices, we can now view the same charts and insights on Apple Vision Pro. And because our insights are configured using Swift Charts, they already look great.\n\nNow that our app looks right at home on the platform, let’s explore how we can make use of this infinite spatial canvas. I’ve already made a couple of changes that enhance the experience on visionOS.\n\nIn this tab, I’ve made the chart dynamically resizable so that when I pinch and drag to expand the app window, I can see even more data at a glance.\n\nTo do this, I’m using a new SwiftUI API this year, onGeometryChange, to observe for changes in our chart’s size. I can scale up the number of chart points in response to a larger view.\n\nAnd since I still have room to spare in our spatial canvas, why not compare two charts, side-by-side? Thankfully, adding multi-window support is easy, because my iPad app already supports split view. To learn more about how to configure multi-window support, see the documentation linked in our session notes.\n\nHere in my code, I create a Button that calls the openWindow action with an identifier corresponding to the new chart. The action opens up a chart in a new window. And we don’t have to stop there! It’s easy to create fully immersive spatial experiences without having to rewrite your entire app.\n\nFor example, I’d like to reimagine our emotion logging experience to take advantage of the immersive capabilities of visionOS.\n\nLet’s say I just wrapped up a brainstorm session, and I want to reflect on how I’m feeling.\n\nOn Apple Vision Pro, I can enter an immersive space.\n\nOther apps are hidden, and the surrounding passthrough dims to provide a sense of separation from my workspace.\n\nWith no distractions in the way, I’ll reflect on my latest calendar event through a colorful immersive experience.\n\nOnce I tap Save to HealthKit, the color fades from the passthrough and my apps return, so I can continue right where I left off. With all these updates, our app feels at home on visionOS, we’ve enhanced existing experiences, and even created some new ones. Nice. Now that your app has been customized for visionOS, there’s one more thing you need to do, and that has to do with Guest User.\n\nGuest User is a feature of visionOS that allows others to set up and try out Apple Vision Pro. It’s a great way to experience spatial computing, and it includes features to preserve the owner’s data and privacy. For a more detailed overview of Guest User, check out the article \"Let others use your Apple Vision Pro\" from Apple Support.\n\nDuring a Guest User session, the Guest is able to use apps that the owner has authorized. In most cases, the experience is unchanged, but there are some special considerations when working with HealthKit. Apps running for the guest can still access HealthKit data if they are already authorized. However, apps cannot request additional HealthKit authorizations from the guest, and the system will not present the authorization flow if requested, returning an error instead.\n\nThe Guest is also not able to edit authorization, privacy, or security options in visionOS Settings.\n\nThere’s one more restriction on interacting with health data as a Guest User, and that’s when it comes to writing data.\n\nHealth data cannot be written to HealthKit during a Guest User session. This is to prevent data generated by the guest from mixing with the owner’s health data.\n\nHealthKit will return a new error if an app attempts to write data during the session. Handling this error gives you the opportunity to safely discard data generated by the Guest, which ensures that it isn’t saved to the owner’s health store at a later time. This is also a good place to trigger an alert to indicate to Guests that the data has not been saved.\n\nThanks for the run-down on Guest User. Let’s update our app with these considerations in mind.\n\nAs Zach mentioned, authorization sheets are not presented to Guest Users. That means that any call to healthDataAccessRequest during a Guest User session will fail with an error. We recommend deferring requests for a later time. A Guest User may also attempt to write data. However, the sample will fail to save to the health store, so I’ve updated the existing logic to handle the error I receive.\n\nAs Zach said, when receiving this error, we recommend discarding health data samples generated by the guest. Finally, we want to notify the Guest User that their data has not been saved. This is the code that enables the user to choose an emotion. Here, I’ve modified this button to present an alert any time an error is thrown when a guest tries to log an emotion. Now that we've configured our app for a seamless Guest User experience, let’s make sure that our changes work as intended. When I open the app as a Guest User, I will not see any health data authorization prompts. This is because apps running for Guests inherit authorizations given by the owner. So, I’m able to experience the app as the owner would. However, let’s try to log an emotion.\n\nI’ll tap this event, and make a selection.\n\nOnce I’m done, an alert is presented to notify me that my data as a Guest User has not been saved. Handling the error in this way allows guests to get a feel for the app, without adding their data to the owner’s health store.\n\nNow that I’ve configured our app to handle Guest Users, I’m just about ready to share my app in Apple Vision Pro with friends and family. Here are some best practices to keep in mind: Guest Users are restricted from authorizing health data access, so make sure to update your authorization calls to handle this error appropriately.\n\nRemember to discard any health data that the Guest User has attempted to write. This helps to prevent data generated by the Guest from mixing with the owner’s health data.\n\nFinally, remember that apps can continue to read health data if the owner has already authorized the app.\n\nSticking to these best practices is vital to maintaining a seamless experience for both the Guest User and the owner! Thanks Sirinda, awesome work. To summarize, HealthKit is coming to visionOS, enabling reading, writing, and observing of health data on a new platform.\n\nWhen adopting, take the opportunity to refine and rethink your experiences for spatial computing.\n\nAnd remember to adjust your code in light of how HealthKit operates for Guest Users.\n\nFor more information, you can check out these talks, and be sure to download our sample app to see some examples in code. We’re really excited to be bringing HealthKit to visionOS, and look forward to seeing the experiences you’ll build. Thanks for joining us!",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "2:43",
      "title": "Check whether health data is available",
      "language": "swift",
      "code": "import HealthKit\n\nif HKHealthStore.isHealthDataAvailable() {\n    // Configure HealthKit-powered experiences\n} else {\n    // Omit HealthKit experiences\n}"
    },
    {
      "timestamp": "3:03",
      "title": "Request authorization to read or write data",
      "language": "swift",
      "code": "import HealthKitUI\nimport SwiftUI\n\nfunc healthDataAccessRequest(\n    store: HKHealthStore,\n    shareTypes: Set<HKSampleType>,\n    readTypes: Set<HKObjectType>? = nil,\n    trigger: some Equatable,\n    completion: @escaping (Result<Bool, any Error>) -> Void\n) -> some View"
    },
    {
      "timestamp": "5:59",
      "title": "Update number of chart points based on chart’s size",
      "language": "swift",
      "code": "// Update number of chart points based on chart’s size\n\nimport SwiftUI\nimport HealthKit\nimport Charts\n\nstruct ChartView: View {\n    @State var chartBinCount: Int\n\n    var body: some View {\n        Chart { ...\n            // Chart body\n        }\n        .onGeometryChange(for: Int.self) { proxy in // Observe for changes to the chart’s size\n            Int(proxy.size.width / 80) // 80 points per chart point\n        } action: { newValue in\n            // Update the number of chart points\n            chartBinCount = newValue        \n        }\n    }\n}"
    },
    {
      "timestamp": "6:33",
      "title": "Open chart as a new window",
      "language": "swift",
      "code": "// Opens chart as a new window\n    \nstruct NewChartViewerButton: View {\n    @Environment(\\.openWindow) private var openWindow\n\n    var body: some View {\n        Button(\"Open In New Window\", systemImage: \"plus.rectangle.on.rectangle\") {\n            openWindow(id: \"chart-viewer-window\")\n        }\n    }\n}"
    },
    {
      "timestamp": "9:00",
      "title": "HealthKit returns a new error if a write is attempted during a Guest User session",
      "language": "swift",
      "code": "let sample = HKStateOfMind(date: date, kind: .momentaryEmotion, valence: valence,\n                           labels: [label], associations: [association])\ndo {\n    try await healthStore.save(sample)\n} catch {\n    switch error {\n    case HKError.errorNotPermissibleForGuestUserMode:\n        // Drop data generated in a Guest User session\n    default:\n        // Existing error handling\n    }\n}"
    },
    {
      "timestamp": "9:26",
      "title": "Request authorization to State of Mind datatype",
      "language": "swift",
      "code": "// Request authorization to State of Mind datatype\n\n@main\nstruct HKStateOfMindDataSampleApp: App {\n    @State var toggleHealthDataAuthorization = false\n    @State var healthDataAuthorized: Bool?\n    \n    var body: some Scene {\n        WindowGroup {\n            TabView { ... }\n                .healthDataAccessRequest(store: healthStore,\n                                         shareTypes: [.stateOfMindType()],\n                                         readTypes: [.stateOfMindType()],\n                                         trigger: toggleHealthDataAuthorization) { result in\n                    switch result {\n                    case .success: healthDataAuthorized = true\n                    case .failure(let error as HKError):\n                        switch (error.code) {\n                        case .errorNotPermissibleForGuestUserMode:\n                            // Defer requests for a later time\n                        default:\n                            // Existing error handling\n                        }\n                        ...\n                    }\n                }\n        }\n    }\n}"
    },
    {
      "timestamp": "9:42",
      "title": "Save a State of Mind sample from an emoji type",
      "language": "swift",
      "code": "// Saves a State of Mind sample from an emoji type \npublic func saveSample(date: Date,\n                       association: HKStateOfMind.Association,\n                       healthStore: HKHealthStore,\n                       didError: Binding<Bool>) async -> SaveDetails? {\n    do {\n        let sample = createSample(date: date, association: association)\n        try await healthStore.save(sample)\n    } catch {\n        switch error {\n        case HKError.errorNotPermissibleForGuestUserMode:\n            // Drop data you generate in a Guest User session.\n            didError.wrappedValue = true\n            return SaveDetails(errorString: \"Health data is not saved for Guest Users.\")\n        default:\n            // Existing error handling.\n            didError.wrappedValue = true\n            return SaveDetails(errorString: \"Health data could not be saved: \\(error)\")\n        }\n    }\n..."
    },
    {
      "timestamp": "9:58",
      "title": "Present an alert with a message using the given details",
      "language": "swift",
      "code": "// Present an alert with a message using the given details\n\nstruct EventView: View {\n    @State private var showAlert: Bool = false\n    @State private var saveDetails: EmojiType.SaveDetails? = nil\n\n    var body: some View {\n        EmojiPicker()\n            .alert(\"Unable to Save Health Data\",\n                   isPresented: $showAlert,\n                   presenting: saveDetails,\n                   actions: { _ in }, // default OK button\n                   message: { details in\n                Text(details.errorString)\n            })\n   }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Bringing multiple windows to your SwiftUI app",
        "url": "https://developer.apple.com/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app"
      },
      {
        "title": "Forum: Health & Fitness",
        "url": "https://developer.apple.com/forums/topics/health-and-fitness?cid=vf-a-0010"
      },
      {
        "title": "HealthKit",
        "url": "https://developer.apple.com/documentation/HealthKit"
      },
      {
        "title": "Visualizing HealthKit State of Mind in visionOS",
        "url": "https://developer.apple.com/documentation/HealthKit/visualizing-healthkit-state-of-mind-in-visionos"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10083/4/3EDC61A5-EEBF-48EB-9CB9-9AC6F587005E/downloads/wwdc2024-10083_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10083/4/3EDC61A5-EEBF-48EB-9CB9-9AC6F587005E/downloads/wwdc2024-10083_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10109",
      "year": "2024",
      "title": "Explore wellbeing APIs in HealthKit",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10109"
    },
    {
      "id": "10110",
      "year": "2023",
      "title": "Elevate your windowed app for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10110"
    },
    {
      "id": "10664",
      "year": "2020",
      "title": "Getting started with HealthKit",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10664"
    }
  ],
  "extractedAt": "2025-07-18T10:37:40.088Z"
}