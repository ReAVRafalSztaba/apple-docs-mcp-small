{
  "id": "10005",
  "year": "2022",
  "url": "https://developer.apple.com/videos/play/wwdc2022/10005/",
  "title": "What's new in HealthKit",
  "speakers": [],
  "duration": "",
  "topics": [
    "Health & Fitness"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hip music ♪ ♪ Hello and welcome to WWDC.\n\nMy name's Karim, and I'm a HealthKit engineer.\n\nThe HealthKit framework provides the foundation for building great health experiences, and Apple Watch comes packed with many health and safety features, that keep an eye on things for you.\n\nOne of the most popular is sleep tracking, and we are making updates to capture more detailed sleep data.\n\nWe also have other great new additions to HealthKit this year.\n\nWe enhanced our APIs to make it easier to query for data with Swift async.\n\nWe're improving workouts with a richer workout representation.\n\nAnd we're adding support for saving vision prescriptions, including a digital copy of the physical prescription.\n\nI'm excited to tell you more about all these updates and how your apps can leverage them.\n\nLet's get started! Sleep is such an essential function that allows our bodies and minds to recharge, and I love using my Apple Watch to manage my sleep schedule and get insights that help me understand and improve my sleep.\n\nThis year we are making sleep tracking even better by introducing sleep stages.\n\nApple Watch will automatically track all the different sleep stages you go through when you're asleep, and this data will be accessible from the Health app and saved in HealthKit.\n\nOf course, your app will be able to read and save sleep stages data.\n\nSleep data saved by Apple Watch or your app is represented in HealthKit by category samples with the identifier sleepAnalysis.\n\nWe will support three sleep stages: REM, core, and deep.\n\nWhen saving sleep data to HealthKit, you should make sure to create one sample for each continuous period of time in a given sleep stage.\n\nThis is what the sleep sample value enum looks like.\n\nWe're adding three cases to represent sleep stages, starting with asleepCore, which corresponds to stages one and two of the scoring model from the American Academy of Sleep Medicine or AASM; asleepDeep, which corresponds to stage three of the AASM scoring model; and finally, asleepREM, which corresponds to the rapid eye movement stage.\n\nNow that we added sleep stages, we are deprecating the asleep case in favor of asleepUnspecified, which indicates that the user is asleep but no sleep stage was specified.\n\nWith the updated sleep samples enum, it is now possible to save and read sleep stages data from HealthKit.\n\nWe added a new predicate to make it easy to read sleep samples for a given stage.\n\nLet's say I want to read sleep samples in the REM stage.\n\nFirst, I create a predicate using the new predicateForSamples method with asleepREM as value.\n\nNow, I can start building my query.\n\nI create a predicate for my query with the sleepAnalysis sample type and the sleep stage predicate.\n\nAnd with this query predicate, I can now create my query.\n\nRunning the query will give me back an array of sleep samples in the REM stage.\n\nHowever, if you're interested in reading samples for all sleep stages, including unspecified, it's important that you update your app to use the new .allAsleepValues when building your predicate.\n\nIf you haven't looked at HealthKit since last year, this shorter syntax for querying may look unfamiliar to you.\n\nSince iOS 15.4, we have updated our query API to support Swift async.\n\nQueries are an essential piece of HealthKit, and with Swift async support, they're easier to use with a more concise syntax.\n\nQueries allow you to read various data from HealthKit, using predicates to filter the results, and also watch for new data as it comes in.\n\nAll queries are subclasses of HKQuery.\n\nIf I'm interested in knowing the total calories burned over a certain period of time, a great query to get these computed statistics is HKStatisticsCollectionQuery.\n\nTo get the initial results, you would set the initialResultsHandler closure of the query.\n\nAnd if you're interested in watching for any updates, you would additionally set the statisticsUpdateHandler closure.\n\nOnce the query is started, these closures will be called with the results.\n\nThanks to Swift async, we are making this even simpler.\n\nEach query now has a matching query descriptor, so HKStatisticsCollectionQuery becomes HKStatisticsCollectionQuery Descriptor.\n\nYou get the initial result by simply calling the async result(for:) method.\n\nIf, on the other hand, you want to get the initial result and also watch for updates, you call results(for:), which returns an AsyncSequence that you can loop through to read the results.\n\nHealthKit is great for tracking workouts and relevant metrics such as burned calories.\n\nTo find out how many calories I burned this week, I can use the statistics collection query descriptor.\n\nFirst, I create the query descriptor with a predicate to match calorie samples.\n\nI use the cumulativeSum option because I want the total sum.\n\nI'm interested in this week's data, so I use thisSunday as my anchorDate.\n\nAnd finally, I want my calorie totals to be computed for a time interval of one week.\n\nOnce I created my query descriptor, all I need to do is call result(for:) with a healthStore object.\n\nThe returned statisticsCollection object gives me a snapshot of my current data.\n\nBut if I want live updates as my calories change, it's as simple as calling results(for:) and looping through the returned async sequence to read the results.\n\nWhen I'm done watching for updates, I just break out of the loop and that will stop the query.\n\nNow, let's talk about workouts.\n\nHealthKit is a great place for saving workouts and all their related metrics whether you're going on a casual bike ride or pushing yourself to the limit at a race.\n\nAnd oftentimes, workouts may contain more than one distinct activity.\n\nYou may be repeating the same exercise with interval training or participating in a triathlon race which comprises swimming, cycling, and running.\n\nWe are updating our workouts API in iOS 16 and watchOS 9 to make it possible to capture these types of workouts and the relevant statistics for each activity.\n\nThis is the timeline of a swim-bike-run workout I did recently.\n\nI started with swimming, after which I took a little bit of time to get ready for the cycling portion of the workout, and finally running.\n\nEach activity is represented by an HKWorkoutActivity object.\n\nEach workout activity is created with its own workout configuration, which includes the activity type.\n\nA workout activity holds a list of events that occurred during the activity.\n\nAnd you will be able to read statistics for each activity, which is great for when you're only interested in analyzing what happened during a particular activity.\n\nGoing back to my timeline, my three activities are configured with their appropriate activity type.\n\nActivities cannot overlap in time.\n\nAnd because there may be a transition period between each activity, they are not required to be contiguous.\n\nIf I'm interested in analyzing what happened during transition periods, I can create an HKWorkoutActivity for each transition with the type transition.\n\nAll of these activities will be saved with the HKWorkout object under the workoutActivities property.\n\nIf you're using HKWorkoutBuilder to add workouts to HealthKit, adding an activity is as easy as creating an HKWorkoutActivity object with a workoutConfiguration, start and end date, and an optional metadata.\n\nAnd then, you simply call addWorkoutActivity on the workout builder.\n\nOn Apple Watch, you can use a workout session to track a swim-bike-run workout, and the associated workout builder to save the workout in HealthKit.\n\nLet's go back to my workout timeline.\n\nTo track this workout on Apple Watch, I need to set up a workout session and builder.\n\nI start by creating a workout configuration with the type swimBikeRun.\n\nThen I create an HKWorkoutSession using my configuration.\n\nAt the beginning of the workout I simply call startActivity on the session, and beginCollection on the associated workout builder.\n\nNow that my session and builder are ready, I can add my first activity using the beginNewActivity method with a swimming workout configuration and a start date.\n\nAt the beginning of each activity, you should make sure to update the workout builder data source to only collect the data types you're interested in.\n\nBecause this is a swimming activity, I want swimming distance to be collected.\n\nAt the end of the activity, I call endCurrentActivity with the end date.\n\nBecause I'm interested in analyzing the transition period from swimming to cycling, I will start a new transition activity immediately after swimming has ended.\n\nAgain, because this is the beginning of an activity, I update the builder data source to disable the collection of swimming distance, since it's no longer relevant.\n\nI end the transition activity right before cycling begins.\n\nI can track the remaining activities of my workout the same way.\n\nAt the end of the workout, ending the session will also end any running activity.\n\nThen I can finish the workout builder, which will save and return an HKWorkout object.\n\nI can use the returned workout to read some of the associated metrics such as totalEnergyBurned and totalDistance, and display a summary of the workout in my app.\n\nHowever, this small set of properties is no longer sufficient.\n\ntotalSwimmingStrokeCount is not relevant to all workouts, and some workouts may collect more metrics.\n\nIn order to make it easier to read metrics for all kinds of workouts, we are deprecating these properties in favor of a new method which returns statistics for a given quantity type.\n\nAs a reminder, this method is also available on HKWorkoutActivity, allowing you to focus on just what happened during an activity.\n\nThese statistics will be automatically computed from any samples collected with the workout, only when using HKWorkoutBuilder or HKLiveWorkoutBuilder.\n\nAlong with this richer workout representation, we also have a new set of predicates to help you query for only the workouts you're interested in when driving your analysis or visualization.\n\nTo give you an example, here's a list of my recent workouts with the average heart rate for each activity.\n\nI would like to find my workouts with high-intensity activities where my average heart rate was above 150.\n\nFirst, I start by creating a predicate using the new predicateForWorkoutActivities method, which will act on workout activities.\n\nI want the average heart rate to be greater than 150 beats per minute.\n\nNext, because I want to query for workouts, I wrap my heart rate predicate inside a workout predicate.\n\nThen, I create a query using that predicate.\n\nAnd I call the result(for: healthStore) method of my query descriptor to get the list of workouts that match my predicate.\n\nAnd that's how I'm able to query for just the workouts I'm interested in.\n\nOne of my recent workouts consisted of four running intervals.\n\nUsing HKWorkoutActivity is a great way to capture these intervals.\n\nYou just need to make sure that all activities of an interval workout have the same activity type as the workout.\n\nSo for a running workout, all activities are configured with the .running type.\n\nOne benefit of using workout activities to track intervals is you can get statistics for each interval.\n\nWith these updates, workouts now include a more comprehensive picture of their activities and the context surrounding them.\n\nIn order to provide an even richer picture, we're introducing new running metrics that will be automatically collected on Apple Watch Series 6, SE, and newer -- metrics such as running stride length, or power in watts.\n\nFor swimming workouts, we're adding the SWOLF score.\n\nIt's defined as the number of strokes taken in a given length, and the time it took to swim that length.\n\nThis score will be calculated for each lap event and segment event for swimming workouts recorded on Apple Watch.\n\nWhile these metrics enrich your workouts and allow you to get a better understanding of how you performed, another important metric that is recorded after a workout has ended is heart rate recovery.\n\nIt's an estimate of how quickly your heart rate lowers after exercise, and it can be used to understand how the heart recovers after stress, and reveal potential health problems.\n\nWith iOS 16, we are introducing a new Cardio Recovery data type.\n\nIt will be accessible from the Health app, and your apps will be able to read and save this data in HealthKit.\n\nHeart rate recovery is a quantity type with the identifier .heartRateRecoveryOneMinute.\n\nAdditional context information about each heart rate recovery sample can be added as metadata.\n\nIn my recent swim-bike-run workout, I pushed myself to my limits, and then observed my heart rate's recovery rate.\n\nIt took me about three and a half hours to complete the workout.\n\nI reached a maximum heart rate of 184 beats per minute when I was running.\n\nAnd the minute following the workout, my heart rate dropped by 50 beats.\n\nWhen using HKLiveWorkoutBuilder on Apple Watch, a heart rate recovery sample, along with its surrounding context, is automatically saved in HealthKit after a workout.\n\nOtherwise, to save a heart rate recovery sample, I create a quantity sample with the .heartRateRecoveryOneMinute type.\n\nMy heart rate dropped by 50 beats the minute following the workout, so I set that as the quantity of my sample.\n\nI also set a start and end date for the sample.\n\nThen, I put the additional context information in the metadata dictionary, starting with the recovery test type.\n\nBecause my workout was an all-out effort, the test type is .maxExercise.\n\nMy workout was a swimBikeRun, so I set that as the activity type.\n\nI can also add the workout duration using the HeartRateRecoveryActivity Duration key.\n\nFinally, I add the maximum heart rate observed during the workout, which was 184 beats per minute.\n\nWith these updates, it is now easier than ever to track swim-bike-run, and interval workouts.\n\nIn addition, the introduction of new metrics provides a more comprehensive picture for your workouts and newer ways to evaluate progress over time.\n\nWhile activity and fitness is something that impacts everyone there are other aspects of health that touch on many of us, such as vision.\n\nIn fact, according to the Vision Council of America, approximately 75 percent of adults in the United States rely on vision correction with prescription glasses or contact lenses.\n\nThese prescriptions, however, are easy to lose, and it's one more thing you need to have with you when ordering prescription glasses or contact lenses.\n\nSo let's put them in our phones.\n\nStarting with iOS 16, your apps can now save glasses and contacts prescriptions in HealthKit.\n\nA vision prescription is a sample with the visionPrescriptionType.\n\nThe sample's start date corresponds to the prescription's issue date, while the end date corresponds to the expiration date.\n\nOptionally, a digital copy of the physical prescription can be attached to the sample.\n\nA glasses or contacts prescription sample is a subclass of HKVisionPrescription.\n\nFor glasses, you use the HKGlassesPrescription subclass, and for contacts, the HKContactsPrescription subclass.\n\nEach glasses prescription is created using two glasses lens specification objects; one for each eye.\n\nAnd similarly, contacts prescriptions are created with two contacts lens specification objects.\n\nNow, let's save my reading glasses prescription to HealthKit.\n\nThe first step is to create an HKGlassesLensSpecification for each eye.\n\nSome parameters, such as vertex distance and prism, are optional.\n\nI can create the right eye lens specification the same way.\n\nNext, I create a glasses prescription sample with my right eye and left eye lens specifications.\n\nThis prescription is for my reading glasses, so I'm adding that in the description.\n\nThen, I just call save on the healthStore with my prescription.\n\nAnd with that, my prescription is now saved in HealthKit.\n\nI also took a picture of it, which I'd like to attach to the sample I just saved.\n\nA file attachment is represented by an HKAttachment object.\n\nYou use HKAttachmentStore to save and read file attachments.\n\nOnly static images or PDF files can be attached to prescriptions.\n\nTo attach the picture I took to my prescription sample, I start by creating an HKAttachmentStore object using a healthStore.\n\nThen I call addAttachment(to:) with my prescription sample.\n\nI set a name for the attachment.\n\nHere, I'm attaching a PNG file.\n\nAnd finally, pass the URL of the file.\n\nThe prescription I just attached contains a lot more information than just the lens specification -- sensitive information, like my full name and date of birth.\n\nOne of HealthKit's core principles is to protect your privacy and make sure that you are always in control of the data you share.\n\nBecause it can be easy to share more data than intended with prescriptions that include an attachment, we are introducing a new authorization model for prescriptions.\n\nRead authorization is granted for each prescription object separately.\n\nUsers can select exactly which prescriptions they grant your app access to, and update their selection at any time.\n\nWe have a new API for requesting authorization for vision prescription objects.\n\nJust like other data types, you can use queries to read prescriptions that your app has access to.\n\nIf you're only interested in certain prescriptions, you can use a predicate.\n\nTo request authorization, simply call the requestPerObjectRead Authorization method of the healthStore with the visionType.\n\nDoing so will always display an authorization prompt in your app with a list of all the prescriptions that match your predicate.\n\nMake sure you're asking for authorization in the appropriate context to ensure the best user experience.\n\nThese are just some of the new things we added to HealthKit to empower your apps to provide better health and fitness experiences.\n\nWe can't wait to see what you will build next.\n\nHave a great WWDC, and if you have any questions, we'll be happy to help you in the Developer Forums.\n\n♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "HealthKit",
        "url": "https://developer.apple.com/documentation/HealthKit"
      },
      {
        "title": "Human Interface Guidelines: HealthKit",
        "url": "https://developer.apple.com/design/human-interface-guidelines/healthkit/overview/"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10005/4/55C7CDFC-2E36-4AC0-8E77-7327EBD9E0E9/downloads/wwdc2022-10005_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10005/4/55C7CDFC-2E36-4AC0-8E77-7327EBD9E0E9/downloads/wwdc2022-10005_sd.mp4?dl=1"
  },
  "extractedAt": "2025-07-18T10:37:50.691Z"
}