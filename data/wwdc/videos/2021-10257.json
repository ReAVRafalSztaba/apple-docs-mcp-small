{
  "id": "10257",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10257/",
  "title": "Meet ClassKit for file-based apps",
  "speakers": [],
  "duration": "",
  "topics": [
    "Business & Education"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Marin Eubanks: Hi, everyone.\n\nI’m Marin, an engineer on the ClassKit team, and I’m excited to show you a new API we’ve added to ClassKit for file-based apps.\n\nToday, I’ll go over Schoolwork and how it’s used with ClassKit.\n\nThen, I’ll do an in-depth review of the new API for file-based apps.\n\nNext, I’ll walk you through a sample implementation.\n\nAnd finally, I’ll show you how to test the new API using ClassKit’s developer mode.\n\nLet me start by giving you a brief overview of Schoolwork.\n\nSchoolwork is an educational app that enables teachers to share assignments in which students use your apps to learn.\n\nWhen your app adopts the ClassKit framework and advertises assignable content -- known as CLSContexts -- as well as starts reporting progress data on activities, teachers will be able to assign that content and view the progress data reported by your app.\n\nIf your app is ClassKit-enabled, teachers will be more likely to use your app in their curriculum.\n\nAnd coming soon, Schoolwork will be even easier to use and adds many new features to streamline teacher workflows, inform instruction, and provide data from your apps to teachers.\n\nNow that we’re familiar with Schoolwork, let’s see how the data from your app flows into Schoolwork.\n\nYour app submits data to the ClassKit framework.\n\nClassKit surfaces that data to the Schoolwork app.\n\nThe data is then presented to the student and teacher.\n\nHere is a view of Schoolwork with a few assignments of ClassKit-enabled apps.\n\nIf we tap on one of the assignments, we can see an example of an app which has adopted ClassKit and reported student-progress data.\n\nWe will go through the details of this use case a bit later.\n\nNow that we have reviewed Schoolwork, let’s talk about our new file-based progress API.\n\nThere are more than 190,000 education apps in the App Store.\n\nAnd while a lot of you have adopted ClassKit’s context-based APIs, not all of you have.\n\nWe received feedback specifically around apps that interact with files and how you wanted to adopt ClassKit but contexts didn’t quite fit your use case.\n\nWell, if you’ve been holding out on ClassKit adoption because your app is file-based, we added a new API just for you.\n\nThis new API is for any app that interacts with files.\n\nIf you have an app that can edit files or just open and view a file, then you’ll love our new API for file-based apps.\n\nAdopting this new API enables reporting student progress data on the files used within your app when they are assigned in Schoolwork.\n\nWhen a teacher assigns content from a ClassKit-enabled app, they will be provided additional insights, which is a win for them and a great new use case for your app.\n\nOne important thing to note is that your app must adopt Open in Place.\n\nWhen your app supports Open in Place, the exact file shared between the student and teacher will open in your app and not a copy.\n\nHere's the new API for adding progress data to a file.\n\nIt’s called fetchActivity, and it lives on CLSDataStore.\n\nI have both the async and async alternative versions of this API shown here.\n\nYou’ll pass in the file URL of your file to this API, and it returns a CLSActivity.\n\nOnce you have the CLSActivity, you can add progress data to it.\n\nNow, let’s take a look at the types of progress data your app can submit.\n\nIf you’ve already adopted ClassKit, then this will be a review of the current progress data types we have available.\n\nIf you’re new to ClassKit, these classes are currently being used on CLSContexts, but the same data types can also be applied to files.\n\nHere we have a CLSActivity.\n\nThis is a class used to encapsulate all of the progress data associated with a particular file.\n\nWe have a few types of data that can be added to a CLSActivity.\n\nFirst we have duration.\n\nThis is the amount of time a student spent working the assigned file.\n\nTime should be reported on all file types.\n\nTo use this API, you simply call the start and stop methods that live on CLSActivity.\n\nNext we have progress.\n\nThis is some value between zero and one.\n\nProgress is typically used when you can determine a student's progression through a file.\n\nFor example, let’s say you have an audio or a video file, and the student got 50 percent of the way through.\n\nYou would report the playback progress as .5.\n\nTo add progress, you can either set the progress property directly or add a range from some start to an end.\n\nYou can add overlapping ranges or the same range multiple times.\n\nWe’ll handle the logic to make sure the correct progress is reported to students and teachers.\n\nWe also have the primaryActivityItem which is useful if you have a file that can be edited.\n\nSetting the primaryActivityItem indicates that, this piece of data, you want to highlight to students and teachers, and it shows up in the main part of the UI in the Schoolwork app.\n\nThere's also an additionalActivityItems property.\n\nThis is an array of CLSActivityItems which is useful for adding additional metadata.\n\nTo add a primaryActivityItem, set the primaryActivityItem property on CLSActivity.\n\nTo add an additionalActivityItem, call the addAdditionalActivityItem function on CLSActivity and pass in the activityItem you want to add.\n\nThe primaryActivityItem and additionalActivityItem properties hold a reference to one of our three subclasses of CLSActivityItem.\n\nYou can add any of the following subclasses: First, we have CLSBinaryItem.\n\nThis is used to represent any binary data type.\n\nAn example usage of this might be a question on a quiz.\n\nLet's say the student got it correct or incorrect.\n\nOr you can add CLSQuantityItem.\n\nThis is used for any generic numerical value.\n\nYou could use this for the number of pages, number of slides, or total word count on a document.\n\nAnd the last is CLSScoreItem.\n\nThis class is used for anything that be represented as a part out of a total.\n\nFor example, a score on a quiz; the user got eight out of ten.\n\nYou can add any combination of these subclasses to an activity, one of them, or all of them.\n\nNow that we know the types of data that we can add, let’s walk through a code sample of adopting this API into an app.\n\nHere I have a sample app that can open and edit a text file.\n\nWhen the student opens the text file, I'll start the timer.\n\nThe student will go through, edit the file.\n\nWhen the student is about to close the file, I’ll record the total word count and stop the timer.\n\nLet’s navigate to the part of my code that gets called when I open the file and the student starts interacting with it.\n\nI have an openFile function.\n\nThis is where I will start tracking time.\n\nIn your app, you’ll go to the part of the code that you already have for opening a file, and this is where you’ll add a little bit of code to start the timer.\n\nFirst, I’ll fetch the CLS activity for my file URL.\n\nOnce I have the activity, I will call start to start tracking time and then I will call save on CLSDataStore to commit the changes I’ve made.\n\nLet’s go ahead and add a breakpoint here that we’ll come back to later when testing our implementation.\n\nNow, I also want to stop the timer when the student is done and add a primaryActivityItem.\n\nSo let’s navigate to the part of my code that gets called when the student is about to close the file.\n\nHere I’ll call CLSDataStore.shared. fetchActivity, grab the primaryActivityItem to update it if it already exists, or create a new CLSQuantityItem if there wasn’t already one.\n\nOnce I have the CLSQuantityItem, I can update its value and set it as the primaryActivityItem on my activity.\n\nI can add progress to my activity.\n\nAnd last, call stop to stop the timer.\n\nThen, I make sure to call save.\n\nIf we don’t call save on CLSDataStore, then we will not persist any of the changes we just made.\n\nI’m going to add a breakpoint here as well.\n\nWe’ll use this to help us debug our submission of student progress data.\n\nNow that we’ve adopted the API into our sample app, let’s see how we can test our implementation using Schoolwork and developer mode.\n\nFirst, we need to set the ClassKit environment entitlement to development.\n\nThis is inside of Xcode.\n\nThe default value is production.\n\nWe’ll change the value of the entitlement to development so that we can test using developer mode and Schoolwork.\n\nThe next time we run our code, it will run in developer mode.\n\nIt’s important to make sure to set this back to production after you're done testing.\n\nNext, we need to turn on developer mode on our iPad.\n\nWe'll open the Settings app, navigate to Developer > ClassKit API.\n\nWe’ll select Teacher to change our role to a teacher in Schoolwork.\n\nNow, we will we open the Schoolwork app.\n\nWhen Schoolwork opens, we are presented with the teacher UI.\n\nAnd if we tap on the Create Assignment button in the top right-hand corner, we can create an assignment adding a file our app supports by tapping the Files button.\n\nThen we will select the file that we want to add, enter the class and the title of the assignment.\n\nYou can also optionally add any instructional text if you’d like.\n\nAnd then tap the button in the top right-hand corner to publish this assignment to the class.\n\nNow that we've created the assignment, we can switch our role to act as a student and test our implementation of submitting progress data.\n\nSo let's navigate back to the Settings app.\n\nIn Settings, we’ll select Developer > ClassKit API, and tap on Student.\n\nThis has now changed my role in Schoolwork to act as a student.\n\nWe'll go back to the Schoolwork app.\n\nI can see I am now logged in as a student because I no longer have the Create Assignment button in the top right-hand corner of my UI.\n\nIn the middle of the screen, I see the assignment we just created, and if I tap on it, I am shown the details of the assignment.\n\nI can tap on the file icon, and that will deep-link me into my app where I start reporting progress data.\n\nThe file opens up in my app, and my code gets called to start the timer.\n\nHere we can see our breakpoint get hit after calling save to start the timer.\n\nAnd if we hit Play and then go back to our app, I see the Student Progress banner drop down from the top, which is an indication that the save was successful and the timer was started.\n\nThen I'll go through, add a bunch of text to complete the essay.\n\nMy sample app has a Done button the student will tap when they are done editing the file.\n\nSo I’ll tap that Done button in the top left-hand corner.\n\nAt this point, my closeFile function will get called.\n\nWe can see our second breakpoint was hit for saving the wordCount as the primaryActivityItem and stopping the timer.\n\nThen, we can hit Play and go back to Schoolwork.\n\nIn Schoolwork, I can see the progress data submitted by my app.\n\nFirst, I see the time as 41 minutes.\n\nThis validates that I'm calling start, stop, and save correctly.\n\nNext, I see the word count, which I set as the primaryActivityItem.\n\nAny CLSActivityItem subclass I set as the primaryActivityItem will show up here in the main part of the UI.\n\nThe fact that I can see my word count as 558 words validates that my submission of CLSQuantityItem is working correctly.\n\nNow, let’s switch our role back to a teacher and see how the data submitted by my app appears to teachers.\n\nIn the center of the screen, we see I have the average time and average word count for all students.\n\nBelow that is a row for every student on the assignment.\n\nIn the Student cell, I see the data that one student submitted.\n\nAnd if I tap on the Student cell, I can see the progress data reported by my app.\n\nWe have the primaryActivityItem, time, and one additionalActivityItem which is listed as Readability Grade Level.\n\nAnd that is how you use developer mode to test your ClassKit integration.\n\nDon’t forget to set the entitlement back to production.\n\nWell, great! We covered a lot today, from the new API to testing it with developer mode.\n\nEven if you don’t consider your app for education, there’s a good chance an educator does, and having it ClassKit-enabled means your app will be ready for them to integrate right into their curriculum.\n\nSo make sure to adopt our API.\n\nAnd thank you.\n\nThank you for the feedback reports, and please submit any other feedback that you may have.\n\nWe love hearing from you.\n\nAnd if you are interested in learning more about our context-based APIs, take a look at our previous sessions on \"What’s new in ClassKit\" and our talk \"Introducing ClassKit\" from 2018.\n\nThanks, and have a great WWDC! ♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "7:25",
      "title": "openFile()",
      "language": "swift",
      "code": "func openFile() async throws {\n     // Your existing code for opening a file goes here.\n     let activity = await try CLSDataStore.shared.fetchActivity(for: fileURL)\n     activity.start()\n     await try CLSDataStore.shared.save()\n}"
    },
    {
      "timestamp": "8:07",
      "title": "closeFile()",
      "language": "swift",
      "code": "func closeFile() async throws {\n     let activity = await try CLSDataStore.shared.fetchActivity(for: fileURL)\n     let wordCount = activity.primaryActivityItem as? CLSQuantityItem ??\n         CLSQuantityItem(identifier: \"total_word_count\", title: \"Word Count\")\n     wordCount.quantity = currentDocumentWordCount()\n     activity.primaryActivityItem = wordCount\n     activity.progress = progress()\n     activity.stop()\n     await try CLSDataStore.shared.save()\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "ClassKit",
        "url": "https://developer.apple.com/documentation/ClassKit"
      },
      {
        "title": "fetchActivity(for:completion:)",
        "url": "https://developer.apple.com/documentation/ClassKit/CLSDataStore/fetchActivity(for:completion:)"
      },
      {
        "title": "Incorporating ClassKit into an Educational App",
        "url": "https://developer.apple.com/documentation/ClassKit/incorporating-classkit-into-an-educational-app"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10257/6/1A9F8965-41D7-4A10-A0B1-36FE84E977EE/downloads/wwdc2021-10257_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10257/6/1A9F8965-41D7-4A10-A0B1-36FE84E977EE/downloads/wwdc2021-10257_sd.mp4?dl=1"
  },
  "extractedAt": "2025-07-18T09:27:16.091Z"
}