{
  "id": "10100",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10100/",
  "title": "Create enhanced spatial computing experiences with ARKit",
  "speakers": [],
  "duration": "",
  "topics": [
    "Spatial Computing"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hi, my name is Divyesh. In this session, you’ll learn about some exciting updates coming to ARKit on visionOS. Last year, we introduced ARKit as the host of core, real-time algorithms that power the entire operating system. We’re amazed by the phenomenal spatial experiences you’ve built using ARKit’s tracking and scene understanding capabilities. Blackbox, for instance, leverages ARKit to detect hand gestures needed to solve engaging puzzles.\n\nSuper Fruit Ninja also uses hand tracking for slicing through fruits, and scene understanding features for having the remnants splash onto the floor in a realistic way.\n\nWith your feedback, we spent the past year developing several new features to help your apps further understand and engage with your surroundings. Let’s go over some of the advancements we’ve made. I’ll begin with some improvements in scene understanding. We have a new room tracking feature. And an update to plane detection, which can help you customize experiences based on the room you’re in. I’ll also tell you about the new object tracking capability, which can help you create interactive visualizations for real-world items. Afterwards, I’ll explain how ARKit’s world tracking has become more robust for various lighting conditions. Finally, I’ll go over ways your app can benefit from our latest improvements in hand tracking. Before diving in, let’s start with a quick review of ARKit on visionOS.\n\nTo recap, when your visionOS app presents a Full Space, it can receive data from ARKit in the form of Anchors.\n\nAnchors represent a position and orientation in three-dimensional space. For example, plane detection data is delivered in the form of PlaneAnchors, which hold information about surfaces detected in the real world.\n\nARKit will deliver Anchors to your app through Data Providers. A Data Provider is the interface for configuring an individual ARKit feature, and receiving its data. The PlaneDetectionProvider is the interface for receiving PlaneAnchors.\n\nYou can run an ARKitSession by supplying a set of Data Providers that you want to use together in your experience. If you’re new to ARKit’s APIs or would like more context, I highly recommend watching last year’s session, \"Meet ARKit for spatial computing\" With that, let’s get into our first new feature, room tracking.\n\nMany apps on visionOS are set within the room a person is in. With mesh and plane anchor data, you can already augment the setting with realistically placed virtual content.\n\nNow, you can take your engagement to a whole new level. Imagine having a virtual pet greet you when you walk into your bedroom. Room tracking makes it possible to tailor unique experiences like this, for each space that you visit.\n\nAs you look around, ARKit can identify the boundaries of the room that you’re currently in. It uses this information to compute precisely-aligned geometries of the detected walls and floor. Furthermore, ARKit can recognize transitions between rooms. When you enter a new area, it will switch to delivering data for the space that you now occupy. This can help your app exhibit different experiences based on the room that you’re in.\n\nAll this information gets surfaced through the new Room Tracking data provider, which requires world sensing authorization.\n\nThe RoomTrackingProvider can tell you about the rooms that have been visited.\n\nThis interface lets you access the current room’s anchor, if ARKit determines that you’re in a confined space. You can use the current room anchor to shape your experience according to this interior’s layout.\n\nYour app can also listen for asynchronous room tracking updates, similar to how you would receive anchors from our other data providers. This is a good way to receive the latest information about the space you’re currently in, especially as you transition between rooms Note that the RoomTrackingProvider only updates anchor data for the room that you’re currently in. Let’s look at what’s delivered. Each RoomAnchor holds spatial information about a specific, confined space.\n\nThis anchor can indicate whether it models the current room or not. This is useful when you want certain content to only appear in the space that you’re presently in.\n\nEach RoomAnchor also holds the geometry of the surrounding walls and floor. It’s comprised of a collection of vertices, edges, and triangular faces that define the shape of a room. Note that this mesh is more aligned with the room’s boundaries, compared to the geometries you’d find in mesh and plane anchors.\n\nYou can also choose to get the mesh as an array of disjoint geometries, one for each complete wall or floor. These can be useful for occluding virtual content that’s placed outside of your room, or for augmentations like opening a virtual portal along an entire wall.\n\nYou can also test whether a given three-dimensional point exists within the room’s boundaries. When used with world tracking, you can create magical experiences where virtual objects come to life when you enter a certain room.\n\nLastly, this new Anchor offers the room’s associated plane and mesh anchor IDs. These can help you optimize your app when combined with other scene understanding features. For example, you may want to avoid performing expensive operations for planes and meshes that exist outside the current room.\n\nThese are just a few ways to elevate your app with room tracking. We’re excited to see you do even more! Next, let’s talk about an update to plane detection. As ARKit detects planar surfaces in your surroundings, it can give you information about them in the form of PlaneAnchors. These are useful for placing virtual content around surfaces like placing a board game on a table, or a virtual poster on a wall.\n\nThe PlaneDetectionProvider can inform your app of detected horizontal surfaces, and vertical surfaces.\n\nThis year, we’re introducing a new Slanted plane alignment, used for detecting angled surfaces.\n\nYour app will continue to receive horizontally and vertically aligned plane anchors, without any changes. If you’d like to also get Slanted plane anchors, we’ve made it easy for you to do so with just one change. All you’ll need to do is update the alignments you configure your PlaneDetectionProvider with.\n\nSimply include the new Slanted alignment. It’s that easy! Now, let’s take a look at object tracking, which is new to visionOS.\n\nARKit can now track real-world objects that are statically placed in your environment. With object tracking, you can get the position and orientation of each of these items, to anchor virtual content to them. For example, an educational app can exhibit 3D visualizations while a person observes certain instruments.\n\nTo have ARKit track these items for you, you’ll need to supply a set of ReferenceObjects. Reference objects encode spatial features of known, real-world items. To make a ReferenceObject, you’ll first need a 3D model of the item you want to track, in a USDZ format.\n\nThen, you can use CreateML’s new spatial object tracking feature in order to generate a ReferenceObject from your asset.\n\nFinally, you can use the ReferenceObject to track with ARKit.\n\nTo learn more about creating a ReferenceObject, be sure to check out this year’s session, \"Explore object tracking for visionOS\".\n\nFor this session, we’ll focus on the last step of tracking a physical item with ARKit, after a ReferenceObject is made.\n\nLet’s look at how simple this is with the new API.\n\nA ReferenceObject can be loaded at runtime either with a file URL, or from a Bundle.\n\nHere, we load a globe ReferenceObject with its URL.\n\nAfter successfully loading the reference object, we can configure a new ObjectTrackingProvider with it.\n\nNext, we can run the new ObjectTrackingProvider on an ARKitSession.\n\nAfter the data provider enters a running state, we can start processing incoming tracking results.\n\nThese tracking results will be delivered in the form of ObjectAnchors, with each representing a tracked item.\n\nThe ObjectAnchor holds an axis-aligned bounding box of the detected object. You can get the center and extent of the bounding box, as well as its minimum and maximum 3D coordinate points.\n\nThis anchor also holds its corresponding ReferenceObject. You can access the underlying USDZ file path from it, if the ReferenceObject included one.\n\nYou can listen for ObjectAnchor updates similar to how you would with our other data providers.\n\nThe latest tracking updates can then be used to supplement your objects with sensational virtual content. For example, you can add an orbiting body to the globe with realistic shadows, and even peek into the core! We’re also publishing some sample apps that you can download and try out on your device. Be sure to check them out later, for more detailed information. Now, I’ll share some improvements to world tracking, which is a foundational part of this platform. ARKit relies on a variety of cameras and sensors to run sophisticated algorithms, like world tracking.\n\nIf a person’s physical location has insufficient lighting, it can affect sensor data, and possibly cause algorithms to not operate seamlessly. For example, being in a dark, unlit room may affect the quality of world tracking in your experience.\n\nThis year, we’ve added a mechanism for reacting to such changes in lighting. If the system detects that tracking is limited due to low light conditions or other physical factors, it will only track changes to its orientation, but not its position in space.\n\nYour app will already benefit from orientation-based tracking at a system level. This means that you won’t have to worry about complete tracking loss due to lighting, if you’re ever in a challenging environment.\n\nIf you’d like to be well-prepared for these scenarios, we’re offering APIs that can inform you about these changes in tracking, so that you can adjust your experience accordingly. For example, you may want to gracefully rearrange content you’ve placed, while their anchored positions are not updated. If your app is truly dependent on full world tracking, you may want to ask the person to move towards a brighter environment to resume the experience.\n\nIf you’re using SwiftUI, this indication is available through the new \"world tracking limitations\" environment value.\n\nAs an example, you can listen for changes to this value, in order to rearrange content when positional tracking is unavailable.\n\nIf you’re using ARKit, we’ve expanded the DeviceAnchor to now hold a “.trackingState” property which indicates whether tracking is fully functional, or limited to only orientation-based tracking. If the system switches to orientation-based tracking, your existing world anchors may be marked as “not tracked.” When world tracking recovers, the tracked status of your persisted anchors will be restored.\n\nLastly, I’ll cover some advancements in hand tracking, which is a primary means of input on this platform.\n\nWith the introduction of visionOS, we added the ability to track a person’s hands and fingers. Your app can use this information to detect gestures, and anchor virtual content to your hands.\n\nLast year, we established two avenues for getting this information in the form of HandAnchors. You can either poll the HandTrackingProvider for the latest updates, or you can asynchronously receive HandAnchors as they become available. We’re delighted to share that the HandTrackingProvider will now deliver this data at display rate! Asynchronous HandAnchor updates have some latency, but they’ll be smoother with the increased, display-aligned frequency that they’re delivered at. This effect will be especially perceivable while wearing Apple Vision Pro. If you want hand tracking results with minimal delay, ARKit can now predict HandAnchors that are expected to exist at a given time in the near future. Whether your app renders with Compositor Services or RealityKit, you can leverage the new hands prediction API to get tracking results faster.\n\nLet’s look at an example. If you’re using Compositor Services, you should target the \"trackable anchor time\", which is new to visionOS. Predicting HandAnchors at this timestamp will help you achieve the best content registration.\n\nYou can convert that timestamp into seconds, and give it to ARKit to make a sophisticated forward prediction.\n\nHere’s an app that uses Compositor Services to render a virtual teapot. By using predicted HandAnchors, the anchored teapot remains fixed to the hand, even as it moves around. Note that because this is a low-latency prediction, it may come at the expense of some accuracy. For more details about rendering using Compositor Services, I recommend watching this year’s session, \"Render Metal with passthrough in visionOS\".\n\nYou may also want to revisit the examples shown in last year’s session, \"Meet ARKit for spatial computing\".\n\nBoth of these hand tracking improvements have advantages for different use cases. Display-aligned HandAnchor updates are great for gesture detection and drawing smooth strokes in experiences where latency isn’t critical. Hand predictions are useful when you want content as attached to your hand as possible, while fluidity isn’t so important.\n\nWe’ve also surfaced these advancements on the RealityKit side, for hand AnchorEntities.\n\nIf you’re using RealityKit to attach content near your hands, you can choose between \"continuous\" or \"predicted\" hand tracking, depending on your needs.\n\nFor a detailed example, watch the new session, \"Build a spatial drawing app with RealityKit\". And that’s what’s new in ARKit this year. To summarize, I covered our latest improvements which can help you elevate your spatial computing experiences.\n\nYou also learned about the new room tracking and object tracking capabilities, which allow you to take your creativity even further.\n\nAnd we have many more remarkable sessions for you to explore the new visionOS.\n\nMy entire team and I are so excited to see the wonderful things you’ll make, with the newest ARKit! Thanks for watching!",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "3:35",
      "title": "RoomTrackingProvider",
      "language": "swift",
      "code": "// RoomTrackingProvider\n\n@available(visionOS, introduced: 2.0)\npublic final class RoomTrackingProvider: DataProvider, Sendable {\n\n    /// The room which a person is currently in, if any.\n    public var currentRoomAnchor: RoomAnchor? { get }\n\n    /// An async sequence of all anchor updates.\n    public var anchorUpdates: AnchorUpdateSequence<RoomAnchor> { get }\n\n    ...\n}"
    },
    {
      "timestamp": "4:20",
      "title": "RoomAnchor",
      "language": "swift",
      "code": "@available(visionOS, introduced: 2.0)\npublic struct RoomAnchor: Anchor, Sendable, Equatable {\n    /// True if this is the room which a person is currently in.\n    public var isCurrentRoom: Bool { get }\n\n    /// Get the geometry of the mesh in the anchor's coordinate system.\n    public var geometry: MeshAnchor.Geometry { get }\n    /// Get disjoint mesh geometries of a given classification.\n    public func geometries(of classification: MeshAnchor.MeshClassification) -> \n        [MeshAnchor.Geometry]\n\n    /// True if this room contains the given point.\n    public func contains(_ point: SIMD3<Float>) -> Bool\n   \n    /// Get the IDs of the plane anchors associated with this room.\n    public var planeAnchorIDs: [UUID] { get }\n    /// Get the IDs of the mesh anchors associated with this room.\n    public var meshAnchorIDs: [UUID] { get }\n}"
    },
    {
      "timestamp": "8:06",
      "title": "Load Object Tracking referenceobject",
      "language": "swift",
      "code": "// Object tracking\n\nTask {\n    do {\n        let url = URL(fileURLWithPath: \"/path/to/globe.referenceobject\")\n        let referenceObject = try await ReferenceObject(from: url)\n        let objectTracking = ObjectTrackingProvider(referenceObjects: [referenceObject])\n    } catch {\n        // Handle reference object loading error.\n    }\n    ...\n}"
    },
    {
      "timestamp": "8:27",
      "title": "Run ARKitSession with ObjectTracking provider",
      "language": "swift",
      "code": "let session = ARKitSession()\n\nTask {\n    do {\n        try await session.run([objectTracking])\n    } catch {\n        // Handle session run error.\n    }\n    \n    for await event in session.events {\n        switch event {\n        case .dataProviderStateChanged(_, newState: let newState, _):\n            if newState == .running {\n                // Ready to start processing anchor updates.\n            }\n        ...\n        }\n    }\n}"
    },
    {
      "timestamp": "8:43",
      "title": "ObjectAnchor",
      "language": "swift",
      "code": "// ObjectAnchor\n\n@available(visionOS, introduced: 2.0)\npublic struct ObjectAnchor: TrackableAnchor, Sendable, Equatable {\n\n    /// An axis-aligned bounding box.\n    public struct AxisAlignedBoundingBox: Sendable, Equatable {\n        ...\n    }\n\n    /// The bounding box of this anchor.\n    public var boundingBox: AxisAlignedBoundingBox { get }\n\n    /// The reference object which this anchor corresponds to.\n    public var referenceObject: ReferenceObject { get }\n}"
    },
    {
      "timestamp": "11:03",
      "title": "World Tracking - reacting to changes in lighting conditions",
      "language": "swift",
      "code": "struct WellPreparedView: View {\n    @Environment(\\.worldTrackingLimitations) var worldTrackingLimitations\n    \n    var body: some View {\n        ...\n \n        .onChange(of: worldTrackingLimitations) {\n            if worldTrackingLimitations.contains(.translation) {\n                // Rearrange content when anchored positions are unavailable.\n            }\n        }\n    }\n}"
    },
    {
      "timestamp": "12:51",
      "title": "Hands prediction",
      "language": "swift",
      "code": "// Hands prediction\n\nfunc submitFrame(_ frame: LayerRenderer.Frame) {\n    ...\n\n    guard let drawable = frame.queryDrawable() else { return }\n\n    // Get the trackable anchor time to target.\n    let trackableAnchorTime = drawable.frameTiming.trackableAnchorTime\n\n    // Convert the timestamp into units of seconds.\nlet anchorPredictionTime = LayerRenderer.Clock.Instant.epoch.duration(to:     trackableAnchorTime).timeInterval  \n\n    // Predict hand anchors for the time that provides best content registration.\n    let (leftHand, rightHand) = handTracking.handAnchors(at: anchorPredictionTime)\n    \n    ...\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Building local experiences with room tracking",
        "url": "https://developer.apple.com/documentation/arkit/building_local_experiences_with_room_tracking"
      },
      {
        "title": "Forum: Spatial Computing",
        "url": "https://developer.apple.com/forums/topics/spatial-computing?cid=vf-a-0010"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10100/4/3F3285E6-7223-427A-A3AE-169CFB35EB37/downloads/wwdc2024-10100_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10100/4/3F3285E6-7223-427A-A3AE-169CFB35EB37/downloads/wwdc2024-10100_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10104",
      "year": "2024",
      "title": "Build a spatial drawing app with RealityKit",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10104"
    },
    {
      "id": "10101",
      "year": "2024",
      "title": "Explore object tracking for visionOS",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10101"
    },
    {
      "id": "10092",
      "year": "2024",
      "title": "Render Metal with passthrough in visionOS",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10092"
    },
    {
      "id": "10082",
      "year": "2023",
      "title": "Meet ARKit for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10082"
    }
  ],
  "extractedAt": "2025-07-18T10:45:22.878Z"
}