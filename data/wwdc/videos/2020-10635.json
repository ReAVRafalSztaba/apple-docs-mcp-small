{
  "id": "10635",
  "year": "2020",
  "url": "https://developer.apple.com/videos/play/wwdc2020/10635/",
  "title": "Accelerate your app with CarPlay",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello, and welcome to WWDC.\n\nGreetings, racing fans, and welcome to \"Accelerate Your App with CarPlay.\" I'm Jonathan Hersh from iOS Car Experience. Today, we're going to add an amazing car experience to your apps with CarPlay. Buckle up, and away we go. If you've driven with CarPlay, you're probably familiar with some incredible third-party navigation apps, like Waze and Google Maps. These navigation apps built their CarPlay experience with the CarPlay framework, a set of APIs first introduced in iOS 12. The CarPlay framework provides several types of template objects, which your app can configure to build an amazing CarPlay experience. But until now, CarPlay templates have only been available to navigation apps.\n\nToday, we are thrilled to announce a brand-new set of CarPlay templates, plus some amazing improvements to existing templates, that together make CarPlay available to a whole new set of apps for the first time in iOS 14.\n\niOS 14 introduces several new templates for audio apps. Apple Books has created an amazing new CarPlay experience for your audiobooks in iOS 14 with these new audio templates. If you've built a CarPlay audio app before, you're probably familiar with the playable content API. In iOS 14, playable content will be deprecated. Audio templates open up a whole new world of possibilities for your audio apps.\n\nWe're introducing new templates for communication apps, like messaging and calling apps.\n\nWe have new templates to drive your EV charging and parking apps.\n\nAnd we have new templates that support quick-service restaurants in CarPlay. We're going to take a scenic drive through all of these new templates in just a few minutes. But first, let's review some design principles that you should keep in mind while building your app in CarPlay. CarPlay is designed for the driver, not for passengers. Think about optimizing your app for tasks that make sense in the car.\n\nCarPlay apps are purposeful. Start with the most common scenarios in your app and distill them down to glanceable, streamlined interactions, each interaction being a task the driver can complete in just a few seconds.\n\nWhenever possible, reuse configuration from your app to minimize or eliminate any setup your user has to do in CarPlay.\n\nYour app's first-run experience should already be completed on-device before the user starts driving.\n\nAnd remember, your app may be launched first in CarPlay, and only in CarPlay. When the user taps your app on the CarPlay home screen, your app will connect to a car scene, not an iPhone scene.\n\nSo it's very important that you eliminate any logic in your app that depends on being launched on iPhone.\n\nThis is easy to do with UIScene, and in fact, your app must adopt UIScene to use the CarPlay framework, so you'll want to transition away from the legacy UIWindow and UIApplicationDelegate APIs.\n\nAnd with those design principles in mind, let's take a drive through new CarPlay templates for audio apps. And even if you're not developing an audio app, stay tuned, because your app can use some of these new templates too.\n\nI mentioned a minute ago that until now, if you were building an audio app for CarPlay, you would implement the playable content API. Playable content is a metadata-based API. You describe your app's data, like albums and songs, and the system assembles a tree-style UI on your behalf. Keep in mind that if you want to deploy your app to iOS 13 and earlier, playable content and audio templates can coexist in your app.\n\nOn iOS 13 and earlier, the system will launch your app with playable content. And in iOS 14, the system will launch with your CarPlay templates if you've provided them. So let's take a look at converting your playable content app's life cycle to CarPlay templates.\n\nNow, I mentioned earlier that you'll need to adopt UIScene to use CarPlay templates, and here you can see just how easy that is. A key part of adopting UIScene is declaring a Scene Manifest for your app. You can add this manifest to your app's Info.plist as a new top-level key.\n\nThis is a sample scene configuration for the CarPlay template application scene. You'll want to specify a scene configuration for your CarPlay scene, like this example, in addition to a scene configuration for your app on iPhone. If you're building a navigation app, you can also provide a scene configuration for the CarPlay dashboard.\n\nWe're also specifying the name of a class that serves as the scene delegate in your app for the CarPlay scene.\n\nHere, we're implementing the class that we specified in our scene configuration. This is the connect method from the CPTemplateApplicationSceneDelegate protocol in the CarPlay framework.\n\nThe CarPlay framework calls this connect method when your app has been launched on the CarPlay screen.\n\nFirst, you'll probably want to hold onto this CPInterfaceController object, because you'll need it later.\n\nAnd here, I'm setting a CPListTemplate as my app's root template, and it's just that easy. We now have a template on the car screen. And here, in the disconnect method, we can release the interface controller that we were holding.\n\nLet's look at the list template in a little bit more detail. We'll start by creating a list item. Each list item represents a single row in our list template. Here, I'm starting with just a title and subtitle in a list template with a single section.\n\nWhen the user selects your list item, the list item handler will be called. The handler receives two arguments. The first is the list item that was selected, and the second is a completion block.\n\nWhen a list item is selected, your app probably has some work to do. For example, you might initiate playback of the item that the user selected, or you might configure and present a new template. After you finish any work, you must call the completion block. But if you don't immediately call the completion block, that's okay.\n\nCarPlay will display a spinner to let the user know that your app is busy. When you call the completion block, that signals to CarPlay that you've finished processing the user's selection, and CarPlay will remove the spinner from your list item.\n\nAlso new in iOS 14, we've added support for dynamic list item updates. Many properties on CPListItem that were previously read-only are now writable. In this example, it might take my app some time to fetch an album artwork image over the network.\n\nUpdating my list item to show that image is as easy as assigning a value to the newly writable image property in the list item, and CarPlay will automatically reload only the affected rows in your list template. It's like magic. For example, Apple Podcasts uses these dynamic updates to keep the progress indicator updated with your listening progress. Let's now turn to another new template in iOS 14, the tab bar template. This is a new type of container template. It can display several of your app's templates in a tab-bar-style interface that's instantly familiar to CarPlay users.\n\nSo, let's make a tab bar template. We'll start by creating two tabs for the tab bar: one of them a list template and the other a grid template. Here's a list template to show some of my favorite albums. In iOS 14, every CarPlay template inherits some new properties to let you customize how that template appears in the tab bar.\n\nYou can set the tab's title, pick a system tab image, or provide your own custom tab image, and indicate whether the tab should show a badge.\n\nWe can create a tab bar template by providing an array of templates, and each template in the array becomes a tab on the tab bar.\n\nWe can also dynamically update the tab bar template. We can add new tabs, remove tabs, rearrange tabs, or in this example, we can show and hide the badge on one or more tabs.\n\nLet's turn now to some new additions in the list template for audio apps. Here, Apple Podcasts is using the new tab bar template plus some new list item customizations. You'll find a host of new properties available in CPListItem for audio apps, like the playback progress indicator and the Now Playing bouncing bars.\n\nAnd here, in iOS 14, Apple Books is using the new CPListImageRowItem, which brings this stunning artwork grid to your audiobooks in CarPlay.\n\nThe list image row item is available for your apps too. It's as easy as adding the list image row item to your list template.\n\nSo let's try out those new list items. Here, I'm creating an imageRowItem to show some recently played audiobooks in a grid of artwork.\n\nAnd just like the other list items, the image row item has a listItemHandler. It's called when the user selects the title in the image row item. So, in this example, I might push a new list template to show even more of the user's recent audiobooks.\n\nAnd just like in the other list items, make sure to call the completion handler after your app finishes any asynchronous work.\n\nEach artwork in the grid is individually selectable, so in addition to that title handler, we'll also specify a listImageRowHandler. In the image row handler, we can take some action in response to the specific audiobooks that the user selected. For example, we might start playback of that book. Let's turn now to the cornerstone of your audio app in CarPlay...\n\nthe nowPlayingTemplate. The Now Playing screen is instantly familiar to CarPlay users, and with templates, you have even more control over its appearance and behavior.\n\nYour app can optionally enable the \"Playing Next\" button and the \"Album Artist\" button. You may also optionally provide custom Now Playing buttons across the bottom of the Now Playing screen. Your Now Playing buttons can use your own custom images, or you can choose from several system-provided images that cover many common playback actions. The nowPlayingTemplate is unique among templates, and it has several special behaviors that you should keep in mind. First, the nowPlayingTemplate is a shared instance. There's only one instance of this template in your app. You should configure the properties of that shared instance, and, if you enable the optional \"Playing Next\" and \"Artist\" buttons, you should add at least one observer for those button actions.\n\nYou should perform that initial Now Playing configuration as soon as possible, immediately after your app launches in CarPlay. Why? Because the system may display the nowPlayingTemplate on your behalf. For example, when the user taps the Now Playing button on the CarPlay home screen, the system will launch your app and immediately present the shared nowPlayingTemplate.\n\nWhen your app becomes the Now Playing app, the system will also add the Now Playing bar button to your app's navigation bar or tab bar. If the user taps that button, the system will present the same shared nowPlayingTemplate. If a different app becomes the Now Playing app, the system will automatically remove the Now Playing bar button from your navigation bar or tab bar in CarPlay.\n\nLastly, only the list template may be pushed on top of the nowPlayingTemplate in the template stack. For example, if your app enables the \"Playing Next\" button in the nowPlayingTemplate, then pushing a new list template is a great way to show your user the upcoming playback queue.\n\nSo, let's revisit our template life cycle example from earlier. When your app is launched in CarPlay, you'll always want to configure the shared nowPlayingTemplate instance immediately, because the system may be launching your app just to show Now Playing, and when your app connects to the CarPlay scene, that's a great time to set up the shared nowPlayingTemplate.\n\nIn this example, I'm configuring a playback rate button that will call a handler when the user selects it.\n\nThis would also be an ideal place to enable the \"Playing Next\" button and add observers for the nowPlayingTemplate buttons. With that initial configuration done, your app is ready for the system to present Now Playing on your behalf, and you can always update the shared nowPlayingTemplate later. That was a quick look at some new CarPlay templates. We saw the new tab bar template, a foundational interface for all kinds of apps in CarPlay, plus the nowPlayingTemplate and other list-item updates for audio apps. Next up, my colleague, Allen, will take us on a drive through the other new CarPlay app categories.\n\nThanks, Jonathan. I'm Allen Langmaier from iOS Car Experience. Now that we've seen how improvements to existing templates will make current apps that much better, I'd like to introduce a whole new set of app categories for CarPlay.\n\nStarting in iOS 14, communication apps can take advantage of the CarPlay framework to provide an experience right on the car's display. And for the first time, EV charging, parking, and quick food ordering are brand new categories of apps that can now be brought to CarPlay. Communication apps are what were previously known in CarPlay as Messaging and VoIP calling apps that traditionally worked by leveraging SiriKit and CallKit. Communication apps must continue to use SiriKit and CallKit to provide voice and telephony features. But starting in iOS 14, they can also take advantage of the CarPlay framework to show contacts, organize message lists and display message status. Here's an example of a communication app that makes use of these new features of the CarPlay framework.\n\nThis app uses the new tab bar template, as we saw earlier, to intuitively allow the user to choose contacts and listen to messages.\n\nA common feature of communication apps is the ability to show a list of message threads. Starting in iOS 14, we are introducing a new list item subclass called CPMessageListItem that includes a number of useful properties to help create a rich user experience.\n\nFor this type of list template item, handlers are not called when tapped by the user. Instead, Siri will be automatically invoked using the parameters you specify in the message list item, and the user will continue a message compose, read, or reply flow through Siri.\n\nOn the leading side, you can choose to display an unread indicator, a pin, a star, or icon. Use some or all of these options to match the capabilities of your app.\n\nAnd the trailing end can be configured with a mute indicator, text and an optional image.\n\nAnd like other items, CPMessageListItem supports dynamic list updates, allowing you to easily change elements of a message just by updating its properties. Another important feature for communication apps is the ability to show contact information. The contact template is a brand new template in iOS 14 that will bring your address book to the foreground. In this example, the app has set up the contact template with an image, descriptive text, a set of action buttons, and navigation bar buttons.\n\nNote the template supports up to three lines of text and up to four buttons that can individually be configured with custom images and text. With all these new features available to communication apps, we can't wait to see the experiences you'll bring to the CarPlay screen. Now let's look at new app categories appearing for the first time in iOS 14: EV charging, parking, and quick food ordering. These type of apps have many things in common. They're all intimately involved with the driving experience, as they help find destinations on a map.\n\nAdditionally, these apps make it possible to check availability, reserve chargers or parking, and place orders.\n\nWe're excited to introduce a set of new templates in iOS 14 that enable your apps to provide these features in CarPlay.\n\nLet's start by looking at an example of a quick food ordering app. The app has four tabs across the top for nearby store locations, previous purchases, favorites, and order information.\n\nNotice that the app is streamlined, and everything is immediately actionable.\n\nThere is no detailed food menu, account management, or other settings. Focus your CarPlay experience on providing easy, one-step access to the most common tasks. Whether you are looking for a nearby drive-through, a charging station for your electric vehicle, or a nearby parking garage, your first task is to identify a location. iOS 14 includes the brand new point of interest template.\n\nThe point of interest template combines an interactive map provided by the MapKit framework accompanied by an information panel.\n\nUse it to show nearby locations and let users pick one.\n\nYour app supplies a list of locations and optional images to show on the map.\n\nThe template provides pan and zoom capabilities and will notify you of changing map regions.\n\nTo create a point of interest template, start by constructing a list of up to 12 CPPointOfInterest instances.\n\nEach of these includes a title, an optional subtitle, and an informative text that will be shown on the information panel.\n\nRemember to show only the most relevant information to drivers in CarPlay. On iPhone, your app might show all possible locations, but in CarPlay, you should limit the list to those that are most relevant or nearby. If multiple locations appear close to each other on the map, CarPlay will automatically group them.\n\nThe point of interest template supports dynamic property updates like other CarPlay templates.\n\nHere, to indicate selection, we have updated the pin image property of a location to use a different color.\n\nWhen a location is selected from a list, you may choose to show a secondary card for that point, revealing additional information and up to two buttons. These buttons could be used for a variety of tasks. For instance, they may signal you to switch to a navigation app for driving directions or push to another template to display additional information for that location. Let's take a look at how to update the template in response to either user pan and zoom actions, or movement. All three of these events will result in the visible map region changing, and your app should update the template with a new list of locations that correspond to that region. Start by assigning the template an object conforming to CPPointOfInterestTemplateDelegate so it can be notified each time the map region changes.\n\nHere we see the delegate method being defined...\n\nand new locations being computed...\n\nand then passed to the template.\n\nAt this time, CarPlay will update your locations list and map with the new values.\n\nNext, let's take a closer look at how your app may go about managing all your relevant points of interest.\n\nIn the previous slide, we saw the need to compute new locations for a region.\n\nYou may choose to query your own locations database or leverage MapKit's to determine nearby destinations.\n\nThen you'll need to construct a list of CPPointOfInterest models, initializing each with the data from your lookup. This is where you bring coordinate values, titles, and other available data from your app and make them available to the template.\n\nIn this example, the app attempts to reuse models whenever possible as an optimization and to reduce work for the template.\n\nAnd it's just that easy. By responding to map region changes and keeping the template current, you'll enable your users to find nearby destinations.\n\nAnd lastly, let's add one more bit of functionality to your app.\n\nHaving just enabled location browsing, your users will likely need to pick one to proceed.\n\nMaking use of the optional button properties of CPPointOfInterest is a convenient approach in making locations selectable.\n\nHere we assign a CPPointOfInterest instance a primary button that will appear on the information panel.\n\nAs you can see, a \"Select\" button is now available for the location.\n\nAs noted earlier, the information panel supports up to two buttons and several lines of descriptive text for each point.\n\nThe next step is to assign the button a handler. The button's handler will be called when tapped, and here we're maintaining both selection state, in addition to updating annotation images to make it more clear which location is selected on the map.\n\nAgain, any changes to template properties will immediately translate to car screen updates. In this case, assigning the selectedIndex of the location will have the template show the new state. And that completes our quick tour of the point of interest template, taking us from handling map region changes to making locations selectable. Now, once the user has chosen a location or performed a task, you may need to show a summary or otherwise finalize the interaction.\n\nThe information template is new in iOS 14. It brings everything together in a one-stop shop for displaying text and receiving user responses.\n\nThe information template is created with a list of labels that may be configured in either one or two columns and a set of footer buttons. The template can serve many purposes where full-screen interaction is needed. For quick food ordering apps, the information template may be used as an order summary, as seen here, or even a confirmation page.\n\nAnd for EV charging apps, the information template can be used to show important information about a charging station.\n\nThat takes us to the end of this quick overview of some of the new templates in iOS 14. The contact template takes the address book in your communication apps to the foreground...\n\nand the point of interest template is making it possible to build EV charging, parking, and apps for quick-service restaurants...\n\nwhile the information template ties everything together by providing the ability to display text and receive user responses on the car screen.\n\nWe're excited to see all the great apps you'll come up with making use of them. And now back to Jonathan to wrap things up for us today. Thanks, Allen. Today, we took a scenic drive through some new additions to the CarPlay framework. If you're working on a navigation app, then you can use many of the new templates and improvements we discussed today.\n\nYour audio and communication apps can now take advantage of new templates, like the tab bar template, plus some improvements to existing templates, like the list template. We also introduced brand new app categories that are supported in CarPlay for the first time.\n\nWe saw new templates for EV charging and parking apps, like the new point of interest template. Apps whose primary function is EV charging or parking can now provide a great experience in CarPlay.\n\nAnd if your app serves quick-service restaurants, you can add CarPlay to your app to allow users to easily choose recent or favorite items and order them for pickup or drive-through. Now, keep in mind that the car is a special place. If you have an app in one of the categories we've discussed today, then you'll need to apply for an entitlement to enable CarPlay for your app.\n\nCarPlay apps must be single-category. You will need to choose the category that you are supporting with your app and use a single entitlement.\n\nThe entitlement you choose will determine which CarPlay templates are available to your app. And remember, if you're building an audio app, and you want to deploy to iOS 13 or earlier, that playable content and audio templates may coexist in your app.\n\nFor much more about CarPlay templates, check out the updated CarPlay App Programming Guide on developer.apple.com/carplay. This is also where you can go to request entitlements for your app. There's also much more detail here about which entitlements may use which CarPlay templates.\n\nIf you're deploying an audio app to iOS 13 or earlier, you may want to revisit the playable content documentation. And if you're building a communication app, your app must implement SiriKit. There's a wealth of documentation and resources available on the CarPlay developer site.\n\nIf you're working on a navigation template app, check out our session from WWDC 2018. Thank you so much for joining us today. We are so excited to accelerate your apps onto the car screen and to see what you build\nwith CarPlay templates.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "4:24",
      "title": "CarPlay scene manifest",
      "language": "swift",
      "code": "// CarPlay Scene Manifest\n\n<key>UIApplicationSceneManifest</key>\n<dict>\n    <key>UISceneConfigurations</key>\n\t<dict>\n\t\t<key>CPTemplateApplicationSceneSessionRoleApplication</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>UISceneClassName</key>\n\t\t\t\t<string>CPTemplateApplicationScene</string>\n\t\t\t\t<key>UISceneConfigurationName</key>\n\t\t\t\t<string>MyApp—Car</string>\n\t\t\t\t<key>UISceneDelegateClassName</key>\n\t\t\t\t<string>MyApp.CarPlaySceneDelegate</string>\n\t\t\t</dict>\n\t\t</array>\n\t</dict>\n</dict>"
    },
    {
      "timestamp": "5:12",
      "title": "CarPlay app lifecycle",
      "language": "swift",
      "code": "// CarPlay App Lifecycle\n\nimport CarPlay\n\nclass CarPlaySceneDelegate: UIResponder, CPTemplateApplicationSceneDelegate {\n    var interfaceController: CPInterfaceController?\n   \n    func templateApplicationScene(_ templateApplicationScene: CPTemplateApplicationScene,\n            didConnect interfaceController: CPInterfaceController) {\n\n        self.interfaceController = interfaceController\n        let item = CPListItem(text: \"Rubber Soul\", detailText: \"The Beatles\") \n        let section = CPListSection(items: [item]) \n        let listTemplate = CPListTemplate(title: \"Albums\", sections: [section])\n        interfaceController.setRootTemplate(listTemplate, animated: true)\n    }\n\n  func templateApplicationScene(_ templateApplicationScene: CPTemplateApplicationScene,\n            didDisconnect interfaceController: CPInterfaceController) {\n    self.interfaceController = nil\n}"
    },
    {
      "timestamp": "5:54",
      "title": "Create a CPListTemplate",
      "language": "swift",
      "code": "// CPListTemplate\n\nimport CarPlay\n\nlet item = CPListItem(text: \"Rubber Soul\", detailText: \"The Beatles\") \nlet section = CPListSection(items: [item]) \nlet listTemplate = CPListTemplate(title: \"Albums\", sections: [section]) \nself.interfaceController.pushTemplate(listTemplate, animated: true)"
    },
    {
      "timestamp": "6:09",
      "title": "Handle user selection in a list item",
      "language": "swift",
      "code": "// CPListTemplate\n\nimport CarPlay\n\nlet item = CPListItem(text: \"Rubber Soul\", detailText: \"The Beatles\") \nitem.listItemHandler = { item, completion, [weak self] in\n    // Start playback, then...\n    self?.interfaceController.pushTemplate(CPNowPlayingTemplate.shared, animated: true)\n    completion()\n}\n\n// Later...\nitem.image = ..."
    },
    {
      "timestamp": "7:58",
      "title": "Create a CPTabBarTemplate",
      "language": "swift",
      "code": "// CPTabBarTemplate\n\nimport CarPlay\n\nlet item = CPListItem(text: \"Rubber Soul\", detailText: \"The Beatles\") \nlet section = CPListSection(items: [item]) \nlet favorites = CPListTemplate(title: \"Albums\", sections: [section])\nfavorites.tabSystemItem = .favorites\nfavorites.showsTabBadge = true\n\nlet albums: CPGridTemplate = ...\nalbums.tabTitle = \"Albums\"\nalbums.tabImage = ...\n\nlet tabBarTemplate = CPTabBarTemplate(templates: [favorites, albums])\nself.interfaceController.setRootTemplate(tabBarTemplate, animated: false)\n\n// Later...\nfavorites.showsTabBadge = false\ntabBarTemplate.updateTemplates([favorites, albums])"
    },
    {
      "timestamp": "9:34",
      "title": "Create a CPListImageRowItem",
      "language": "swift",
      "code": "// List Items for Audio Apps\n\nimport CarPlay\n\nlet gridImages: [UIImage] = ...\nlet imageRowItem = CPListImageRowItem(text: \"Recent Audiobooks\", images: gridImages) \n\nimageRowItem.listItemHandler = { item, completion in\n    print(\"Selected image row header!\")\n    completion()\n}\n\nimageRowItem.listImageRowHandler = { item, index, completion in\n    print(\"Selected artwork at index \\(index)!\")\n    completion()\n}\n\nlet section = CPListSection(items: [imageRowItem]) \nlet listTemplate = CPListTemplate(title: \"Listen Now\", sections: [section]) \nself.interfaceController.pushTemplate(listTemplate, animated: true)"
    },
    {
      "timestamp": "12:50",
      "title": "Configure the shared now playing template",
      "language": "swift",
      "code": "// Now Playing Template\n\nimport CarPlay\n\nclass CarPlaySceneDelegate: UIResponder, CPTemplateApplicationSceneDelegate {\n\n    func templateApplicationScene(_ templateApplicationScene: CPTemplateApplicationScene,\n            didConnect interfaceController: CPInterfaceController) {\n      \n        let nowPlayingTemplate = CPNowPlayingTemplate.shared\n\n        let rateButton = CPNowPlayingPlaybackRateButton() { button in\n                                                           \n            // Change the playback rate!\n                                                           \n        }\n        nowPlayingTemplate.updateNowPlayingButtons([rateButton])\n    }\n}"
    },
    {
      "timestamp": "19:46",
      "title": "Handle Point of Interest Template map region changes",
      "language": "swift",
      "code": "// CPPointOfInterestTemplateDelegate\n\nfunc pointOfInterestTemplate(_ template: CPPointOfInterestTemplate, \n                             didChangeMapRegion region: MKCoordinateRegion) {\n\n    self.locationManager.locations(for: region) { locations in\n        template.setPointsOfInterest(locations, selectedIndex: 0)\n    }\n}"
    },
    {
      "timestamp": "20:23",
      "title": "Create points of interest",
      "language": "swift",
      "code": "// CPPointOfInterest creation\n\nfunc locations(for region: MKCoordinateRegion, \n               handler: ([CPPointOfInterest]) -> Void) {\n    var tempateLocations: [CPPointOfInterest] = []\n        \n    for clientModel in self.executeQuery(for: region) {\n        let templateModel : CPPointOfInterest = self.locations[clientModel.mapItem] ??\n                CPPointOfInterest(location: clientModel.mapItem,\n                                  title: clientModel.title,\n                                  subtitle: clientModel.subtitle,\n                                  informativeText: clientModel.informativeText,\n                                  image: clientModel.mapImage)\n            \n            \n        tempateLocations.append(templateModel)\n    }\n    handler(templateLocations)\n}"
    },
    {
      "timestamp": "21:05",
      "title": "Point of interest selection buttons",
      "language": "swift",
      "code": "// Point of Interest Template location selection\n\nlet primaryButton = CPPointOfInterestButton(title: \"Select\") { button, [weak self] in\n            let selectedIndex = ...\n            \n            if selectedIndex != NSNotFound {\n                // Remove any existing selected state on previous location\n                self?.selectedLocation.image = defaultMapImage\n                // Change annotation for selected POI\n                self?.selectedLocation = templateModel\n                templateModel.image = selectedMapImage\n                // Update the template with new values\n                self?.pointOfInterestTemplate.selectedIndex = selectedIndex\n            }\n        }\n\nlet templateModel: CPPointOfInterest = ...\n\ntemplateModel.primaryButton = primaryButton"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Human Interface Guidelines: CarPlay",
        "url": "https://developer.apple.com/design/human-interface-guidelines/carplay"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2020/10635/8/AE50DE64-E4A1-44A8-84A7-05B91F3FE006/wwdc2020_10635_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2020/10635/8/AE50DE64-E4A1-44A8-84A7-05B91F3FE006/wwdc2020_10635_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10016",
      "year": "2022",
      "title": "Get more mileage out of your app with CarPlay",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10016"
    },
    {
      "id": "207",
      "year": "2019",
      "title": "Introducing SiriKit Media Intents",
      "url": "https://developer.apple.com/videos/play/wwdc2019/207"
    },
    {
      "id": "213",
      "year": "2018",
      "title": "CarPlay Audio and Navigation Apps",
      "url": "https://developer.apple.com/videos/play/wwdc2018/213"
    }
  ],
  "extractedAt": "2025-07-18T09:17:06.896Z"
}