{
  "id": "313",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/313/",
  "title": "Bring Swift Charts to the third dimension",
  "speakers": [],
  "duration": "",
  "topics": [
    "SwiftUI & UI Frameworks"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hi, I’m Mike, and I'm an engineer on the System Experience team. Today, I'd like to discuss an exciting new feature in Swift Charts. Swift Charts is a framework for creating approachable and stunning charts.\n\nCharts are used across Apple platforms for things like checking the temperature in Weather, showing battery usage in Settings, and graphing mathematical functions in Math Notes.\n\nUsing the building blocks available in Swift Charts, you can create 2D charts using components such as axis marks, labels, and line plots. But, the plot thickens! New in iOS, macOS, and visionOS 26, Swift Charts now supports 3D charts. That's right, you can now enable people to explore and understand datasets from completely new perspectives. In this session, I'll show how to bring a set of 2D charts to the third dimension by plotting in 3D, I'll cover how surface plots can be used for graphing three-dimensional math functions, and lastly, I'll go over ways you can customize your charts to make them more intuitive and delightful. But first, I have an important announcement: I love penguins! In fact, one of my favorite datasets contains measurements for hundreds of penguins across the Palmer Archipelago in Antarctica. This data includes the beak length, flipper length, and weight of each penguin, and is grouped by the species of penguin: Chinstrap, Gentoo, and Adélie.\n\nI'll use Swift Charts to fish for insights in this data, and show how plotting in 3D can help visualize the differences between the penguin species. So, I built a 2D chart here to show the relationship between the flipper lengths and weights of the penguins. PointMark is used to plot each penguin's flipper length and weight, and foregroundStyle colors the points by species, and creates the legend in the corner. This is great, and Swift Charts made it easy to construct a chart. This chart shows that Chinstrap and Adélie penguins have similar flipper lengths and weights, while Gentoo penguins have longer flippers and weigh more.\n\nThe penguin dataset also includes beak length, so I also made a chart that plots the beak length and weight. This one shows that Chinstrap and Gentoo penguins have similar beak lengths, while Adélie penguins have shorter beaks.\n\nLastly, I made a chart for the beak lengths and flipper lengths, where it seems penguins with longer beaks tend to have longer flippers too.\n\nEach of these 2D charts are great, and they provide good insights into the relationships between two properties at a time. However, Swift Charts can now take these charts to the next level, by making a single chart that contains all of this data.\n\nAnd it's called Chart3D. Chart3D takes familiar concepts from 2D charts, such as scatter plots, and brings them into full 3D. To use a 3D chart, I'll change Chart to Chart3D.\n\nPointMark works great in Chart3D, and it now takes a Z value. Here, I use the Beak Length.\n\nI'll set the Z-axis label to \"Beak Length\" as well. That's it! With a few lines of code and Chart3D, I can immediately see the differences between the penguin species in a fun and interactive way.\n\nI can use simple gestures to rotate the chart to precise angles and see three clusters of data points.\n\nI can also view the chart from the sides to compare two properties at a time, similar to if I was viewing the chart in 2D. 3D charts work great when the shape of the data is more important than the exact values. This can happen naturally when the data itself is three-dimensional, especially if it represents a physical position in 3D space. Also, interactivity is key to understanding three-dimensional datasets, so only consider 3D charts if requiring interaction enhances the experience in your app. When it comes to the best representation for your dataset, the choice between 2D and 3D isn't black and white.\n\nPointMarks, RuleMarks, and RectangleMarks have all been updated for 3D charts. And now, unique to Chart3D, is SurfacePlot Next, I'll take a deep dive into how SurfacePlot works. SurfacePlot is the three-dimensional extension of LinePlot. It plots a mathematical surface containing up to two variables in three dimensions.\n\nThe new SurfacePlot API is similar to the LinePlot API. It accepts a closure that takes two doubles, and returns a double.\n\nAfter entering a math expression in the closure, SurfacePlot evaluates the expression for different values of X and Z and creates a continuous surface of the computed Y values. These surfaces can be as intricate, or as simple, as you want.\n\nTo learn more about function plots via the LinePlot API, check out \"Swift Charts: Vectorized and function plots\" from WWDC24.\n\nYou know what? Now that I'm looking at the penguin dataset again, there appears to be a linear relationship between the beak length and flipper length of a penguin, and how much it weighs. That seems like a reasonable guess, but instead of winging it, I can use SurfacePlot to show a linear regression of the data.\n\nI've defined a LinearRegression class that estimates a y value based on the independent x and z variables. More specifically, I set the linear regression to estimate the weight of a penguin based on the flipper length and beak length. This linear regression is then used in SurfacePlot to plot the estimated weights as a continuous surface.\n\nGreat! It does seem like there's a linear relationship in this data. The SurfacePlot shows a positive correlation between the flipper length and weight, and there's a slight positive correlation between the beak length and weight as well. Now, I'll go over some of the great ways to customize the style and behavior of Chart3D.\n\nWhile I was interacting with the penguin dataset earlier, I noticed that changing the angle of the chart also changes the appearance of the data. This angle is great for showing the clusters of data points. While this angle works well for showing a linear relationship. These angles are known as the pose of the chart.\n\nIt's important to choose an initial pose that provides a good representation for your data.\n\nFor dynamic data where you don't know the values beforehand, try to choose an initial pose that works well for typical datasets of that type.\n\nThe pose of the chart is adjusted using the Chart3DPose modifier, and it takes a Chart3DPose.\n\nI can set the pose to specific values, such as front, or I can define a custom pose. This initializer takes two parameters: the azimuth, which rotates the chart left and right, and the inclination, which tilts the chart up and down.\n\nNext, notice how points near the back of the chart are the same size as points near the front of the chart. This can make it easier to compare sizes and distances across the chart regardless of depth.\n\nIt's also great for viewing charts from the side, as it effectively turns a 3D chart into a 2D one.\n\nThis is known as an orthographic camera projection.\n\nChart3D offers two camera projections: orthographic, which is the default behavior, and perspective. With Perspective projection, data points farther away appear smaller, and parallel lines converge. This allows for an immersive experience and can help with depth perception.\n\nThe camera projection is set using the chart3DCameraProjection modifier.\n\nSurfacePlots have a few customization options for the surface styles as well. ForegroundStyle accepts gradients such as LinearGradient or EllipticalGradient, and it supports two new values: heightBased, which colors points on the surface based on the height of the surface at that point, and normalBased, which colors points on the surface based on the angle of the surface at that point.\n\nThere are many other modifiers available for Chart3D, some of which may be familiar from 2D charts. Use these to customize surface styles, PointMark symbols, the chart domain and axis marks, or the behavior of selection. By combining these view modifiers along with PointMark, RuleMark, RectangleMark, and SurfacePlot, there are all sorts of interesting charts that can be achieved. This is just the tip of the iceberg.\n\nAnd, 3D charts work and look great on Vision Pro, where it's a natural fit for three dimensional data sets! That's some of the new 3D features coming to Swift Charts. Once you've decided 3D is a good representation for your data, try plotting with Chart3D to bring a new level of depth to your charts, and use Swift Charts' customization APIs to design your own approachable and stunning charts.\n\nTo learn about best practices for incorporating Swift Charts into your apps, check out \"Design app experiences with charts\" from WWDC22.\n\nThank you. I can't wait to see the types of charts that you bring to the third dimension.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "2:03",
      "title": "A scatterplot of a penguin's flipper length and weight",
      "language": "swift",
      "code": "// A scatterplot of a penguin's flipper length and weight\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  var body: some View {\n    Chart(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chartXAxisLabel(\"Flipper Length (mm)\")\n    .chartYAxisLabel(\"Weight (kg)\")\n    .chartXScale(domain: 160...240)\n    .chartYScale(domain: 2...7)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "2:39",
      "title": "A scatterplot of a penguin's beak length and weight",
      "language": "swift",
      "code": "// A scatterplot of a penguin's beak length and weight\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  var body: some View {\n    Chart(penguins) { penguin in\n      PointMark(\n        x: .value(\"Beak Length\", penguin.beakLength),\n        y: .value(\"Weight\", penguin.weight)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chartXAxisLabel(\"Beak Length (mm)\")\n    .chartYAxisLabel(\"Weight (kg)\")\n    .chartXScale(domain: 30...60)\n    .chartYScale(domain: 2...7)\n    .chartXAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "2:51",
      "title": "A scatterplot of a penguin's beak length and flipper length",
      "language": "swift",
      "code": "// A scatterplot of a penguin's beak length and flipper length\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  var body: some View {\n    Chart(penguins) { penguin in\n      PointMark(\n        x: .value(\"Beak Length\", penguin.beakLength),\n        y: .value(\"Flipper Length\", penguin.flipperLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chartXAxisLabel(\"Beak Length (mm)\")\n    .chartYAxisLabel(\"Flipper Length (mm)\")\n    .chartXScale(domain: 30...60)\n    .chartYScale(domain: 160...240)\n    .chartXAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "3:28",
      "title": "A scatterplot of a penguin's flipper length, beak length, and weight",
      "language": "swift",
      "code": "// A scatterplot of a penguin's flipper length, beak length, and weight\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight),\n        z: .value(\"Beak Length\", penguin.beakLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "5:19",
      "title": "A surface plot showing mathematical functions (x * z)",
      "language": "swift",
      "code": "// A surface plot showing mathematical functions\n\nimport SwiftUI\nimport Charts\n\nvar SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        // (Double, Double) -> Double\n        x * z\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "5:43",
      "title": "A surface plot showing mathematical functions",
      "language": "swift",
      "code": "// A surface plot showing mathematical functions\n\nimport SwiftUI\nimport Charts\n\nvar SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        // (Double, Double) -> Double\n        (sin(5 * x) + sin(5 * z)) / 2\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "5:46",
      "title": "A surface plot showing mathematical functions (-z)",
      "language": "swift",
      "code": "// A surface plot showing mathematical functions\n\nimport SwiftUI\nimport Charts\n\nvar SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        // (Double, Double) -> Double\n        -z\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "6:19",
      "title": "Present a linear regression of the penguin data",
      "language": "swift",
      "code": "// Present a linear regression of the penguin data\n\nimport SwiftUI\nimport Charts\nimport CreateML\nimport TabularData\n\nfinal class LinearRegression: Sendable {\n  let regressor: MLLinearRegressor\n\n  init<Data: RandomAccessCollection>(\n    _ data: Data,\n    x xPath: KeyPath<Data.Element, Double>,\n    y yPath: KeyPath<Data.Element, Double>,\n    z zPath: KeyPath<Data.Element, Double>\n  ) {\n    let x = Column(name: \"X\", contents: data.map { $0[keyPath: xPath] })\n    let y = Column(name: \"Y\", contents: data.map { $0[keyPath: yPath] })\n    let z = Column(name: \"Z\", contents: data.map { $0[keyPath: zPath] })\n    let data = DataFrame(columns: [x, y, z].map { $0.eraseToAnyColumn() })\n    regressor = try! MLLinearRegressor(trainingData: data, targetColumn: \"Y\")\n  }\n\n  func callAsFunction(_ x: Double, _ z: Double) -> Double {\n    let x = Column(name: \"X\", contents: [x])\n    let z = Column(name: \"Z\", contents: [z])\n    let data = DataFrame(columns: [x, z].map { $0.eraseToAnyColumn() })\n    return (try? regressor.predictions(from: data))?.first as? Double ?? .nan\n  }\n}\n\nlet linearRegression = LinearRegression(\n  penguins,\n  x: \\.flipperLength,\n  y: \\.weight,\n  z: \\.beakLength\n)\n\nstruct PenguinChart: some View {\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D {\n      ForEach(penguins) { penguin in\n        PointMark(\n          x: .value(\"Flipper Length\", penguin.flipperLength),\n          y: .value(\"Weight\", penguin.weight),\n          z: .value(\"Beak Length\", penguin.beakLength),\n        )\n        .foregroundStyle(by: .value(\"Species\", penguin.species))\n      }\n\n      SurfacePlot(x: \"Flipper Length\", y: \"Weight\", z: \"Beak Length\") { flipperLength, beakLength in\n        linearRegression(flipperLength, beakLength)\n      }\n      .foregroundStyle(.gray)\n    }\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "7:50",
      "title": "Adjust the initial chart pose (Default)",
      "language": "swift",
      "code": "// Adjust the initial chart pose\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  @State var pose: Chart3DPose = .default\n\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight),\n        z: .value(\"Beak Length\", penguin.beakLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chart3DPose($pose)\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "8:02",
      "title": "Adjust the initial chart pose (Front)",
      "language": "swift",
      "code": "// Adjust the initial chart pose\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  @State var pose: Chart3DPose = .front\n\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight),\n        z: .value(\"Beak Length\", penguin.beakLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chart3DPose($pose)\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "8:09",
      "title": "Adjust the initial chart pose (Custom)",
      "language": "swift",
      "code": "// Adjust the initial chart pose\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  @State var pose = Chart3DPose(\n    azimuth: .degrees(20),\n    inclination: .degrees(7)\n  )\n\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight),\n        z: .value(\"Beak Length\", penguin.beakLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chart3DPose($pose)\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "9:15",
      "title": "Adjust the initial chart pose and camera projection",
      "language": "swift",
      "code": "// Adjust the initial chart pose and camera projection\n\nimport SwiftUI\nimport Charts\n\nstruct PenguinChart: View {\n  @State var pose = Chart3DPose(\n    azimuth: .degrees(20),\n    inclination: .degrees(7)\n  )\n\n  var body: some View {\n    let xLabel = \"Flipper Length (mm)\"\n    let yLabel = \"Weight (kg)\"\n    let zLabel = \"Beak Length (mm)\"\n\n    Chart3D(penguins) { penguin in\n      PointMark(\n        x: .value(\"Flipper Length\", penguin.flipperLength),\n        y: .value(\"Weight\", penguin.weight),\n        z: .value(\"Beak Length\", penguin.beakLength)\n      )\n      .foregroundStyle(by: .value(\"Species\", penguin.species))\n    }\n    .chart3DPose($pose)\n    .chart3DCameraProjection(.perspective)\n    .chartXAxisLabel(xLabel)\n    .chartYAxisLabel(yLabel)\n    .chartZAxisLabel(zLabel)\n    .chartXScale(domain: 160...240, range: -0.5...0.5)\n    .chartYScale(domain: 2...7, range: -0.5...0.5)\n    .chartZScale(domain: 30...60, range: -0.5...0.5)\n    .chartXAxis {\n      AxisMarks(values: [160, 180, 200, 220, 240]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartYAxis {\n      AxisMarks(values: [2, 3, 4, 5, 6, 7]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n    .chartZAxis {\n      AxisMarks(values: [30, 40, 50, 60]) {\n        AxisTick()\n        AxisGridLine()\n        AxisValueLabel()\n      }\n    }\n  }\n}"
    },
    {
      "timestamp": "9:24",
      "title": "Customize the surface styles for a sinc function",
      "language": "swift",
      "code": "// Customize the surface styles for a sinc function\n\nimport SwiftUI\nimport Charts\n\nstruct SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        let h = hypot(x, z)\n        return sin(h) / h\n      }\n    }\n    .chartXScale(domain: -10...10, range: -0.5...0.5)\n    .chartZScale(domain: -10...10, range: -0.5...0.5)\n    .chartYScale(domain: -0.23...1, range: -0.5...0.5)\n  }\n}"
    },
    {
      "timestamp": "9:29",
      "title": "Customize the surface styles for a sinc function (EllipticalGradient)",
      "language": "swift",
      "code": "// Customize the surface styles for a sinc function\n\nimport SwiftUI\nimport Charts\n\nstruct SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        let h = hypot(x, z)\n        return sin(h) / h\n      }\n      .foregroundStyle(EllipticalGradient(colors: [.red, .orange, .yellow, .green, .blue, .indigo, .purple]))\n    }\n    .chartXScale(domain: -10...10, range: -0.5...0.5)\n    .chartZScale(domain: -10...10, range: -0.5...0.5)\n    .chartYScale(domain: -0.23...1, range: -0.5...0.5)\n  }\n}"
    },
    {
      "timestamp": "9:38",
      "title": "Customize the surface styles for a sinc function (heightBased)",
      "language": "swift",
      "code": "// Customize the surface styles for a sinc function\n\nimport SwiftUI\nimport Charts\n\nstruct SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        let h = hypot(x, z)\n        return sin(h) / h\n      }\n      .foregroundStyle(.heightBased)\n    }\n    .chartXScale(domain: -10...10, range: -0.5...0.5)\n    .chartZScale(domain: -10...10, range: -0.5...0.5)\n    .chartYScale(domain: -0.23...1, range: -0.5...0.5)\n  }\n}"
    },
    {
      "timestamp": "9:47",
      "title": "Customize the surface styles for a sinc function (normalBased)",
      "language": "swift",
      "code": "// Customize the surface styles for a sinc function\n\nimport SwiftUI\nimport Charts\n\nstruct SurfacePlotChart: View {\n  var body: some View {\n    Chart3D {\n      SurfacePlot(x: \"X\", y: \"Y\", z: \"Z\") { x, z in\n        let h = hypot(x, z)\n        return sin(h) / h\n      }\n      .foregroundStyle(.normalBased)\n    }\n    .chartXScale(domain: -10...10, range: -0.5...0.5)\n    .chartZScale(domain: -10...10, range: -0.5...0.5)\n    .chartYScale(domain: -0.23...1, range: -0.5...0.5)\n  }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Swift Charts",
        "url": "https://developer.apple.com/documentation/Charts"
      },
      {
        "title": "Swift Charts updates",
        "url": "https://developer.apple.com/documentation/Updates/SwiftCharts"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/313/5/01490c3f-6737-43db-b2fb-f3ccfb1e824c/downloads/wwdc2025-313_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/313/5/01490c3f-6737-43db-b2fb-f3ccfb1e824c/downloads/wwdc2025-313_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10155",
      "year": "2024",
      "title": "Swift Charts: Vectorized and function plots",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10155"
    },
    {
      "id": "110340",
      "year": "2022",
      "title": "Design an effective chart",
      "url": "https://developer.apple.com/videos/play/wwdc2022/110340"
    },
    {
      "id": "110342",
      "year": "2022",
      "title": "Design app experiences with charts",
      "url": "https://developer.apple.com/videos/play/wwdc2022/110342"
    }
  ],
  "extractedAt": "2025-07-18T10:51:42.571Z"
}