{
  "id": "260",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/260/",
  "title": "Develop for Shortcuts and Spotlight with App Intents",
  "speakers": [],
  "duration": "",
  "topics": [
    "Machine Learning & AI"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "Hi, I’m Ayaka and I’m a member of the Shortcuts team. Welcome to Develop for Shortcuts and Spotlight with App Intents. The App Intents framework gives your app’s features more visibility across our platforms, by letting people use core functionality from your app in places like Shortcuts and Spotlight.\n\nThe Shortcuts app lets people connect different apps and their actions together, to make the everyday a bit more fast and fluid. You can use Shortcuts to automate repetitive tasks and connect to other functionality from different apps. For example, to save a recipe from Safari to a note in the Notes app. This year, we’re bringing the power of Apple Intelligence into Shortcuts to make weaving these actions together easier, and even a bit more fun. You can also now run Shortcuts actions, including your app’s actions, right from Spotlight on Mac. Today, we’ll cover how you can adopt App Intents to make your app work great with both Shortcuts and Spotlight. We’ll start by introducing the new Use Model action, which allows people to use Apple Intelligence models in their shortcuts. We’ll then do a deep dive into how this action works, along with new ways to run Shortcuts from Spotlight and Automations on Mac. Let's get started.\n\nThis is the new Use Model action. It’s one of the many new Intelligent actions we added to Shortcuts this year. Alongside actions for Image Playground, Writing Tools, and more. With this new action, tasks that used to be tedious, like parsing text or formatting data, are now as simple as writing just a few words. You can choose a large server-based model on Private Cloud Compute to handle complex requests while protecting your privacy, or the on-device model to handle simple requests without the need for a network connection. You can also choose ChatGPT if you want to tap into its broad world knowledge and expertise. For example, you can use a model to filter calendar events for the ones that are related to a specific trip, summarize content on the web, for example, to get the Word of the Day, and even keep you up to date on San Francisco’s food scene by asking ChatGPT what’s the latest. Here’s an example shortcut that uses a model. It’s a simple one that helps me organize the notes I take at work every day. It first gets the notes that I’ve created today, loops through them, and uses the model with the request, “Is this note related to developing features for the Shortcuts app?” If the response is yes, it adds it to my Shortcuts Projects folder. Here, because I’m using the output from the model and an if action, which expects a Boolean input, the runtime will automatically generate a Boolean output type. Instead of returning text like, “Yes, this note seems to be about developing features for the Shortcuts app” which is helpful but a bit verbose and of the wrong type, the model returns a yes or no Boolean response, which I can then pass into the If action.\n\nIf you need more control, you can always explicitly choose one of these built-in output types. For example, you might want to do this when testing out the action for a flow you have in mind before you know what action you want to connect the output into. Today, I want us to take a closer look at Text, Dictionary, and Content from your apps, and go over what you as a developer should do to make sure that the output from the model connects well with what your app accepts as input. Let’s start with Text.\n\nText is the bread and butter of language models. At the surface, it might seem like the simplest and most humble option, but there’s actually a lot of complexity and richness to it. Literally. That’s because models often respond with Rich Text. For example, some portions of the response may be Bold or Italic. It might even contain a list or a table like this. If your app supports Rich Text content, now is the time to make sure your app intents use the attributed string type for text parameters where appropriate. An attributed string is a combination of characters, ranges, and a dictionary, that together define how the text should be rendered. By supporting Attributed string input, the output from the model can connect seamlessly and losslessly into your app. Let's see that in action. I have a shortcut here that uses ChatGPT to create a diary entry template for me to use in the Bear app. I’m asking the model to include a mood logging table for the morning, afternoon, and evening, and some space for reflecting on that day’s highlights. The shortcut then takes the output from the model and passes it to the Create Note action from the Bear app. Let me show you how this works by running it.\n\nAnd there is my new diary entry for today. It includes rich text formatting, like bolding important info, and it also includes the mood logging table like I requested. Highlights for today? How about “Recorded WWDC talk!”? Anyway, I’ll finish this journaling session later.\n\nBecause the Bear app’s Create Note app intent supports Attributed string, it was able to take the Rich Text output from the model and present it losslessly in their app.\n\nIf you want to learn more about supporting Attributed strings in your app, you’ll want to check out the “What’s New in Foundation” video and the Rich Text “Code-along” session. Next, let's take a look at Dictionary. The Dictionary output type is useful when you need multiple pieces of data returned from a single request in a structured format. For example, I might want to create a shortcut that looks at all the files in my invoices folder, extracts information like vendor, amount, and date from each item and adds it as a row to a spreadsheet so I can better track my finances. To do this, I can use the model to extract that info and tell exactly how I want the output Dictionary to be formatted. I can then use the values from the Dictionary in subsequent actions, like adding a row to a spreadsheet. Thanks to language models, I’m able to take unstructured data like the contents of a PDF, and transform it into exactly the structure I need to connect it to another action. Finally, let’s take a look at Content from your apps.\n\nContent from your apps are represented as app entities, defined by you, using the App Intents Framework. For example, a Calendar app might provide entities for Calendars and Events. If App Intents are the actions or verbs from your app, App Entities are the nouns. You can pass App Entities into the model too. If you pass in a list of entities like calendar events into the request, you’ll be presented with an extra option: The app entity type that you passed in. For example, if I pass in a list of calendar events, I can ask the model to filter the calendar events to only the ones related to a specific trip. Under the hood, the action passes a JSON representation of your entity to the model, so you’ll want to make sure to expose any information you want it to be able to reason over, in the entity definition.\n\nFirst, all entity properties exposed to Shortcuts will be converted to a string, and included in the JSON representation. The name provided in the type display representation will also be included, to hint to the model what this entity represents, like a Calendar Event. Lastly, the title and subtitle provided in the entity’s display representation will be included. Let's take a look at an example.\n\nIn the simplified representation of a Calendar Event, the title of the event, start date, and end date will be included, as well as the type name provided by the type display representation, and the title and subtitle provided in the display representation.\n\nThese strings defined on your entities are also displayed in the Shortcuts app when inspecting the properties of an entity that’s being passed into another action, so you’ll want to verify that they look good there too. Now that we know how to structure the entities, let’s make sure there’s a way to get these entities to pass into the model. In this case, the calendar entities to filter. In Shortcuts, the most common way to get entities is through a Find action. This type of action allows people to get entities from your app by using their properties as filters, like the start date of an event, or the calendar that it belongs to. You can create a Find action by implementing your own queries that conform to the Enumerable Entity Query and Entity Property Query protocols. Or, if you already donate your app entities to Core Spotlight by adopting the Indexed Entity protocol, you can adopt new APIs to associate your App Entity’s properties to their corresponding Spotlight attribute keys for the system to automatically generate a Find action. Let’s take a look at our Event Entity example from earlier.\n\nHere, I’ve already conformed Event Entity to the Indexed Entity protocol.\n\nThe title, subtitle, and image from the display representation will automatically be associated with their respective Spotlight attribute keys.\n\nIn order to associate properties from your entity to the corresponding attribute key on the Spotlight Entity, you can use the new indexing key parameter. Here, the event title property is being associated with the event title Spotlight attribute key.\n\nThere are some cases where there isn’t an existing, corresponding attribute key. In those cases, you can use the custom indexing key parameter on the property to specify a custom key, like I did here with the notes property.\n\nAnd this is the Find action that will be available in the Shortcuts app, based on that Indexed Entity. You can also check out the App Intents Travel Tracking App available on “developer.apple.com” for another example. That’s everything you need to know about how to structure your app entities and provide them to the model. Now, let’s take a look at another thing people can do with the Use Model action. This action provides an option to “follow up” on the request so they can go back and forth with the model to get the output just right before passing it to the next action. Let me show you how I've been using this. As someone who’s been trying to cook more, I have a shortcut that lets me quickly extract the list of ingredients from a recipe using a model, and put it in my Grocery List in the Things app. By turning on the Follow Up toggle, I get the option to follow up on my initial request and make adjustments. For example, I can ask the model to make modifications to the recipe before saving the ingredients. Now, let’s go take a look at a pizza recipe I’ve had my eyes on in Safari.\n\nHere’s a recipe for some Neapolitan style pizza that a friend shared with me. This looks really good. So let me run my shortcut to save the ingredients in my Grocery List.\n\nAlright, so it looks like I’ll need 400g of zero zero flour, 100g of whole wheat flour, some yeast, salt. Okay, this looks great. I’m actually having a pizza party, so I’m going to want to make some extra.\n\nHere because I had Follow Up enabled, I’m presented with a text field to follow up. I’m going to request: “Double the recipe”.\n\nAll right, so now I need; 800g of zero zero flour, 200g of whole wheat flour. Okay, this looks perfect! And here are the ingredients for my pizza party, in the Things app. And that’s your new Use Model action. Now let’s take a look at Spotlight on Mac.\n\nSpotlight lets you search for apps and documents across the system. This year, you can now run actions from your app directly from Spotlight on Mac! Your apps can show actions in Spotlight by adopting App Intents, just like what you do for Shortcuts. The best practices for how to design app intents for Shortcuts applies directly to Spotlight, including writing a great parameter summary. A parameter summary is a short, natural language representation of what the app intent does, including the parameters it needs to run.\n\nThat same parameter summary is shown in the Shortcuts Editor when you create a shortcut. Spotlight is all about running things quickly. To do that, people need to be able to provide all the information your intent needs to run directly in Spotlight. Let me go over how to do that.\n\nFirst, the parameter summary, which is what people will see in Spotlight UI, must contain all required parameters that don’t have a default value. If you have an intent that doesn’t have any parameters like that, you don’t need to provide a parameter summary. Spotlight can fall back to showing the title of the intent instead. Secondly, you’ll want to make sure that the intent is not hidden from Shortcuts in Spotlight. For example by setting “is discoverable”  to false or setting “assistant only” to true in your intent implementation.\n\nIf you already adopted an intent for widget configuration that doesn’t have a perform method, that will also not show up in Spotlight. Let's take a look at a few examples.\n\nI have an intent here called Create Event Intent that people can use to create a new calendar event. It currently has three parameters, a title, start date, and end date. This intent will show up in Spotlight because all of its required parameters are present in the parameter summary. However, if I add a new Notes parameter as a required parameter without a default value and don’t add it to the parameter summary, the intent will no longer show up in Spotlight. But if I update the notes parameter to be optional, the intent will again show up in Spotlight.\n\nAlternatively, I could keep the parameter required and provide a default value, like an empty string in this case.\n\nFor best practices on designing parameter summaries, like choosing which parameters to make optional, be sure to check out the Design App Intents for system experiences video. Once you’ve gotten your intent to show up in Spotlight, you’ll now want to optimize the user experience.\n\nThis includes supporting suggestions, search by typing, and providing background and foreground running options. Let's take a look.\n\nWhen someone searches for and selects your intent in Spotlight, they need to fill out the required parameters before running the intent. In order to make this interaction quick, you should provide suggestions for how to fill in these parameters. There are a couple of protocols you can implement to do this.\n\nYou can implement Suggested Entities as a part of the Entity Query protocol, or all entities as a part of the Enumerable Entity Query protocol.\n\nYou should use suggested entities when there is a subset of a large or otherwise unbounded list of entities you want to suggest, for example, a list of calendar events in the coming day, instead of all events, past and present. All entities is great if the list of entities is smaller and bounded, for example, a list of timezones.\n\nYou can also tag on-screen content by setting the App Entity Identifier property on NS user Activity to provide suggestions based on what content or entity that is currently active. For example, the detail view of a specific calendar event. For more details on that API, check out the session; “Exploring New Advances in App Intents.” Lastly, your intent can also adopt the Predictable Intent protocol so Spotlight can surface suggestions based on how that intent is used. Next, let's consider the experience when someone starts typing into a parameter field. If you already implemented suggestions, you’ll automatically get basic search and filtering functionality for the suggestions you provide. But in cases where there are more entities beyond the suggestions that someone might want to select, you should add deeper search support by implementing queries.\n\nYou can implement the Entity String Query protocol or implement Indexed Entity as we walked through earlier.\n\nYou can find an example implementation of Entity String Query in the App Intents Sample Code app available on “developer.apple.com”. And for details on how to implement Indexed Entity, check out the “What’s new in App Intents” talk from 2024. Next, let’s consider the experience of running the action. In the example of creating an event, sometimes people want the action to run entirely in the background for a quick in and out, but in other cases, it’s nice to see the created event in the app itself.\n\nTo support both types of experiences, you can separate your intents where appropriate into background and foreground intents. For example, we could have a “create event” intent be a background intent, so that people can create calendar events in the background without opening the app. We can also have an “open event” intent that takes the app into the foreground by opening a specific event, which is a useful action on its own. We can then pair these two intents together by having the background intent return the foreground intent as an Opens Intent. In this case, the Create Event Intent can return an Open Event Intent as an Opens Intent.\n\nFor more details on this, check out the “Dive into App Intents” video. And that's Spotlight on Mac. Now let’s put the spotlight on Automations. This year, we’re bringing personal automations to the Mac, with new automation types like folder and external drive automations built specifically for Mac, along with automation types you might already be familiar with from iOS, like Time of Day and Bluetooth. For example, I can now make it so that my invoice processing shortcut from earlier, runs every time I add a new invoice to a specific folder instead of having to run it manually. As long as your intent is available on macOS, they will also be available to use in Shortcuts to run as a part of Automations on Mac. This includes iOS apps that are installable on macOS.\n\nThat adds Spotlight and Automations on Mac to the many ways you can run Shortcuts, including action button, control center, and much more.\n\nAnd with the addition of new intelligent actions like Use Model, the possibilities for how your app’s actions can be used across the system are endless. Let's wrap up with some next steps. First, expose content from your app as entities that work great in Shortcuts, including the new Use Model action. That means exposing find actions and making sure the entities expose key properties that you would want a model to be able to reason over.\n\nNext, use attributed strings to allow Rich Text to be passed into your apps, like what we saw with the Bear app demo.\n\nLast but not least, optimize your intents for Spotlight on Mac and make sure they look great in Shortcuts too. Thanks for watching.",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "App Intents",
        "url": "https://developer.apple.com/documentation/AppIntents"
      },
      {
        "title": "App Shortcuts",
        "url": "https://developer.apple.com/documentation/AppIntents/app-shortcuts"
      },
      {
        "title": "Donating Shortcuts",
        "url": "https://developer.apple.com/documentation/SiriKit/donating-shortcuts"
      },
      {
        "title": "Human Interface Guidelines: App Shortcuts",
        "url": "https://developer.apple.com/design/human-interface-guidelines/app-shortcuts"
      },
      {
        "title": "Soup Chef: Accelerating App Interactions with Shortcuts",
        "url": "https://developer.apple.com/documentation/SiriKit/soup-chef-accelerating-app-interactions-with-shortcuts"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/260/8/8d3b0b9e-3bdb-4661-b333-069c3612b565/downloads/wwdc2025-260_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/260/8/8d3b0b9e-3bdb-4661-b333-069c3612b565/downloads/wwdc2025-260_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10193",
      "year": "2023",
      "title": "Design Shortcuts for Spotlight",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10193"
    },
    {
      "id": "10102",
      "year": "2023",
      "title": "Spotlight your app with App Shortcuts",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10102"
    }
  ],
  "extractedAt": "2025-07-18T10:39:12.470Z"
}