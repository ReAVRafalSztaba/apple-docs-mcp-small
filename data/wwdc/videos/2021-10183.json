{
  "id": "10183",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10183/",
  "title": "Meet Group Activities",
  "speakers": [],
  "duration": "",
  "topics": [
    "Audio & Video",
    "Essentials"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Pierre de Filippis: Hi there. My name is Pierre.\n\nI’m a manager on our Communication Applications team, and I’ll later be joined by my colleague Bhaskar.\n\nIt’s my pleasure to welcome you to “Meet Group Activities.” I think we can all recognize that this past year, finding ways to stay connected has felt more essential than ever.\n\nThis is incredibly important to us at Apple, and we wanted to give our users meaningful new ways to connect.\n\nAs a result, in iOS 15, we’re creating a new way to enjoy activities together that makes you feel like you’re in the same room as the people sharing with you.\n\nAnd we call it \"SharePlay.\" SharePlay is powered by the Group Activities framework, and in this session, we’re going to talk about how you can adopt it in your application.\n\nBefore we get into some of those details, let me tell you a bit more about the key components of SharePlay.\n\nLet’s start with communication.\n\nWe think dynamic and natural communication is a critically important part of a meaningful shared experience, so we’ve built SharePlay right into FaceTime and Messages.\n\nWe are continually blown away by how central these apps have become in people’s lives and relationships, especially over the last year.\n\nAnd people don’t just use FaceTime and Messages to connect with that friend from 30 years ago once in a while.\n\nInstead, our users spend a significant amount of time communicating with the people that are closest to them; their closest friends, and their closest family.\n\nThose are the kind of people you would invite into your living room to watch a movie, for example, and that’s exactly what we want to facilitate with SharePlay.\n\nLet me give you an idea of how this works.\n\nIt all starts with the concept of a session.\n\nBefore a group starts an activity, they need to join a session so that everyone is together and ready to share.\n\nOnce users are in a session, they can communicate via text, audio, and video in Messages and FaceTime just like they are used to.\n\nSwitching between these modes of communication is dynamic and fluid, so they can easily choose a way to communicate that matches the moment.\n\nWe also give users a consistent system-wide way to manage their session.\n\nUsers can invite new people on the fly or leave the session entirely.\n\nOnce you are in a session, users can navigate the entire system and drop in on any app.\n\nAs a developer, you get it at all for free with Group Activities.\n\nSo that’s communication.\n\nThe next area we think is critical is platform experience.\n\nWe want this experience to be simple, consistent, and available across our system and devices.\n\nWith Group Activities, we’re building a unified experience that works across iOS, iPadOS, macOS, where Group Activities is available even for your website with WebKit.\n\nIt also works beautifully on AppleTV, so you can enjoy it on the big screen.\n\nAll of your devices are aware when you are in a session, so you can join from any device, and you can use multiple devices seamlessly.\n\nFinally, we also designed it to deliver great audio to Bluetooth devices, including AirPods.\n\nAs part of platform experience, we’re doing something special for content playback.\n\nWhile we’re hoping you take full advantage of the expressiveness of the API to create many different types of SharePlay activities, we created some really cool enhancements that make shared media experiences effortless to build.\n\nThe core of any media experience is the play button; it’s the moment when your users decide what content they want to spend their time on.\n\nOur goal is for every play button throughout the system to work with SharePlay.\n\nWe want people to feel that any piece of media in your app is ready to kick off a shared experience whenever they’re on FaceTime with their friends, which is where you come in.\n\nWe’re offering new APIs designed to fit right into your existing code paths.\n\nBy adopting Group Activities, your play buttons can now start these shared media experiences whenever a group conversation is active.\n\nAnd we’ll use smarts over time to adapt to user behaviors, making shared experiences effortless.\n\nNext is time-synced playback.\n\nWe think it’s super important that people are laughing together, smiling together, and reacting to content all at the same time.\n\nSharePlay handles keeping playback time synced at the platform level, so you can simply adopt and not have to worry about rolling your own.\n\nNow, this was a challenging problem to solve when it came to consuming content with SharePlay.\n\nWe wanted to allow people to experience the exact same moments with one another, even if they were halfway across the world.\n\nImagine seeing and hearing your friends laugh at something that hasn’t happened yet.\n\nSpoiler alert! So we built an entirely new playback-sync protocol with deep integration into the AVFoundation stack on the device.\n\nThat means someone hits play, and everyone in the group immediately starts playback at the same time.\n\nJump to a favorite scene and everyone else sees it too, allowing people to experience moments together in perfect sync, as if they were in the same room.\n\nThe magic behind this playback synchronization means we won’t retransmit your media in any way.\n\nEveryone will get your full-fidelity video because it’s playing right from your app and streaming from your servers as it always does.\n\nAnd by ensuring that all viewers are watching the highest-quality video, they’ll get an immersive social-viewing experience that never compromises the quality of your content.\n\nWe’re also doing some groundbreaking work to make communication feel natural during playback.\n\nWith smart volume, when people speak up during playback, we’ll automatically duck the audio of the content and bring it back up when appropriate.\n\nSo people can communicate via voice, video, and text naturally, just like they would if they were sitting in the very same room.\n\nAnd of course, it works beautifully with Picture in Picture, so the user can take your content along with them as they multitask on the device.\n\nSo that’s a brief overview of what we’re doing on platform.\n\nAnd finally, content. And that’s where you come in.\n\nWe want users to be able to enjoy the very best content that you've made available in your apps.\n\nWhen people are on a FaceTime call, they will expect to be able to go into your app and share your content.\n\nSharePlay is going to allow you to extend the touchpoints of your product and increase the times where your app is relevant to your users.\n\nAnd this will happen very organically.\n\nExisting users will evangelize for your app as they are using SharePlay with other people.\n\nNow that I’ve given you a brief overview of some of the key components of SharePlay, let’s turn our attention to Group Activities, a core concept of the framework.\n\nA Group Activity is an object representing something that can be shared and enjoyed with the people in the FaceTime call using SharePlay.\n\nLet me walk you through how a user would start a Group Activity in your app.\n\nWhile on a call, users can navigate to your app, and if you have adopted Group Activities, they will be notified that the app supports SharePlay.\n\nTo configure the activity you want to share, you first need to create an object that implements the GroupActivity protocol.\n\nOnce you’ve configured your activity, you call the prepareForActivation API to start sharing that activity.\n\nThis API will offer the user the option to share that activity with everyone in the FaceTime call or just keep it local.\n\nIf they decide to share with the group, Group Activities will notify you and let you join the GroupSession object.\n\nOnce users have joined the Group Session, their video will be kept in sync with the group, even when they play, pause, or seek.\n\nWhenever those events happen, Group Activities will automatically notify the user as shown here.\n\nAnd finally, once users are done, they can choose to end the activity for themselves or for the whole group.\n\nIt’s as simple as that! Now, let me hand it over to Bhaskar who's going to walk you through the rest of this presentation.\n\nBhaskar Sarma: Thank you, Pierre.\n\nHi, my name is Bhaskar, and I am an engineer on the FaceTime team.\n\nNow let’s talk about some of the high-level concepts and architecture behind this new framework.\n\nGroupActivities is a Swift-native framework that allows you to create shared experiences between users of your application when they are on a FaceTime call.\n\nAdditionally, the framework also has a tight integration with AVFoundation, which allows you to easily create shared video and audio playback experiences.\n\nBefore we go over the high-level concepts behind the API, I would like to talk about two key parts of the API, and these are the GroupActivity and GroupSession.\n\nGroupActivity is what your app uses to define the shared experience.\n\nIt holds the information that your application needs for the shared experience.\n\nFor example, if you are doing a shared audio or video playback experience, it might hold the URL of the content that is being played.\n\nOr your application might provide a custom shared experience.\n\nFor example, you could be providing a draw-together experience.\n\nIn that case, this would hold information about what the users are drawing.\n\nGroupSession is basically a representation of the group taking part in the shared experience.\n\nIt provides access to things like the participants in the group.\n\nAnd there are additional APIs in the framework that you can use along with the GroupSession to send and receive data across devices.\n\nPlease note the GroupSession is not meant to exchange large amounts of data.\n\nFor example, if you are creating a shared listening experience, the GroupSession is not used to exchange the contents of the song.\n\nInstead, this channel is used by AVFoundation to keep content in sync by exchanging the play, pause, or seek commands.\n\nAlso, the communication medium provided by GroupSession is end-to-end encrypted.\n\nThis means no one other than your application on the device can read the data that is exchanged over this channel.\n\nHere I have two phones on the screen.\n\nThe one on the left is my phone, and the one on the right is my teammate Pierre’s phone.\n\nAnd we are on a FaceTime call.\n\nAlso, we have a sample application called \"Awesome App\" on the screen, and the app is ready to start a shared experience between me and Pierre.\n\nSo in this case, the application on the device on the left is going to initiate the activity.\n\nThe first thing the application needs to do is create an object that conforms to the GroupActivity protocol.\n\nIn the example shown here, it is the AwesomeActivity object that conforms to GroupActivity.\n\nAs I had mentioned earlier, this object conforming to the GroupActivity protocol contains information about the shared activity.\n\nFor example, if you are creating a shared playback experience, it will have information about what content to play.\n\nOr if you are creating a custom experience -- like drawing something together -- it will have information about what to draw.\n\nOnce the app has created an activity, the next thing it needs to do is call prepareForActivation on the activity.\n\nThis causes the user to see a prompt asking for permission if they want to start an activity.\n\nWe would like to take user consent before starting an activity as we do not want to cause surprise to them.\n\nHence, this step is essential.\n\nAnd lastly, after the user has granted permission to start the activity, your app needs to call activate on the activity object.\n\nThis tells the system that your app wants to start a shared experience.\n\nNext, let’s talk about observing sessions.\n\nHere we have the same app that we were looking at earlier.\n\nThe application at this point has called activate on the activity object.\n\nYour application then needs to iterate over incoming sessions via an AsyncSequence on the GroupSession class.\n\nAnd then, when there is a session, the application gets handed the GroupSession object for the shared experience.\n\nPlease note that this is the same step your application would take whether it was the initiating app or on the remote device receiving the session.\n\nTo go into more details about initiating and observing group sessions, I would recommend you watch this WWDC session.\n\nNow that the application has been handed a session, it needs to set itself up before joining the session.\n\nSetting up the application before joining could mean different things based on the specific use case of the application.\n\nFor example, if you are creating a custom experience -- like drawing something together -- this could mean loading up the assets needed for the shared experience before your user can join the experience.\n\nHowever, if your application is providing a shared media-playback experience, then it would involve something like this.\n\nYour application will hook up the AVPlaybackCoordinator of your AVPlayer to the GroupSession so that its associated AVPlayer can sync content over the communication channel provided by the framework.\n\nKeep in mind, this syncing support is not just limited to AVPlayer, but you can use any other custom video player you have today and still get support for syncing via an AVDelegating PlaybackCoordinator.\n\nAnd finally, once you are done setting up your application, your application calls join on the GroupSession.\n\nOnce join is called, the system sets up the end-to-end encrypted channels between the apps running across different devices.\n\nAt this point, your application is ready to sync data and let your users take part in the shared experience.\n\nIf you're creating a custom experience, your application can use this channel to exchange data to keep your users in sync.\n\nThis channel is also used by AVFoundation to keep media playback in sync by exchanging playback state when the user hits play, pause, skip, et cetera.\n\nNote that this channel is not meant to be used to exchange large amounts of data.\n\nInstead, use it to exchange information to keep your users in sync.\n\nNow your application is in a session, and your users are enjoying the shared experience.\n\nThere is one more thing you can do to enrich the experience for your users, and that is post events using the framework.\n\nEvents allow your users to know what is going on in the shared experience.\n\nFor example, you can post events to let your users know when someone plays, pauses, or skips a track.\n\nPosting an event causes the system to present a notice telling your users about the event.\n\nIn our current API, we only let you post events for media playback experiences.\n\nYou get this for free if you use an AVPlayer or use an AVDelegating PlaybackCoordinator.\n\nHowever, if you are not using either of these, your app can still post events using the framework.\n\nTo learn more about providing your own custom experience and about posting events, I would recommend you watch this WWDC session.\n\nSo to wrap up, Group Activities is a brand new Swift-native framework that allows you to create shared experiences over FaceTime.\n\nThe framework is cross-platform and is available on iOS, macOS, iPadOS, and tvOS.\n\nIt has tight integration with AVFoundation that allows your app to provide shared media playback experiences.\n\nAnd finally, it also has support for playback syncing over the web on macOS.\n\nAnd with that, I would like to thank you for watching our session.\n\nAnd have a wonderful WWDC21! ♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Group Activities",
        "url": "https://developer.apple.com/documentation/GroupActivities"
      },
      {
        "title": "Supporting Coordinated Media Playback",
        "url": "https://developer.apple.com/documentation/AVFoundation/supporting-coordinated-media-playback"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10183/5/C850E07A-1E66-4641-9742-DE0DE2E3E29B/downloads/wwdc2021-10183_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10183/5/C850E07A-1E66-4641-9742-DE0DE2E3E29B/downloads/wwdc2021-10183_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10187",
      "year": "2021",
      "title": "Build custom experiences with Group Activities",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10187"
    },
    {
      "id": "10225",
      "year": "2021",
      "title": "Coordinate media experiences with Group Activities",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10225"
    },
    {
      "id": "10189",
      "year": "2021",
      "title": "Coordinate media playback in Safari with Group Activities",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10189"
    },
    {
      "id": "10184",
      "year": "2021",
      "title": "Design for Group Activities",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10184"
    },
    {
      "id": "10325",
      "year": "2021",
      "title": "Friday@WWDC21",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10325"
    }
  ],
  "extractedAt": "2025-07-18T09:23:39.751Z"
}