{
  "id": "10274",
  "year": "2023",
  "url": "https://developer.apple.com/videos/play/wwdc2023/10274/",
  "title": "Create 3D models for Quick Look spatial experiences",
  "speakers": [],
  "duration": "",
  "topics": [
    "Spatial Computing"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hop ♪ ♪ Hi, my name is Shuai Song, and I'm an engineer of AR Quick Look team.\n\nToday, I will walk you through how to create the 3D models for Quick Look spatial experiences.\n\nBefore we get into that, let's first go over what Quick Look is and how you can use it to present 3D content on our new platform.\n\nIn another session, \"Discover Quick Look for spatial computing,\" we have shown you this lovely 3D model of a room that we have created using our new Room Plan API.\n\nWe brought this model into Quick Look by just dragging a USDZ file out from our application window, which opens up a Quick Look preview right where we dropped it.\n\nFrom here, you can start to interact with Quick Look and my content by using familiar gestures.\n\nBefore we dive deeper into the story behind this model, let's talk a bit more about how the system presents 3D content in Quick Look.\n\nOn this platform, Quick Look displays a 3D model in a volume window.\n\nVolume windows have defined bounds to allow sharing them alongside with other apps.\n\nPeople can reposition volumes in space and they can view it from different angles.\n\n3D models are always placed at the center of the volume.\n\nWhen the model first appears, Quick Look will orient the volume window so that the content is directly facing you.\n\nFrom here, you can use the volume window bar below the 3D model to reposition content freely in your space.\n\nQuick Look will automatically adjust the size of the volume based on how people scale the model when they are in a preview session.\n\nIt's important to note that if your content is using animations, we suggest keeping all animations to be inside the defined bounds of the Quick Look volume.\n\nWe just covered the basics of how Quick Look presents your 3D content.\n\nThere are additional considerations when it comes to how Quick Look is using model size and scale.\n\nLet's take a look.\n\nWhen loading the 3D model, Quick Look will respect the metersPerUnit defined in the USDZ's metadata to determine the scale unit with respect to the real world.\n\nIn order to help people visualize the scale of the assets, Quick Look will try to present the model initially at a 100 percent scale if it is authored to be within a certain size range.\n\nLet's see an example.\n\nQuick Look imposes a minimum scale to ensure that you can enjoy all content, even when it came at a tiny scale, such as this tin car.\n\nQuick Look is also using an upper bound limit in case you are viewing very large objects to ensure they are not occupying too much space alongside your other apps.\n\nFor any objects with a size in between, such as this teapot, Quick Look will use a model's real-world size when initially launched in space.\n\nRemember, you can always view models at their real-world size by tapping on the button below your volume window.\n\nNow that we know how Quick Look handles the size of your model, let's look at two more things that Quick Look adds when it presents your content: ground plane and shadows.\n\nQuick Look will automatically show a ground plane and shadow below your model to give you a better understanding of the model's size and its position relative to the ground.\n\nBecause Quick Look is doing this work for you, we suggest that you do not add your own ground plane and shadows for your model.\n\nSo far, we covered the basics of how Quick Look will show your 3D content.\n\nLet's walk you through the agenda for the remainder of this session.\n\nFirst, we will look into a few ways to create 3D models.\n\nNext, we will talk about how you can inspect the visual quality of your content and make adjustments as needed.\n\nLastly, we will cover how to make sure your 3D content can render and run with great performance.\n\nLet's get started with preparing your 3D content.\n\nQuick Look accepts USDZ as its primary format to handle 3D models.\n\nUSDZ is at the heart of 3D content for Apple platforms and designed to be lightweight and optimized for shade.\n\nLet's take a look at how you can create USDZ files.\n\nThere are many ways to create a USDZ file.\n\nFirst, if you have previously created a USDZ file for iOS, you can use the same file for Quick Look on this new platform.\n\nIn case you want to create a new USDZ file from scratch, you can use professional digital content creation tools to create 3D content and then export out as a USDZ file.\n\nYou can also scan 3D models and create a USDZ file of real-world objects by using our RealityKit Object Capture API.\n\nObject Capture provides you with an end-to-end photogrammetry solution along with sample apps to help you create 3D models at different detail levels.\n\nObject Capture is supported on both iOS and macOS devices.\n\nFinally, if you're looking for a way to create a 2D or 3D floor plan over your house, we have you covered with our RoomPlan API.\n\nRemember how I mentioned there is a backstory to the 3D room model I showed you earlier? Let's dive into the workflow that our 3D designer, Jerry, has used to create this 3D model.\n\nFirst, Jerry starts to scan his room by using RoomPlan sample application.\n\nAfter only a short time, he can preview the 3D layout of his room, or export and drop a USDZ file right to his Mac.\n\nNext, Jerry imports the 3D model into a 3D content creation tool to bring his design concepts to life.\n\nHere is the result of that work.\n\nThis model looks great.\n\nYou can see some materials and textures got added to walls, floor, and some other room elements.\n\nNow, the room model that Jerry created is almost ready to preview in Quick Look.\n\nLuckily, there is a new tool called Reality Composer Pro that makes this next step really easy.\n\nPreviewing your 3D models for Quick Look is a really important step in your content creation workflow to inspect the real-world quality of your model and make adjustments as needed.\n\nLet's take a closer look.\n\nHere is the Reality Composer Pro with our 3D model loaded in the main view.\n\nBy simply clicking on this button located at the top-right corner in Reality Composer Pro, you can easily preview your 3D model in Quick Look right on your device.\n\nAnd here is the same 3D model running in Quick Look.\n\nOne thing we can notice now is that the initial model orientation does not look right.\n\nAs previously discussed, it is important to ensure that the most interesting part of the 3D model is presented facing towards you to create an engaging experience.\n\nLet's see how we can fix this.\n\nQuick Look is using a right-hand coordinate system.\n\nKnowing this, we can easily fix the orientation of our 3D model in our content creation tool, or right here in Reality Composer Pro.\n\nIn our case, we need to rotate the model on the vertical axis so that the living room in our model comes into view.\n\nYou can fix this by putting 90 degrees around y-axis here, just like this.\n\nLet's again use device preview from Reality Composer Pro to check out the changes to our model.\n\nNow the orientation is fixed, and we have a much better view on this great looking model.\n\nOK, let's explore this asset even further, and get a different perspective and see a few more details here.\n\nTo do so, you can use a pinch and drag gesture to rotate the 3D model and view it from different sides.\n\nThis gives me a really good view on the different parts of our room.\n\nYou can also use a two-hand pinch gesture to scale the model and see more details.\n\nNow that we have seen how to inspect your 3D model in Quick Look on device, let's talk about a few considerations for enhancing the visual quality of your content.\n\nWhen multiple objects are rendered in same location, they can overlap and appear as a single flickering object.\n\nTo reduce this problem, you can use 3D creation tools to optimize the mesh geometry either by removing the overlap or increasing the distance between the flickering objects.\n\nTry to avoid using high-frequency normal maps, since they remain results in aliasing issues that can create unwanted visual artifacts, especially in situations where you are in motion or up close to the 3D model.\n\nWhen rendering a small or thin object such as leaves, the system may not be consistently sampled over time under variable rasterization rates, which may cause flickering in the periphery.\n\nTo minimize this issue, you can try storing the fine geometry details into an opacity texture and then render it by using a geometry with a larger triangle grid instead.\n\nTo learn more about variable rasterization rates check out our session, \"Explore rendering for spatial computing.\" Next, let's turn our attention to performance.\n\nHere, we will look into the anatomy of Quick Look 3D content and what you can do to ensure a smooth and seamless QuickLook spatial experience.\n\nLet's get started.\n\nThere are many factors that determine the 3D performance of your content that gets rendered in Quick Look.\n\nThings like what's the file size of your 3D model, or the count and resolution of textures, or even the complexity of materials that you are using for your model.\n\nIn order to know where to start optimizing your 3D model for performance, you need to first identify potential limitations that might exist with your asset.\n\nTo help simplify this task, we have introduced some helpful new tools this year, which can significantly improve your workflow.\n\nLet's take a look.\n\nHere, we are back in Reality Composer Pro to show you the Statistics panel.\n\nThis panel provides you with a lot of helpful information about your 3D model characteristics, such as the number of triangles and the amount of texture memory being used with your content.\n\nAnother great tool at your disposal is RealityKit Trace.\n\nThis tool allows for even more advanced runtime profiling.\n\nRealityKit Trace provides insights into specific rendering pipeline.\n\nIt allows you to get more information into the individual rendering frames with your 3D content.\n\nBy analyzing several captured frames, RealityKit Trace can be used to identify and diagnose potential performance issues or limitations, and give you recommendations.\n\nRealityKit Trace keeps building with Xcode.\n\nTo use it for profiling your content in Quick Look, you need to attach it to the Quick Look process.\n\nFor more details on Reality Composer Pro and RealityKit Trace, please check out the sessions below.\n\nNow that we have looked at some of the tools to help you do profiling for potential performance limitations, let's go over some of the best practices to help you optimize 3D content for performance.\n\nEarlier, I mentioned the different factors that determines the performance of Quick Look's 3D content.\n\nNow, let's look at those one by one from the perspective of what you can do to optimize content accordingly.\n\nFirst up is optimizing your model for file size.\n\nSmaller file size usually results in quicker downloads and faster loading time, as you don't want the user to wait a long time before interacting with your content.\n\nThe trick here is try to find an optimized balance between asset quality and file size.\n\nFor instance, you could use less detailed textures or lower-quality audio sources.\n\nSometimes, assets are developed over several iteration cycles.\n\nOftentimes, this includes changes to underlying audio, animations, and textures linked to your assets.\n\nTo keep file size to a minimum, make sure to only include what's really used in the final package that gets distributed.\n\nFor example, older versions of audio files that are no longer being used for your scene should be removed from final assets before distribution.\n\nLastly, to ensure a better sharing experience, we recommend you keep your file size less than 25 megabytes.\n\nNext, let's look into how to optimize your 3D content geometry for performance.\n\nAgain, the trick is to find the right balance between showing great level of details and achieving great performance.\n\nIn case your model is using parts that are hidden or fully covered by another geometry, meaning they are never shown on the screen, it's OK to remove them to save on your performance budget.\n\nAlso, consider merging small meshes into a single larger one to reduce system loads.\n\nFor a single model, we recommend that you keep it under 200 mesh parts and fewer than 100k vertices.\n\nAlways keep in mind to balance your mesh detail with another asset in the scene.\n\nNext, let's look at textures.\n\nTexture can contribute to a lot of memory usage.\n\nAutomized textures consume less memory, which allows more assets to be loaded at the same time and helps complex scenes run smoothly.\n\nOne way to save on texture budget is by using grayscale for your noncolor inputs.\n\nIn some cases, you can even pack your grayscale images into individual channels over a color texture, allowing you to store multiple grayscale maps into a single texture.\n\nWhen possible, use constant values in your materials instead of loading them from texture.\n\nIf your model is only using a single PBR material, we recommend a maximum texture size of 2K by 2K and using 8-bit instead of 16-bit per channel textures.\n\nFinally, be sure to always spend your texture budget in areas that add most value and realism for your 3D model.\n\nNext up is materials.\n\nMaterials define the surface properties of a 3D model.\n\nThey specify how the system renders the model, including its color and whether your object appears with a shiny or reflective look.\n\nWhen it comes to optimizing your materials for 3D models, you can reduce your loading time by combining mesh parts to share with the same material.\n\nThe reason this helps is because when your 3D model has custom materials, the system has to compile them when it loads for the first time.\n\nBe sure to balance your material's complexity against the screen size.\n\nFor example, if you just need a tiny part of the screen to be transparent or have clear coat, it's more efficient to use a separate material just for that small area.\n\nYou always need to be mindful of overlapping transparency.\n\nRendering transparent objects in real time typically requires more calculations compared to the opaque ones, so only have overlapping transparency when you really need it.\n\nAlso, if you have baked lighting or some parts of your mesh do not even need lighting, we recommend using MaterialX Unlit surface to save real-time lighting computation.\n\nNext, let's look into physics.\n\nPhysics simulation sometimes can be computationally expensive, especially in cases where the physics system performs collision detection and simulates realistic effects, like gravity and springs.\n\nTo maximize your content performance by using physics, you can try to reduce the total number of colliders being used.\n\nSometimes you want your content to participate in physics simulation, but then your content includes entities that are not supposed to move or be affected by another object -- for example, a wall that will make a virtual ball bounce off.\n\nIn this case, we recommend using static colliders to reduce physics computations.\n\nNext, let's talk about animation.\n\nAdding animations to your 3D models is a great way to bring your content to life.\n\nSometimes, all you need is just an idle animation.\n\nIn this case, limit the number of weight per vertex for your animation to help create efficient and realistic animations.\n\nWhen you are trying to optimize geometry of your deformations or skinned animations, remember to follow the same geometry guidelines I provided previously.\n\nNext up is using particle systems with your content.\n\nThis is one of the most powerful tools for building sophisticated visual effects such such as realistic fire with smoke or exhaust from a rocket.\n\nIf used incorrectly, particles can be a bottleneck in your Quick Look 3D experience.\n\nFor this reason, we suggest you limit your usage of particle emitters and keep the number of onscreen particles to a minimum.\n\nOften, you can create similar visual effects with fewer particles.\n\nExperiment with simpler or smaller shapes and styles to achieve a similar effect, which will help reduce overdraw on the system.\n\nThat was quite a number of things we just went through.\n\nLet's summarize those recommendations for you.\n\nThere are many factors that count into performance of your Quicklook 3D content.\n\nThis new platform has been designed to let people engage with multiple apps and pieces of content that are running alongside each other.\n\nThis means that the performance of your content may even be impacted by other apps or scenes that people are doing.\n\nFor this reason, it's good practice to test your 3D model across different scenarios.\n\nAs I have shared in this session, there are a number of tools available at your disposal, whether you want to check the visual quality of your content or find limitations that could impact your 3D performance.\n\nThe sweet spot here is to find the right balance between having greater visuals and ensuring a smooth Quick Look viewing experience at the same time.\n\nTo learn more about Quick Look and how to make your 3D content available for viewing from apps and websites, please check out our other talk, \"Discover Quick Look for spatial computing.\" Thanks for watching! ♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10274/4/4A316968-7638-42C9-AAD2-2B26F8A8B1F5/downloads/wwdc2023-10274_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10274/4/4A316968-7638-42C9-AAD2-2B26F8A8B1F5/downloads/wwdc2023-10274_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10085",
      "year": "2023",
      "title": "Discover Quick Look for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10085"
    },
    {
      "id": "10086",
      "year": "2023",
      "title": "Explore the USD ecosystem",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10086"
    },
    {
      "id": "10100",
      "year": "2023",
      "title": "Optimize app power and performance for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10100"
    }
  ],
  "extractedAt": "2025-07-18T10:45:35.647Z"
}