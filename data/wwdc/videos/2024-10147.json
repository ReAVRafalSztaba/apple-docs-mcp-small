{
  "id": "10147",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10147/",
  "title": "Elevate your tab and sidebar experience in iPadOS",
  "speakers": [],
  "duration": "",
  "topics": [
    "Design"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hi there, welcome to \"Elevate your tab and sidebar experience in iPadOS.\" My name is Andy, and I'm a UIKit engineer. In this video, I'll guide you through enhancements to the tab bar and sidebar that will elevate your app and help you to put content at the forefront. Tab bars have been a core navigation pattern on iPhone and iPad since their debut. Tabs categorize the content of your app into different sections. Tab bars let people quickly switch between tabs while preserving the current state within each tab. For example, in the Clock app, there are four distinct tabs in the tab bar: World Clock, Alarms, Stopwatch, and Timers. In iPadOS 18, tab bars are refreshed with a new compact look that reduces the amount of unused vertical and horizontal space, bringing more content to the forefront.\n\nThe bar now sits at the top of the app, where it is closer to other navigation controls, making it easier to reach. It also shares a space with the top bar, allowing more of the app's content to be visible. Tabs should be consistent between iPhone and iPad to allow people to navigate easily no matter what device they are using. Avoid adding too many tabs. Too many choices make it harder for people to locate information within your app.\n\nLike tab bars, sidebars help people navigate your app by providing quick access to top-level destinations. They can surface top-level collections of content, like folders or playlists, to make navigation more efficient. On iPadOS 17 and earlier, sidebars were constructed using split views with an outline view in its leading column. New in iPadOS 18, tab bars can now optionally be displayed as a sidebar with several enhancements that will make your sidebar better than ever. When the sidebar is hidden, it animates back into the tab bar, bringing focus back to the content represented by the tab. People can navigate with the tab bar without needing to re-open the sidebar. Tab bars show top-level sections of your app, and sidebars can optionally surface more sections of the same app hierarchy. Adopting the tab bar and sidebar is great for content-focused apps with rich hierarchies.\n\nFor best practices on tab bar navigation, watch \"Explore navigation design on iOS.\" And to learn more about sidebars, watch \"Designed for iPad.\" Content-rich apps should not just be powerful, but also personal. The new sidebar supports customization features that allow people to show or hide individual tabs, or to reorder them. The tab bar allows people to add their favorite tabs through drag and drop, making it easy to personalize their experience.\n\nAdopting the tab bar with your existing sidebar brings together the best of both worlds, and enables new ways to customize and personalize your app. First, I'll go over features in the new tab bar and sidebar, and what to consider when adopting them. Next, I'll talk about supporting user customization to enable a more personal touch in your app.\n\nFinally, I'll cover how these features look on different platforms, and what you need to consider when building for a multi-platform experience. I'll start with tab bars and sidebars. When you compile with the iPadOS 18 SDK, your existing tab bar apps will be updated to the new look without any code changes. With this updated look, the tab bar shares a safe area with the navigation bar for a more integrated appearance.\n\nToolbar items from the navigation bar will automatically move to overflow if there is not enough room to show alongside the tab bar.\n\nNew in iOS 18, TabView has a new syntax in SwiftUI to make it easier to catch common errors at build time. You now declare a Tab struct with a title, image, and its content view.\n\nOptionally, include a selection value in the Tab to enable programmatic selection. This new syntax ensures that all tabs have the same selection type and that the type matches the TabView itself.\n\nNew in iOS 18, UIKit has new API to better describe your app hierarchy to UITabBarController. Create UITab to represent each top-level section of the app, and assign them to the tabs property on tabBarController. Changes made to the UITab instance are reflected immediately where the tab is displayed.\n\nTab bars prefer filled glyphs, and sidebars prefer outlined glyphs. When using symbol images for your tabs, use the outline variant.\n\nThe system will automatically select the filled variant when displayed in the tab bar. For example, in the Music app, the Browse tab uses the square.grid.2x2 symbol, which is an outlined glyph. In the tab bar, the filled variant is displayed without specifying a different image.\n\nSearch is a common feature in all apps and is immediately recognizable with its magnifying glass symbol. Using the search role Tab in SwiftUI or UISearchTab in UIKit, the system will configure a tab with a default title, image, and pinned placement. With the pinned placement, the tab is always available in the trailing edge of the tab bar.\n\nSidebars are great in iPad apps that have rich hierarchies to surface additional collections of content. The new Tab and UITab API enable apps to represent their app's structure for both the tab bar and sidebar. To enable the sidebar with TabView in SwiftUI: First, set the tabViewStyle to be sidebarAdaptable.\n\nNext, use TabSection to represent a group in the sidebar.\n\nTabs appear in the declared order in the tab bar. In the sidebar, sections are sorted after individual tabs. In this example, Search will appear before the two TabSections in the sidebar.\n\nTo enable the sidebar with UITabBarController in UIKit Set the tabBarController's mode to tabSidebar.\n\nSimilar to TabSections, use UITabGroup to represent a collection of child tabs that belong to a single group.\n\nGroups with dynamic content are updated by changing the group's children directly.\n\nYou can also add actions to sections in the sidebar to provide conveniences for common tasks, like creating a new Station in Podcasts.\n\nTabs are also drop destinations. This allows for direct additions into tabs in the sidebar or tab bar through drag and drop, like adding a photo into a collection.\n\nTo support drop destinations on Tabs in SwiftUI use the dropDestination modifier on the Tab with the receiver type.\n\nTo support drop destinations on UITabs in UIKit, implement two methods from UITabBarControllerDelegate. First, if the drop can be received, return a valid drop operation from operationForAcceptingItemsFromDropSession.\n\nNext, to receive the data, load it from the drop session from acceptItemsFromDropSession.\n\nBeyond actions and drop destinations, there are many new APIs to customize your sidebar. You can customize the sidebar's header and footer; or, add swipe actions or context menus to tabs. Additionally, you can show popovers from tabs, and they will be anchored to wherever the tab is shown. Describing your app with tabs is just the first step. Next, I'll go over adding user customization to make your app more personal.\n\nEnable customization to allow people to configure the sidebar to their specific needs. People expect to hide non-essential tabs or to rearrange groups in the sidebar. Customizations to the order and visibility are automatically persisted.\n\nTab bar customization is similar to the toolbar customizations feature introduced in iPadOS 16.\n\nItems in the tab bar can be customized through drag and drop, either by adding from the sidebar, or dragging them off. Tabs have a preferred placement to determine its customization and visibility preferences.\n\nThe tab bar contains three sections The fixed section is designed for important destinations of your app. They appear before other items and disallow customization. Items in the customizable section can be rearranged. Additional items can also be added from the sidebar through drag and drop.\n\nItems in the pinned section, like search, are always available in the trailing edge of the tab bar.\n\nYou can use a sidebarOnly placement to disallow a tab from being added to the tab bar, making it accessible only through the sidebar.\n\nTo enable user customization on a TabView in SwiftUI First, attach a TabViewCustomization to the TabView. This opts tabs within the TabView into various customization features. If you have other UI that should mirror sidebar customizations, read from TabViewCustomization to track the customized data.\n\nTo ensure that customization is persisted, add an AppStorage with an identifier onto the TabViewCustomization.\n\nNext, associate a customizationID to allow the tab to participate in customization.\n\nNow that I've enabled customization, I want to make sure that the most important tabs in the app, like \"Watch Now\" or \"Library\" are fixed and always available.\n\nTo disable customization on individual tabs, use the customizationBehavior modifier. This modifier allows you to control how tabs behave in the sidebar and tab bar. The \"Watch Now\" tab is important to the app's functionality, so I'll disable customization for both the sidebar and tab bar. Tabs that cannot be customized don't need a customizationID.\n\nSimilarly, tabs can also be hidden, allowing flexibility in what default destinations are surfaced in your app. Use the defaultVisibility modifier to hide tabs from the sidebar or tab bar.\n\nNow that I've disabled customization on \"Watch Now\" and \"Library\", it is now clear which tabs are important to the app, and which ones can be customized.\n\nTo enable customization of tabs in UIKit Set allowsHiding to true to allow non-essential tabs to be hidden. The current visibility can be determined by the isHidden property on UITab.\n\nWhen tabs are assigned to the tabBarController, their stored customizations are applied.\n\nUse the preferredPlacement property to control the tab's customization behavior and visibility in the tab bar.\n\nTo allow rearrangement of tabs within groups, set allowsReordering to true. The customized order is determined by the displayOrderIdentifiers property.\n\nWhen customization is completed, UIKit will call these two UITabBarControllerDelegate methods to notify you of customization changes to the visibility and order of tabs.\n\nCustomization allows people to easily create shortcuts to their favorite content, and fit both the sidebar and tab bar to their needs. These APIs make it easy to build tab view apps across Apple platforms. I'll go over some platform considerations and adjustments that you can make to build the best experience on each platform. In macOS Sequoia, if your TabView or TabBarController supports a sidebar, then it will adopt the standard Mac sidebar appearance. Tabs in the sidebar can be reordered through drag and drop, just like on iPad.\n\nOn visionOS 2, the tab bar displays in an ornament on the leading edge of the window for root tabs. With the new Tab and UITab API, the system will automatically select the filled variant for symbols when displayed in tab bar, just like on iOS.\n\nWith TabSection or UITabGroup, a sidebar will also be added to display alongside the group's content for secondary navigation within the group.\n\nOn tvOS 18, SwiftUI apps can use the TabView and TabSection API to adopt the new collapsible sidebar.\n\nWith Tab and UITab, it is now easier than ever to build incredible, easy-to-navigate, content-rich apps across Apple platforms. So what's next? Make sure your app looks great with the new tab bar. Explore how the new sidebar can elevate your app And support user customization to enable a new level of personalization in your app. Thank you for watching. Make sure to comment below if you prefer tabs or spaces.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "4:27",
      "title": "TabView updates in SwiftUI",
      "language": "swift",
      "code": "TabView {\n    Tab(\"Watch Now\", systemImage: \"play\") {\n        WatchNowView()\n    }\n    Tab(\"Library\", systemImage: \"books.vertical\") {\n        LibraryView()\n    }\n    // ...\n}"
    },
    {
      "timestamp": "4:58",
      "title": "UITabBarController updates in UIKIt",
      "language": "swift",
      "code": "tabBarController.tabs = [\n    UITab(title: \"Watch Now\", image: UIImage(systemName: \"play\"), identifier: \"Tabs.watchNow\") { _ in\n       WatchNowViewController()\n    },\n    UITab(title: \"Library\", image: UIImage(systemName: \"books.vertical\"), identifier: \"Tabs.library\") { _ in\n       LibraryViewController()\n    },\n    // ...\n]"
    },
    {
      "timestamp": "5:58",
      "title": "Search tab",
      "language": "swift",
      "code": "// SwiftUI\nTab(role: .search) {\n    SearchView()\n}\n\n// UIKit\nlet searchTab = UISearchTab {\n    SearchViewController()\n}"
    },
    {
      "timestamp": "6:41",
      "title": "Adding a sidebar in SwiftUI",
      "language": "swift",
      "code": "TabView {\n    Tab(\"Watch Now\", systemImage: \"play\") {\n        // ...\n    }\n    Tab(\"Library\", systemImage: \"books.vertical\") {\n        // ...\n    }\n    // ...\n    TabSection(\"Collections\") {\n        Tab(\"Cinematic Shots\", systemImage: \"list.and.film\") {\n            // ...\n        }\n        Tab(\"Forest Life\", systemImage: \"list.and.film\") {\n            // ...\n        }\n        // ...\n    }\n    TabSection(\"Animations\") {\n        // ...\n    }\n    Tab(role: .search) {\n        // ...\n    }\n}\n.tabViewStyle(.sidebarAdaptable)"
    },
    {
      "timestamp": "7:16",
      "title": "Adding a sidebar in UIKit",
      "language": "swift",
      "code": "let collectionsGroup = UITabGroup(\n    title: \"Collections\",\n    image: UIImage(systemName: \"folder\"),\n    identifier: \"Tabs.CollectionsGroup\"\n    children: self.collectionsTabs()) { _ in\n        // ...\n}\n\ntabBarController.mode = .tabSidebar\ntabBarController.tabs = [\n    UITab(title: \"Watch Now\", ...) { _ in\n        // ...\n    },\n    UITab(title: \"Library\", ...) { _ in\n        // ...\n    },\n    // ...\n    collectionsGroup,\n    UITabGroup(title: \"Animations\", ...) { _ in\n        // ...\n    },\n    UISearchTab { _ in\n        // ...\n    },\n]"
    },
    {
      "timestamp": "7:35",
      "title": "Updating a tab group in UIKit",
      "language": "swift",
      "code": "let collectionsGroup = UITabGroup(\n    title: \"Collections\",\n    image: UIImage(systemName: \"folder\"),\n    identifier: \"Tabs.CollectionsGroup\"\n    children: self.collectionsTabs()) { _ in\n        // ...\n}\n\n\nlet newCollection = UITab(...)\ncollectionsGroup.children.append(newCollection)"
    },
    {
      "timestamp": "7:45",
      "title": "Sidebar actions",
      "language": "swift",
      "code": "TabSection(...) {\n    // ...\n}\n.sectionActions {\n    Button(\"New Station\", ...) {\n        // action\n    }\n}\n\n// UIKit\n\nlet tabGroup = UITabGroup(...)\ntabGroup.sidebarActions = [\n    UIAction(title: \"New Station\", ...) { _ in\n        // action\n    },\n]"
    },
    {
      "timestamp": "8:12",
      "title": "Drop destinations in SwiftUI",
      "language": "swift",
      "code": "Tab(collection.name, image: collection.image) {\n    CollectionDetailView(collection)\n}\n.dropDestination(for: Photo.self) { photos in\n    // Add 'photos' to the specified collection\n}"
    },
    {
      "timestamp": "8:24",
      "title": "Drop destinations in UIKit",
      "language": "swift",
      "code": "func tabBarController(\n    _ tabBarController: UITabBarController,\n    tab: UITab, operationForAcceptingItemsFrom dropSession: any UIDropSession\n) -> UIDropOperation {\n    session.canLoadObjects(ofClass: Photo.self) ? .copy : .cancel\n}\n\nfunc tabBarController(\n    _ tabBarController: UITabBarController,\n    tab: UITab, acceptItemsFrom dropSession: any UIDropSession) {\n    session.loadObjects(ofClass: Photo.self) { photos in\n        // Add 'photos' to the specified collection\n    }\n}"
    },
    {
      "timestamp": "10:45",
      "title": "TabView customization in SwiftUI",
      "language": "swift",
      "code": "@AppStorage(\"MyTabViewCustomization\")\nprivate var customization: TabViewCustomization\n\nTabView {\n    Tab(\"Watch Now\", systemImage: \"play\", value: .watchNow) {\n        // ...\n    }\n    .customizationID(\"Tab.watchNow\")\n    // ...\n    TabSection(\"Collections\") {\n        ForEach(MyCollectionsTab.allCases) { tab in\n            Tab(...) {\n                // ...\n            }\n            .customizationID(tab.customizationID)\n        }\n    }\n    .customizationID(\"Tab.collections\")\n    // ...\n}\n.tabViewCustomization($customization)"
    },
    {
      "timestamp": "11:40",
      "title": "Customization behavior and visibility in SwiftUI",
      "language": "swift",
      "code": "Tab(\"Watch Now\", systemImage: \"play\", value: .watchNow) {\n    // ...\n}\n.customizationBehavior(.disabled, for: .sidebar, .tabBar)\n\n\nTab(\"Optional Tab\", ...) {\n    // ...\n}\n.customizationID(\"Tab.example.optional\")\n.defaultVisibility(.hidden, for: .tabBar)"
    },
    {
      "timestamp": "12:38",
      "title": "Tab customization in UIKit",
      "language": "swift",
      "code": "let myTab = UITab(...)\nmyTab.allowsHiding = true\nprint(myTab.isHidden)\n\n\n// .default, .optional, .movable, .pinned, .fixed, .sidebarOnly\nmyTab.preferredPlacement = .fixed\n\n\nlet myTabGroup = UITabGroup(...)\nmyTabGroup.allowsReordering = true\nmyTabGroup.displayOrderIdentifiers = [...]"
    },
    {
      "timestamp": "12:39",
      "title": "Observing customization changes in UIKit",
      "language": "swift",
      "code": "func tabBarController(_ tabBarController: UITabBarController, visibilityDidChangeFor tabs: [UITab]) {\n    // Read 'tab.isHidden' for the updated visibility.\n}\n\nfunc tabBarController(_ tabBarController: UITabBarController, displayOrderDidChangeFor group: UITabGroup) {\n    // Read 'group.displayOrderIdentifiers' for the updated order.\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Destination Video",
        "url": "https://developer.apple.com/documentation/visionOS/destination-video"
      },
      {
        "title": "Elevating your iPad app with a tab bar and sidebar",
        "url": "https://developer.apple.com/documentation/UIKit/elevating-your-ipad-app-with-a-tab-bar-and-sidebar"
      },
      {
        "title": "Enhancing your app’s content with tab navigation",
        "url": "https://developer.apple.com/documentation/SwiftUI/Enhancing-your-app-content-with-tab-navigation"
      },
      {
        "title": "Forum: UI Frameworks",
        "url": "https://developer.apple.com/forums/topics/ui-frameworks?cid=vf-a-0010"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10147/4/4B3986F3-DBA0-4C52-8A2E-783346D6D1BA/downloads/wwdc2024-10147_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10147/4/4B3986F3-DBA0-4C52-8A2E-783346D6D1BA/downloads/wwdc2024-10147_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10001",
      "year": "2022",
      "title": "Explore navigation design for iOS",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10001"
    },
    {
      "id": "10206",
      "year": "2020",
      "title": "Designed for iPad",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10206"
    }
  ],
  "extractedAt": "2025-07-18T09:35:30.619Z"
}