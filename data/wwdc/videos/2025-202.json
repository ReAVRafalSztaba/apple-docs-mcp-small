{
  "id": "202",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/202/",
  "title": "What’s new in Wallet",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "Hi, and welcome to What’s new in Wallet. I'm Pavel, an engineer on the Wallet team. In today’s session, I’ll walk you through the new features coming to Wallet this year, and how to adopt them for your passes. First, I’ll demonstrate how to add upcoming event information to your tickets, giving ticket holders easy access to all the events covered by their ticket. Then, I’ll show you how to upgrade your boarding passes with a brand new design that provides passengers with all the flight information they need throughout their journey. And to finish up, I’ll demonstrate how to use a new PKPassLibrary API that lets your iOS app automatically add passes to Wallet after a one-time authorization prompt.\n\nWe have a lot to cover, so let’s jump right into upcoming events.\n\nLast year, Wallet introduced Poster Event Tickets that use semantic tags to power a brand new design that provides useful context about an event, with a link to Maps for directions to the venue, and an Event Guide that shows rich details about the event and additional services in your app. This year, Poster Event Tickets will support Upcoming Events, allowing for easy access to multiple events using just one ticket.\n\nTapping an upcoming event opens a detail screen that mirrors the structure of a Poster Event Ticket. This screen can be configured with new artwork for the event, venue information, a full event guide, and other information specific to this event.\n\nUpcoming events leverage the Poster Event Ticket semantics introduced in iOS 18. For an overview of how these semantics work, I encourage you to watch the “What’s new in Wallet & Apple Pay” session from WWDC24.\n\nNow I’ll show you how to configure an upcoming event in your pass.json. Upcoming events are defined in a new  “upcomingPassInformation” array that contains all of the events Wallet should show in the upcoming events list.\n\nFor each object in the “upcomingPassInformation” array, set its type to “event” and include a unique identifier, a display name for the event, and the event’s date.\n\nThese fields are prominently displayed on the details screen for this upcoming event.\n\nThe upcoming event object follows the same structure that’s used for building a Poster Event Ticket.\n\nInclude a “semantics” object for information about the event and “additionalInfoFields” or “backFields” for custom properties that aren't covered by semantics.\n\nA new “URLs” object groups all of the actions related to this event, and an “images” object configures the images associated with the event. Let me show you how these objects configure the UI for an upcoming event. Starting at the top of the upcoming event screen, Wallet displays a header image that represents the event.\n\nBy default, the pass’s background image is displayed here. But you can add a custom “headerImage” to the upcoming event by specifying the URL where the image can be found.\n\nKeep in mind that upcoming events appear on iOS and watchOS devices, so it’s a good idea to provide separate images for different display scales, so that Wallet can select the best fit for the device it’s being viewed on.\n\nBelow the header, a tile displays the “venueName” and allows the ticket holder to view this venue in Maps. This leverages the same semantic structure used for passes. In my upcoming events semantics object, I’ve added the venue information using the “venueName”, “venuePlaceID”, and “venueLocation” semantics.\n\nThis semantics object is where I should add all semantics that describe this event, such as performers or seating information, enabling Wallet to surface those details in the relevant spots. For example, since I added seats for this upcoming event, Wallet lists them right on the details screen.\n\nSome semantics like venue name and seats are displayed prominently on this screen. Most others, populate the upcoming event guide, which works the same way as the pass event guide introduced in iOS 18.\n\nThe upcoming event guide is specifically for this upcoming event and gets populated by the contents of the upcoming event object. Event guides can be configured to show buttons for quick access to common actions, Weather tile that uses my event’s location semantics, a venue map, and other relevant semantics.\n\nTo set the URLs displayed here, I populate the URLs object in the upcoming event with the actions I want to show for that event.\n\nIn this case, I’ve provided a different set of URLs from the ones I show in my pass event guide. Remember that the upcoming event has the same structure as the pass, but doesn’t reuse the properties I defined for the pass. If I want my upcoming event guide and pass event guide to show the same URLs, I have to include the same values in my upcoming event object.\n\nThe venue map for upcoming events can be configured by specifying the URLs to fetch the image from, just like I demonstrated for the header image earlier. By default, Wallet will not reuse the venue map from the pass event guide.\n\nHowever, I can reuse the same venue map by setting the “reuseExisting” property to true. Note that if I don’t provide URLs or set “reuseExisting” to true, Wallet will not display a venue map for my upcoming event.\n\nUpcoming events are a great way to keep ticket holders informed of every event they can attend using their ticket.\n\nAs you explore adding upcoming events to your tickets, remember that they use the same structure as the event ticket. So a great place to start is by considering how each semantic and URL you provide on the pass should change for the upcoming event.\n\nWallet's documentation is a great resource to discover all the ways you can customize your tickets and upcoming events. You don’t have to define all upcoming events when you first create the pass. If you want to add upcoming events over time, send a pass update with the new upcoming events. The “isActive” property in your upcoming event lets Wallet know when the event is relevant, so it's important to update it at the start and end of events. If an event gets canceled or is no longer relevant to the ticket holder, consider removing it from your pass.json.\n\nThis ensures the upcoming event list only shows relevant and up-to-date information. Now, let’s take a look at the upgraded boarding passes launching this year and how you can take advantage of all the new features. Wallet boarding passes have helped millions of passengers navigate through airport security and board their flights. This year, boarding passes are getting a major upgrade with a new design that’s more dynamic and configurable than ever before. Upgraded boarding passes integrate with Apple’s flight service and stay up to date automatically so you don't have to update passes for every gate change or delay.\n\nAnd there’s a brand new live activity that provides easy access to key flight information and keeps passengers informed throughout their journey.\n\nLive activities can even be shared via Messages, allowing friends and family to track the flight on their own devices.\n\nFlight tracking is built into all upgraded boarding passes. When a passenger adds an upgraded boarding pass, Wallet subscribes to updates about the flight’s status and notifies the passenger of any changes to their flight.\n\nThese updates are propagated to both the boarding pass and live activity, so that passengers see up-to-date information about their flight on both surfaces.\n\nIn addition to flight tracking, the new boarding passes also feature deeper system integrations, with Maps for directions to the airport and FindMy for tracking luggage. And a new airline services and upgrades section gives passengers even more information about their trip.\n\nTapping into this section shows all the actions a passenger can take throughout their journey, along with a summary of information related to those actions. Let’s take a closer look at how these new features work and how you can configure them when you adopt upgraded boarding passes.\n\nStarting from the top of the boarding pass, the header displays the flight number and departure date. Upgraded boarding passes always show these fields here using semantics from your pass.json to identify the flight.\n\nWallet uses the airlineCode, flightNumber, and originalDepartureDate semantics to start tracking the flight using Apple’s flight service as soon as the boarding pass is added. If this is a codeshare flight, it’s most common to provide the marketing airline code and flight number. If you want passengers to see the operating flight number, you're welcome to include that instead. Both options will allow Wallet to find the correct flight in Apple’s flight service. Wallet will automatically update the times displayed on the pass using the data from Apple’s flight service. If you send a pass update as well, make sure to use the currentDepartureDate or currentArrivalDate semantics. The original dates should not be updated unless the flight has officially been rescheduled. Coming back to the pass, the next section displays the city name, airport code, and gate times for departure and arrival.\n\nYour departure and arrival date semantics should specify the gate times because boarding time is displayed as a separate prominent field on the boarding pass and is based on the originalBoardingDate and currentBoardingDate semantics. When Wallet updates departure and arrival times, boarding time is also automatically updated to reflect the new departure time.\n\nWhen a pass is added or updated, Wallet compares your boarding time and departure time semantics to calculate a boarding duration.\n\nThen, when the departure time changes in Apple’s flight service, the boarding time displayed on the pass will automatically update to maintain the boarding duration calculated from your semantics. So if a flight is delayed by three hours, for example, the boarding time will also be pushed back by three hours. When you update the pass with a new currentBoardingDate, Wallet will recalculate the boarding duration and update the time on the boarding pass if needed.\n\nThis is an example of how semantics give Wallet context about a flight but aren’t directly tied to the UI.\n\nWallet prioritizes showing up-to-date information to passengers and uses your semantics to decide how the data displayed on the pass should update over time. Let’s take a look at how semantics power other parts of the upgraded boarding pass UI.\n\nBadges are a new feature that let passengers and gate agents quickly identify important information right on the pass. Some of the semantics you include in your pass.json will be displayed under the passenger’s name.\n\nUpgraded boarding passes support up to two rows of badges and show information such as the ticket fare class, carry-on eligibility, or accessibility requests the passenger may have.\n\nWallet considers the semantics in your pass.json and lays out the appropriate set of badges automatically.\n\nAnd to help standardize common badges across airlines, upgraded boarding passes support IATA Special Service Request Codes via the “passengerServiceSSRs” semantic.\n\nThe text for most badges is defined by Wallet, but we've added a few semantics that allow you to fully control the label for information that’s unique to your airline. Let's take a look at an example.\n\nIn the semantics object, I’ve added the service animal and onboard wheelchair special service request codes using the “passengerServiceSSRs” semantic.\n\nLet’s add a couple of custom semantics as well, such as the ticket fare class and the passenger's airline status.\n\nWhen I bring up the boarding pass again, I see the new badges based on my semantics. Notice how the first two badges use the strings I provided, but the special service request codes show strings provided by Wallet.\n\nBadges are a great example of how Wallet uses semantics. In my code, I didn’t define an explicit badges object with each field. Instead, by providing the relevant context about the passenger, Wallet was able to create badges that prioritize the most important information. Using semantics this way allows Wallet to fit more information on the boarding pass without sacrificing usability. The new schema exposes the same set of semantics to all airlines to ensure passengers see a consistent experience every time they fly.\n\nI encourage you to check out our developer documentation to discover even more semantics you can provide for upgraded boarding passes.\n\nNow I want to show you how to configure the airline services and upgrade screen with actions that bring users back into your app. When you include URLs in your pass.json for actions like managing a ticket, purchasing in-flight Wi-Fi, or seat upgrades, Wallet populates the services and upgrade screen with buttons for those actions, along with any semantics that provide additional context about that action.\n\nURLs are defined as top-level properties in your pass.json.\n\nUpgraded boarding passes support a range of common actions passengers can take before, during, and after a flight.\n\nInclude URLs for all of the actions you want passengers to see on their boarding pass, and set up your app to open directly to the screen that lets the user complete each action.\n\nAnd remember that Wallet shows additional context for each action, so make sure you fill out as many semantics as you can to provide a rich, complete experience on this screen.\n\nLet me demonstrate with another example.\n\nI can provide a “purchaseLoungeAccessURL” to display a button for purchasing a lounge pass. But that button looks a little lonely and could benefit from some more context. If I include the “airlineLoungePlaceID” semantic, Wallet will show a Maps preview of the lounge’s location. By providing that extra context, I greatly improved the user experience and made the UI feel complete.\n\nThat was just a quick look at how the services and upgrades screen is configured. The key thing to remember is that Wallet uses URLs and semantics from your pass.json to build the UI.\n\nOur developer documentation goes into much more detail about all of the available semantics and URLs, so be sure to check it out and add all of the actions your app supports.\n\nBefore wrapping up, I want to discuss device compatibility for upgraded boarding passes. All of the new features I’ve shown you are supported on devices running the latest versions of iOS and watchOS. The schema for upgraded boarding passes adds new properties without interfering with the existing boarding pass schema.\n\nPassengers might have devices running previous operating systems, where Wallet doesn’t use these new properties. So the best way to adopt upgraded boarding passes is to add semantics and URLs to your existing boarding passes, to give passengers a great experience no matter what operating system version they have.\n\nSo far, I’ve shown you how to make event tickets and boarding passes more dynamic once they’re in Wallet. Now, I want to show you how to make adding these passes to Wallet feel seamless with a new PKPassLibrary API. Adding a pass to Wallet has always required user interaction. To add a pass to Wallet, your app can present an AddPassesViewController that shows a preview of the pass and requires an extra tap to add the pass. Alternatively, you can call the addPasses API on PKPassLibrary, which displays an alert before adding the pass to Wallet.\n\nThese options are great for users who don’t frequently add passes to Wallet because it gives them full control over when the passes should be added. But you might have users who regularly add passes to Wallet from your app. Frequent flyers, for example, might add several boarding passes a week, and reviewing each one individually might not be valuable to them. New this year, you can request the background add passes capability, which prompts the user to allow your app to add passes to Wallet automatically.\n\nThen use the addPasses API, and your passes will be added in the background without additional prompts. Wallet will simply send a notification to alert the user that your app has added a pass. Adopting the new API is only a few lines of code. If you’ve ever requested permission to send push notifications, this will feel quite familiar. Here I have a SwiftUI view that shows an AddPassToWallet button. The first step is to request the background add passes capability. I’ll do that in the button’s completion handler to prompt the user after they add their next pass.\n\nThis is an asynchronous call, so I wrap my code in a Task, and call requestAuthorization (for: .backgroundAddPasses) on PKPassLibrary.\n\nWhen the completion for my button runs, the system prompts the user to grant this capability to my app.\n\nRemember that this is a one-time prompt, so calling it after the user has already made a selection won't prompt them again.\n\nNow, let’s add some code to check our authorization and add the pass automatically.\n\nWhen my view loads, I can check my authorization status using the authorizationStatus (for capability:) on PKPassLibrary.\n\nThen if I’m authorized, I call PKPassLibrary.addPasses to add my pass.\n\nNote that this API accepts an array of passes, so I can add several passes at once. And that's all there is to it. With these few lines of code, my app is now able to add passes automatically. Let's recap how the new API works. Request the background add passes capability with the new requestAuthorization (for capability:) API. Remember that you can only request authorization once, so it’s a good idea to use this API when you’re confident that the user will accept.\n\nIf you call this API more than once, it'll simply return your current status. After you request authorization, a new item will appear in the Settings app, allowing users to toggle this capability for your app at any time. You can check your current authorization without showing a prompt by calling authorizationStatus(for capability:) And to leverage the background add passes capability, use the addPasses API when you add passes to Wallet. And that’s what’s new in Wallet! The new features launching this year make event tickets and boarding passes more dynamic than ever and allow your iOS app to seamlessly integrate with Wallet. Take advantage of the new features by adopting the new properties in your boarding passes and event tickets.\n\nThe documentation goes into much more detail, so be sure to check it out. Because these are new features, you’ll want to make sure you continue to support previous operating system versions to give customers a great experience regardless of the operating system version they’re on. And remember, we've got a great API that makes it convenient for frequent Wallet users to add their passes, so be sure to take advantage of the new background add passes capability whenever possible.\n\nThanks for watching, and have a great WWDC.",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Human Interface Guidelines: Wallet",
        "url": "https://developer.apple.com/design/human-interface-guidelines/wallet"
      },
      {
        "title": "PassKit (Apple Pay and Wallet)",
        "url": "https://developer.apple.com/documentation/PassKit"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/202/5/8fe1fffa-e36b-4be6-a752-5ac3a921f7fa/downloads/wwdc2025-202_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/202/5/8fe1fffa-e36b-4be6-a752-5ac3a921f7fa/downloads/wwdc2025-202_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "201",
      "year": "2025",
      "title": "What’s new in Apple Pay",
      "url": "https://developer.apple.com/videos/play/wwdc2025/201"
    },
    {
      "id": "10108",
      "year": "2024",
      "title": "What’s new in Wallet and Apple Pay",
      "url": "https://developer.apple.com/videos/play/wwdc2024/10108"
    }
  ],
  "extractedAt": "2025-07-18T09:10:01.438Z"
}