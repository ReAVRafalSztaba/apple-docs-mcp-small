{
  "id": "10066",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10066/",
  "title": "What’s new in Game Center: Widgets, friends, and multiplayer improvements",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services",
    "App Store, Distribution & Marketing",
    "Essentials",
    "Graphics & Games"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  Ally Kazmucha: Hi, I'm Ally, and I'm the engineering program manager for Game Center.\n\nI'm really excited to spend some time walking you through all the improvements we're making this year.\n\nWe also launched some great new features this spring like Friends API, which we'll be talking to you about as well.\n\nBut before I get into some of those details, I'd like to briefly talk about some of the core features Game Center offers, many of which were completely refreshed last year.\n\nGame Center is Apple's own social gaming network.\n\nAs a developer, you can take advantage of whichever Game Center features make sense in your game through our GameKit framework.\n\nFor players, Game Center Is a single gaming ID that allows them to instantly compete on leaderboards, track achievement progress, play multiplayer games together, and even check out their friends' profiles.\n\nHelping players find and discover great new games is also one of the primary goals of Game Center.\n\nWe added quite a few features in iOS 14 to help with game discoverability, and we're adding even more this year.\n\nGames are all about community, and keeping up with what our friends are playing is a great way to discover new titles we may have otherwise missed.\n\nThat's why we integrated Game Center directly with the App Store last year.\n\nWe now show more information on what your Game Center friends are up to, through both the Games and Arcade tabs of the App Store.\n\nLet's take a closer look.\n\nWhile browsing the Arcade tab, I can see that several of my Game Center friends are playing a few games that look interesting to me, including a new game called \"Wonderbox.\" Let's check out the product page to learn more.\n\nNot only can I read more about the game itself on the product page, I can also see a complete list of my Game Center friends who are already playing that particular game.\n\nTapping on one of them brings up their Game Center profile.\n\nFrom here, I can see even more of the games they've been playing.\n\nAnd if I see one I like, I can download it directly from their profile.\n\nThe Friends Are Playing section will automatically appear on the product page for all Game Center-enabled games.\n\nThere are, of course, opportunities outside of the App Store to check out a friend's profile as well.\n\nFor example, I can tap on a friend within any leaderboard -- like shown here -- to bring up their profile.\n\nThese are all great opportunities for players to find new games to play.\n\nAnd there's nothing you have to do to make your game eligible either.\n\nAll Game Center-enabled games automatically show up in both Friends Are Playing and Recently Played.\n\nThis fall, we're also adding two new Game Center-powered widgets.\n\nThe first is -- you guessed it -- Friends Are Playing.\n\nWe think this is going to be an even easier way for players to keep up with and discover more of the games their friends are playing, right from their home screen.\n\nThe second widget is called Continue Playing.\n\nThis widget automatically resurfaces games you've already launched and played.\n\nSo you can jump right back in where you left off with a single tap.\n\nAnd if you're on an iPad, both of these Game Center widgets support the new larger format as well.\n\nAnd just like Friends Are Playing and Recently Played, there's no additional code needed or feature to adopt.\n\nIf your game supports Game Center, it's automatically included.\n\nAnd since friends are such an important part of social play, we're making some significant improvements to both our friending and multiplayer flows too.\n\nFirst up, friends.\n\nGame Center friend requests will continue to be sent through Messages just like they are today.\n\nBut just in case you miss one, we've added a brand-new Friend Requests inbox to let you manage them all in one place.\n\nWe've also made some great improvements to the flow within Messages, including support to send and receive friend requests on MacOS.\n\nBut as a developer, you're probably most interested in what you can do with Game Center friends.\n\nAnd that's where Friends API comes in.\n\nFriends API gives you privacy-friendly access to a player's Game Center friends, so you can create all kinds of unique experiences within your game.\n\nWhether it's showing what level my friends are on in a progression map, or letting players launch missions together, all of these can now be accomplished by adopting Friends API.\n\nChee Han will be walking you through how to do just that.\n\nSo now that you know about some of the ways Game Center can help improve discoverability and connect players together outside of your game, let's look at some of the benefits Game Center offers within your game.\n\nIn iOS 14, we introduced a brand-new player dashboard you can add to your game through the Access Point API.\n\nWe also shipped an entirely refreshed UI -- virtually no screen went untouched.\n\nWith vibrant colors that match the underlying tones of your game, this refresh was meant to feel at home in any game.\n\nYou can also choose to use a combination of our native Game Center UI alongside any custom UI that best fits within your game.\n\nFor example, showing current leaderboard scores within a level selection screen -- or even as a live indicator while playing a level -- are all examples that make sense to be themed in a UI that matches your game.\n\nWhile not in a level, you can still choose to give players access to all their Game Center data through the access point -- like shown here.\n\nThis just gives your players even more ways to keep up with and interact with their Game Center rankings and achievements.\n\nAnd if your game supports multiplayer, we've got some great updates here as well.\n\nThis year, we continued to focus on helping people connect and start playing a game together as fast as possible.\n\nNow, when you start a multiplayer match, our new suggestions section also surfaces your existing Messages groups.\n\nTap a group, and the invite is sent within the Messages thread you already have going.\n\nWe also remember the Game Center friend groups you’ve played with and suggest them as well.\n\nSo one tap gets you back in the game with the same friends again.\n\nWe're also introducing a brand-new multiplayer API called \"Fast Start.\" Zhehong will be walking you through some of the benefits of Fast Start and how you can implement it within your game.\n\nFinally, we've also added controller support for all Game Center UI on both iPhone and iPad.\n\nThe best part: there's zero new API to adopt or versioning in Xcode required on your part.\n\nJust press the Home button on any supported controller and the Game Center dashboard is instantly presented.\n\nPress it again and you're back in the game.\n\nWhile the Game Center dashboard and all the sections within it will be navigable by default, you will need to add controller support for your own UI.\n\nAnd if you're interested in what else is new with controllers, be sure to check out the session titled \"Tap into virtual and physical game controllers\" to learn more.\n\nHere's a look at the rest of the session.\n\nFirst up, Chee Han is going to walk you through our friending improvements, including a detailed walk-through of Friends API and how you can implement it to leverage Game Center friends within your game.\n\nAnd to wrap up the session, Zhehong will fill you in on everything multiplayer, including a walk-through of how we've streamlined the invite flow and how you can implement our new Fast Start API to speed up the process even further.\n\nTo get you started on Friends, here's Chee Han.\n\nChee Han Lim: Hi, I'm Chee Han.\n\nI'm an engineer on the Game Center team.\n\nOne of the best parts of playing games is being able to share those experiences with your family and friends.\n\nFor some of us, it's about the competition; and for others, it's about the connection.\n\nGame Center friends allows you to do just that.\n\nSo there are two capabilities that we will be focusing on today.\n\nFirst, we have made it easy to enable players to send friend requests within your game.\n\nSecond, we have introduced some new APIs for you to leverage your player's friends list through Friends API.\n\nFirst, let's talk about sending friend requests.\n\nWhen your game is better when played together, it might make sense to encourage your player to make Game Center friends within your game.\n\nWe have introduced a new API to let you do just that.\n\nIn your game, you can have an Add Friends button on your UI, where we recommend you to use SF Symbols as a button image.\n\nWhen your user presses on the button, you can call our friending API to allow your player to add friends within your game.\n\nLet's see how we can do that in code.\n\nWhen you call presentFriendRequestCreator FromViewController API, a message sheet will be presented with a real controller that you have passed in.\n\nAfter your player finishes sending the friend request, we will dismiss the sheet and return the control to your app with an optional error.\n\nThat's it! With a few lines of code, you will be able to provide your player the opportunity to send friend requests without leaving your game.\n\nAnd now, let's take a look at what you can do with all those Games Center friends.\n\nThe second feature we have added this spring is privacy-friendly API access to Game Center friends.\n\nWhen a player launches your game and tries to use functionality for the first time that requires Game Center friends access, they will be prompted to allow or deny access to their friends list.\n\nIf allowed, we will return you a list of their bi-directional friends, which means the list will only contain their friends who have also granted access to your game.\n\nWe will also sync this permission for you across all their devices, and the user will only need to approve your request once.\n\nSo what kind of experiences can you create if your player allows you access to their friends list? Well, this will allow you to do things like, show what level my friends are on within a progression map, let me launch a mission together with my friends in the lobby, show a friends-only recurring leaderboard while we are playing a multiplayer game together, and much more.\n\nLet us walk through what Friends API will look like from your player's perspective.\n\nYour game will call an API to ask for permission to access the player's friends.\n\nAnd the player will see a familiar system prompt where they have to decide to allow or deny your request.\n\nAnd you will have the option to explain to the player why you are requesting friends access.\n\nOnce your player approves your request, we will return the list of friends who have also granted access to your game.\n\nIn this example, we will use a leaderboard to keep track of players' progression with the score that I have submitted to this leaderboard.\n\nWith the score submitted, I can utilize Friends API to show my friends on a progression map next to the level corresponding to their leaderboard scores.\n\nThis may look something like this within your own game UI.\n\nYou can see that my friends' progression is populated on the map, where I will know exactly where they are in my game.\n\nLet's jump into how to create this UI with code.\n\nWe will need to do some setup before you can call Friends API.\n\nFirst, you'll need to add NSGKFriendListUsageDescription to your info.plist.\n\nThis description will be displayed as part of the permission prompt to our player, as seen in the previous slide.\n\nIf the description is missing, all Friends API calls will result into an error.\n\nOnce the description is set, you can now call the two new APIs in GKLocalPlayer class.\n\nTo check for friends list access, you should call loadFriendsAuthorizationStatus in GKLocalPlayer class.\n\nYou may want to call this in your app’s applicationDidFinishLaunching, and if the state is not determined, you may want to delay loading players' friends list until there is a good moment for you to show the permission prompt.\n\nThis will allow your player some time to make a decision once the prompt is presented.\n\nYou will receive GKFriendsAuthorizationStatus in one of the following four states within a completion block.\n\nYou can refer to GKLocalPlayer header for a detailed explanation of each state.\n\nWhen returned state is denied or restricted, if you have previously collected data for this player, you should delete the collected data on your end.\n\nIf your player chooses to grant you access with an authorized state, you will then be able to proceed to load their friends list by calling loadFriends API.\n\nLet's take a look at that now.\n\nIn this code, we will leverage the power of Swift async call, to simplify our calls to GameKit framework.\n\nWe will start with an async method with the name loadFriendsOnProgressionMap.\n\nFirst, we will call loadFriends API in GKLocalPlayer class.\n\nGameKit will return your player’s friends as an array of GKPlayer objects.\n\nNext, we will load our progression leaderboard from GameKit with the leaderboard ID \"progress.\" Once we have the leaderboard object, we can then pass in your player’s friends to loadEntries method.\n\nYou will obtain the score they have on that leaderboard, which is used to keep track of which level they are in now.\n\nWith that, we have all the information we need to display your player's friends on the progression map.\n\nAnd that's it! You have now successfully integrated Friends API in your game and displayed your player's friends on a progression map.\n\nWe are super excited to see all the amazing experiences that our developer community will come up with using this new feature.\n\nAnd with that, I would like to turn it over to Zhehong.\n\nHe will tell you all about the great changes we have made to multiplayer this year.\n\nZhehong An: Thanks, Chee Han.\n\nHi everyone, I am Zhehong from the Game Center team.\n\nI cannot wait to introduce all the new features and improvements in Game Center multiplayer this year.\n\nWe have made significant improvements to Game Center multiplayer, as Ally mentioned previously.\n\nThe main purpose behind all of these changes is to help your players find people to play with and get into a game as fast as possible.\n\nGame Center multiplayer UI allows many different ways for players to find people to connect and play with.\n\nThis includes automatching with other players or sending invites at once to multiple friends, contacts, nearby players, a phone number or an email address, Game Center groups, or Message groups.\n\nIt dramatically reduces your efforts to show different people from different sources.\n\nAs you might know, automatching is the mechanism which helps your players find each other from Game Center's matchmaking pool.\n\nI will walk through the other new concepts in the following slides.\n\nTo bring better suggestions to the players, we have introduced the Suggestions Shelf containing a list of people from within and without Game Center that your players might want to invite.\n\nIt contains nearby players, Game Center groups, and Message groups.\n\nA Game Center group, which is a new concept we have introduced this year, is a group of players you recently played with in real-time or turn-based matches.\n\nWe believe this new feature will make it fairly easy for players who want to play a game repeatedly with a certain group of people, because this makes it possible to select all the players in that group with just a single tap.\n\nAnd we are leveraging the people you already talk to on a regular basis over iMessage with Message Groups.\n\nA single tap will select an entire Message Group, and the invitation uses your existing group chat.\n\nNow, you can not only send invites faster via Messages, but also chat about a game afterwards.\n\nOnce you have selected the people you wish to invite, tap the Send button at the top right, and you will see them in the lobby.\n\nWe now have the capability for adding or removing players even after the initial invitations have gone out.\n\nFor example, you may want to remove some invited players who are not able to respond, but you don't want to remove other players who have already accepted.\n\nSo, we have made it possible to individually remove invited players by tapping on the X button in their player slot, as long as they have not accepted yet, or they leave the game after they have accepted.\n\nAnd players can continue inviting more people to your game, which gives them a lot of flexibility to quickly craft the right group of people to play with.\n\nAll of this greatly simplifies and streamlines the experience by making it much easier for players to play your multiplayer game faster and easier than ever.\n\nMaking it easy for players to invite people they know in turn helps increase your game's discoverability.\n\nAs you can see, if you leverage Game Center multiplayer UI, you get all these awesome features for free.\n\nTo make it even quicker to start a multiplayer game, we added a new API this year called \"Fast Start.\" If you adopt Fast Start, the game initiator will have the choice to either wait for everyone to be connected or begin a game as soon as the minimum number of invited players have connected.\n\nIt gets players much faster from Game Center UI back into your game UI.\n\nMeanwhile in the background, Game Center will continue connecting the rest of the players and automatching any unfilled player slots.\n\nAll these players will be able to join your game when they connect.\n\nIf your game can support players joining a multiplayer session at different times, then you can take advantage of Fast Start via Game Center UI.\n\nYou can utilize this feature to make some warmup game scenes as well.\n\nThe best way to see this in action is to show you an example.\n\nHere, we are using a game called \"The Coast,\" which leverages Fast Start.\n\nYou will see how powerful it is to utilize Fast Start to build your game.\n\nFirst, I present GKMatchmakerViewController with a GKMatchRequest, configured with 2 minPlayers and 5 maxPlayers.\n\nIn this way, the game can start as long as two players are ready, including the local player.\n\nThen I tap the Invite Friends button to launch the player picker.\n\nI pick the players I want to invite, and I wait for them to respond.\n\nAs you can see, once an invitee accepts, the Start Game button is highlighted, so I can either start a game or wait for other players to join.\n\nI decide to start, and the gameplay begins as soon as the matchmaker view controller is dismissed.\n\nSince this game initially started with two players, you can see two boats.\n\nMeanwhile, Game Center is still connecting in the background.\n\nOnce the third player joins, the game is notified, and we bring up the third boat.\n\nBecause we also had two automatched slots, Game Center is still automatching in the background.\n\nAfter the matchmaking process is finished, two automatched players join.\n\nNow, we have a full set of five players for this game.\n\nAs you can see, by adopting Fast Start, different players will be able to join the same game session at different times.\n\nFinally, let's look at the code you need to add to accomplish what we have just walked through together.\n\nTo construct a GKMatchmakerViewController with Fast Start mode turned on, simply set its property canStartWithMinimumPlayers to \"true\".\n\nPlease note: the minPlayers of the GKMatchRequest is the minimum number of players that the gameplay in your game needs to start.\n\nSet the delegate after you get the GKMatch instance, so that you can know the connection status of the players in the match.\n\nAnd didChangeConnectionState is the delegate method where you can handle players who join later.\n\nOn the invitee side, just present the GKMatchmakerViewController initialized with the GKInvite instance.\n\nThis is probably the same as what you are doing today.\n\nAnd don't forget to set the matchmakerDelegate.\n\nThat's pretty much about it.\n\nWe are excited to see how you adopt not only Fast Start, but all the new features and improvements we are providing this year for multiplayer.\n\nTo recap, here is what we covered today.\n\nWe introduced how Game Center helps increase the discoverability of your game.\n\nAfter that, we talked about Friends API along with some general improvements to Friends.\n\nThen all the multiplayer features and improvements we just talked through help your players play multiplayer games with people they know, as fast as possible.\n\nAnd also, we have better support for controllers this year.\n\nAt the bottom, you will see another two sessions which you might be interested in.\n\nThey're about recurring leaderboard and game controllers.\n\nThank you all for watching.\n\nEnjoy your week at WWDC.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "8:23",
      "title": "Friending API",
      "language": "swift",
      "code": "// Call Friend Requests API to present friend request view from a view controller, when player click on Add Friends Button in your game\nlet error = GKLocalPlayer.local\n.presentFriendRequestCreatorFromViewController(using: navigationController)\n\nif error != nil {\n    print(\"Fail to send friend request with error: \\(error!.localizedDescription).\")\n}"
    },
    {
      "timestamp": "11:47",
      "title": "loadFriendsAuthorizationStatus",
      "language": "swift",
      "code": "// Checking authorization\nGKLocalPlayer.local.loadFriendsAuthorizationStatus { (authorizationStatus, error) in\n    guard error == nil else {\n       // Error handling\n       print(“Fail to load friends list with error: \\(error!.localizedDescription).”)\n       return\n    }\n\n    // Handle GKFriendsAuthorizationStatus\n    switch authorizationStatus {\n      case .notDetermined:\n         // Player have not made a choice on friends list sharing\n      case .denied:\n         // Player have denied your request to access their friends list\n      case .restricted:\n         // You should delete collected player data from your end\n      case .authorized:\n         // Player have authorized your request to access their friends list\n    }\n}"
    },
    {
      "timestamp": "12:53",
      "title": "loadFriends",
      "language": "swift",
      "code": "func loadFriendsOnProgressionMap() async {\n    do {\n        let friends = try await GKLocalPlayer.local.loadFriends()\n        if friends.count > 0 {\n            let leaderboards = try await GKLeaderboard.loadLeaderboards(IDs: [“progress\"])\n            if let leaderboard = leaderboards.first {\n                let entries = try await leaderboard.loadEntries(for: friends, timeScope: .allTime)\n               for entry in entries.1 {\n                    let avatar = try await entry.player.loadPhoto(for: .normal)\n                    let name = entry.player.displayName\n                    let friendLevel = entry.score\n                    // Display player on progression map\n                }\n            }\n        }\n    } catch {\n        print(\"Error: \\(error.localizedDescription).\")\n    }\n}"
    },
    {
      "timestamp": "20:17",
      "title": "Enable Fast Start Mode",
      "language": "swift",
      "code": "// Set canStartWithMinimumPlayers to true to enable Fast Start mode\nlet request = GKMatchRequest()\nrequest.minPlayers = 2\nrequest.maxPlayers = 6\nrequest.playerGroup = 2021\n\nlet vc = GKMatchmakerViewController(matchRequest: request)\nvc.canStartWithMinimumPlayers = true\nvc.delegate = self\nself.present(vc, animated: true, completion: nil)"
    },
    {
      "timestamp": "20:39",
      "title": "Handle Players Who Join The Game",
      "language": "swift",
      "code": "// Set the GKMatch delegate and present your game scene when didFindMatch is called\nfunc matchmakerViewController(_ viewController: GKMatchmakerViewController, didFind match: GKMatch) {\n    viewController.dismiss(animated: true, completion: nil)\n    let gameVC = GameSceneViewController()\n    gameVC.match = match\n    match.delegate = gameVC\n    self.present(gameVC, animated: true, completion: nil)\n}\n\n// Add players who join later by implementing didChangeState delegate\nfunc match(_ match: GKMatch, player: GKPlayer, didChange state: GKPlayerConnectionState) {\n    if state == .connected {\n        self.addPlayer(player)\n    }\n}"
    },
    {
      "timestamp": "20:54",
      "title": "Present GKMatchmakerViewController on The Invitee Side",
      "language": "swift",
      "code": "// On the invitee side, present GKMatchmakerViewController with the invite\nfunc player(_ player: GKPlayer, didAccept invite: GKInvite) {\n    if let vc = GKMatchmakerViewController(invite: invite) {\n        vc.matchmakerDelegate = self\n        self.present(vc, animated: true, completion: nil)\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Finding multiple players for a game",
        "url": "https://developer.apple.com/documentation/GameKit/finding-multiple-players-for-a-game"
      },
      {
        "title": "GKLocalPlayer",
        "url": "https://developer.apple.com/documentation/GameKit/GKLocalPlayer"
      },
      {
        "title": "Human Interface Guidelines: Game Center",
        "url": "https://developer.apple.com/design/human-interface-guidelines/game-center"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10066/4/41B04DA6-0AE3-41B6-9CE1-CF48AAAF9439/downloads/wwdc2021-10066_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10066/4/41B04DA6-0AE3-41B6-9CE1-CF48AAAF9439/downloads/wwdc2021-10066_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10064",
      "year": "2022",
      "title": "Reach new players with Game Center dashboard",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10064"
    },
    {
      "id": "10067",
      "year": "2021",
      "title": "Bring Recurring Leaderboards to your game",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10067"
    },
    {
      "id": "10145",
      "year": "2020",
      "title": "Design for Game Center",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10145"
    },
    {
      "id": "10619",
      "year": "2020",
      "title": "Tap into Game Center: Leaderboards, Achievements, and Multiplayer",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10619"
    }
  ],
  "extractedAt": "2025-07-18T09:15:37.636Z"
}