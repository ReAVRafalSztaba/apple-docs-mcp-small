{
  "id": "10287",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10287/",
  "title": "Measure health with motion",
  "speakers": [],
  "duration": "",
  "topics": [
    "Health & Fitness"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Irida Mance: Hello and welcome to WWDC.\n\nI'm Irida, a scientist on the Apple software team, and I will be joined by Sohum, a Motion engineer.\n\nToday, we'll introduce two brand-new features that will enable you to better understand walking endurance and quality.\n\nWalking is a vital sign.\n\nThe way an individual walks is highly informative of their overall health and well-being.\n\nIt can be used to track recovery from an injury, assess risk of falling, monitor the aging process, and even predict mortality.\n\nAt WWDC2020, we introduced a suite of mobility metrics that provide a powerful insight into your walking patterns throughout the day.\n\nYou can learn all about them in last year's session, \"Beyond counting steps\".\n\nToday we're excited to share an update to one of these metrics: the Six-Minute Walk metric, available for Apple Watch.\n\nThrough a new recalibration API, the metric will enable you to better capture acute changes in health.\n\nIn addition, we're going to talk about a brand-new metric: the Walking Steadiness feature, available for iPhone.\n\nWhat do these two metrics have in common? They're both great ways to track important aspects of walking and can provide continuous and objective measures for monitoring improvements or catching early warning signs.\n\nBut they capture different things.\n\nThe Six-Minute Walk metric estimates how far you can walk in six minutes and is a measure of your walking capacity and endurance.\n\nWalking steadiness captures the quality of your walking and is designed to make it easy for you to assess an individual's risk of falling based on their mobility.\n\nWhether you are tracking these metrics week over week -- to measure changes in response to treatment -- or year over year -- to monitor natural aging trends -- both metrics can provide a unique window into an individual's health.\n\nWe'll start by diving deeper into the Six-Minute Walk distance metric.\n\nThe in-clinic Six-Minute Walk test is a staple for clinicians in many fields to assess cardiovascular and musculoskeletal health.\n\nThe metric captures walking endurance for low-capacity individuals.\n\nIt can help identify which individuals have a lower endurance relative to others their age and height, which is often indicative of poor health outcomes.\n\nThis year, using a new recalibration API, the Six-Minute Walk metric is also a great way to track changes to walking capacity following an intervention -- such as a surgery -- or an acute events, like an injury.\n\nLet's run through a scenario where recalibrating the Six-Minute Walk metric will be useful.\n\nImagine that we have a patient, Jamie, who just had knee surgery.\n\nWe know that Jamie could barely walk after surgery, but we only see a small dip in their Six-Minute Walk estimate.\n\nLet's look into what may be causing this.\n\nTo build an accurate estimate of an individual's capacity, the Six-Minute Walk distance estimate looks at activity and motion data across a historical measurement window.\n\nFor example, this is the measurement window used for this estimate.\n\nTo see how far back an estimate looked, you can use a brand-new metadata field, which will tell you the beginning of the data window used.\n\nWe can see that our example estimate used data from way before the surgery.\n\nWhat we can do now is recalibrate our estimates to use data only postsurgery.\n\nWith this recalibration, our estimates now capture Jamie's true dip in mobility immediately following the surgery, which allows for a way more accurate pre- and postsurgery comparison.\n\nNow, Sohum can show us how to use these new features in your app.\n\nSohum Thakkar: Thank you, Irida! The recalibration API lets you use your knowledge of Jamie's surgery date to improve their Six-Minute Walk distance estimates.\n\nIf know you want to recalibrate, you can use the brand-new recalibrateEstimates method in HKHealthStore.\n\nThis new method has a few requirements.\n\nThe first thing you need is a SampleType that can be recalibrated.\n\nYou can check if a type can be recalibrated with the .allowsRecalibration ForEstimates property.\n\nAs of iOS 15, sixMinuteWalkType is the only sampleType that can be recalibrated.\n\nThe second thing you need is a new entitlement.\n\nYou can add this entitlement to your Xcode project yourself.\n\nAnd lastly, your app will need authorization for both reading and sharing the SampleType.\n\nTo prompt the user to grant your app authorization, simply create a set with just the Six-Minute Walk distance type, and then pass it in to healthStore. requestAuthorization.\n\nAnd with those requirements out of the way, let's recalibrate.\n\nJust use HKHealthStore's recalibrateEstimates method and pass in the date of surgery.\n\nSince this affects the patient's health data, a prompt will pop up on screen asking them to allow the recalibration.\n\nAnd that's it! For the next few estimates, you'll see the recalibration date reflected in the Measurement Start Date in the Health App and in the EarliestDateUsed ForEstimate metadata that will come with every HealthKit sample.\n\nA few things to consider: First, this method does not affect estimates that are already present in HealthKit at the time of use, so it's important to recalibrate as soon as possible after a surgery.\n\nSecondly, after recalibration, it could take up to 14 days to rebuild enough activity history to make a confident estimate.\n\nAnd thirdly, the effect is temporary.\n\nOnce the recalibration date is far enough in the past, the estimates will once again start using their normal measurement window.\n\nYou might be tempted to recalibrate every fall or every surgery you learn about, but these often don't result in reduced mobility or fitness.\n\nThere's a trade-off.\n\nIn general, a longer data window will result in more accurate estimates but will be less responsive to acute changes.\n\nIn Jamie's case, we know their surgery will cause a substantial change to their mobility and fitness, and we'd like to monitor that change closely.\n\nIf they're not recovering well, we can reach out and provide support.\n\nThis new recalibration API extends the capabilities of Apple's Six-Minute Walk distance metric to a whole new use case of tracking recovery from injury or surgery.\n\nWe hope you'll find it useful in better monitoring your patient's health and improving outcomes.\n\nNow I'd like to pass it off to Irida to tell you about a brand-new metric, Walking Steadiness, which measures a different dimension of your walking.\n\nIrida: Thanks, Sohum.\n\nIn addition to being able to track how much or how far an individual is able to walk, it's also important to monitor the quality of that movement.\n\nWith iOS 15, we've built upon our foundational understanding of walking quality and extended it through a new metric, the Apple Walking Steadiness metric.\n\nThe metric is designed for you to better understand your overall walking quality and can help assess your risk of falling due to a mobility limitation in the next 12 months.\n\nYour quality of walking is impacted by many factors, including your muscular strength, your physical endurance, your balance, or external factors like injuries or surgeries, all of which can alter your risk of falling.\n\nThe Apple Walking Steadiness metric provides a unified way to track the mobility components that contribute to fall risk.\n\nThe feature consists of three elements.\n\nFirst, we provide a score that can be used to continuously monitor changes in walking steadiness over time.\n\nA new score will be saved to HealthKit weekly, and it will represent the user's steadiness for that week.\n\nThe score provides you the greatest level of detail; the higher the score, the better your walking quality, and the lower your predicted risk of falling because of a mobility limitation.\n\nSecond, to give a better idea of what the steadiness scores mean, we've categorized them into three classifications: OK, Low, and Very Low.\n\nThese classifications provide you a simpler way of identifying who is at the highest risk of falling.\n\nLastly, after individuals onboard onto the Walking Steadiness feature in the Health app, we have enabled a notification.\n\nThe notification will alert individuals whenever their steadiness has dropped to the Low or Very Low category, or if they've remained at those categories for several months.\n\nNow you may be wondering, What does steadiness look like for typical healthy individuals throughout their life? Let's see what the Walking Steadiness metric could look like for two folks.\n\nFor this individual, their walking quality decreases as they age.\n\nThis is fairly typical.\n\nWe've all seen that our elderly relatives may not walk as well as us.\n\nBut we also know there are behavioral factors that contribute to steadiness.\n\nFor example, an individual that is able to maintain a high level of fitness is likely to preserve a higher quality of walking as they age.\n\nBut we also know that age or better fitness are not the only factors that impact walking steadiness.\n\nAcute events like an ankle injury can drastically change walking quality and lead to heightened fall risk.\n\nSo anyone can bounce between steadiness categories throughout their life.\n\nAnd as I mentioned, the steadiness classification helps you understand the significance of these changes.\n\nLet's dive a little deeper into what individuals with these classification levels may look like.\n\nAn OK classification will be your healthy, confident walker.\n\nThey generally will not have any difficulty going about their day and doing many of the tasks that challenge their strength and coordination.\n\nTheir scores will be high, and their risk of falling due to a mobility-related health issue is low.\n\nA low-classification individual will have more compromised mobility.\n\nThey may be generally OK; but in more challenging situations -- say a difficult hike -- they may need to take more precautions to prevent from falling.\n\nThey might not have fallen yet, but this early awareness will be useful.\n\nLastly, a Very Low classification is indicative of someone that has noticeably compromised steadiness.\n\nBased on their mobility, this individual would be at high risk of falling.\n\nAgain, they might not have fallen yet, but their mobility is compromised, and they should take the necessary measures to avoid situations where falls are more likely to happen or, if possible, to improve their strength and balance through exercise.\n\nAll right.\n\nThat's what this metric is capable of.\n\nNow you might ask, What is required to get a Walking Steadiness estimate? Actually, not much.\n\nthe metric is optimized to measure steadiness while individuals are carrying their iPhone in some of the most common locations, for example, a pant pocket, a jacket pocket, even a purse held closely; all will work as long as the device is held tightly to the center of your body.\n\nNow back to Sohum to walk us through how to leverage the Walking Steadiness metric in your apps.\n\nThanks, Irida for that introduction to Walking Steadiness.\n\nLet's put it to use.\n\nImagine you're building an app for a physical therapy clinic.\n\nOne of the toughest challenges in physical therapy and rehabilitation is tracking progress.\n\nAnd now that most visits are virtual, and telehealth is gaining popularity, it can be even tougher.\n\nLet's say your app's purpose is to keep patients up to date and identify those at higher risk of falling and those who are declining in steadiness.\n\nThat's an incredibly difficult thing to measure, but Walking Steadiness can help.\n\nAs Irida mentioned, Walking Steadiness has three elements: the score, the classification, and the notification.\n\nWe'll see how each can be integrated into your app for physical therapy patients...\n\nstarting with the score.\n\nLet's say you want to display a patient's most recent steadiness score.\n\nLet's see how to do that.\n\nThe score is a HealthKit quantityType with the name appleWalkingSteadiness.\n\nSince it's an Apple-defined metric, it's read-only.\n\nIts unit in HealthKit is percent, and it ranges from zero to one.\n\nAnd it's written weekly, although estimates may be delayed if there isn't enough data to compute an estimate.\n\nTo kick us off, let's grab an authorization.\n\nWe'll construct a set with the appleWalkingSteadiness type.\n\nThen, we'll call requestAuthorization.\n\nTo get the most recent steadiness score, we'll construct a SampleQuery with a limit of one, sorted by end date.\n\nIf there is a returned sample, we'll grab the value with percent units and update our status in the app.\n\nThis is what it'll look like.\n\nThe score is great for tracking trends, but is sometimes kind of hard to interpret on its own.\n\nWhat does 45 mean? The classification might be the more appropriate level of granularity for most people.\n\nLet's use it to add context.\n\nThe classification comes in the form of a brand-new HealthKit enum: HKAppleWalkingSteadiness Classification.\n\nThe enum can take the values .ok, .low, and .veryLow.\n\nStarting from our previous code to grab the most recent score, it only takes a single line to convert a score to a classification.\n\nThe classification enum has a convenience constructor that will translate a score to the appropriate classification.\n\nAnd we'll display the classification along with the score.\n\nThere! That's far more interpretable.\n\nNow we can tell this individual is in the Low classification and may be at increased risk of falling.\n\nOK, so now let's tackle the patient-monitoring portion of this app.\n\nWe'd like to be able to identify and reach out to patients who are at high risk of falling.\n\nThe Walking Steadiness notification is great for this.\n\nYou can register to be notified when a patient receives a steadiness notification and reach out to them for a check-in.\n\nThe notification arrives in HealthKit as a CategoryType sample, and it's called \"appleWalkingSteadinessEvent\" in HealthKit.\n\nIt's also a read-only type.\n\nThere are four types of steadinessEvents.\n\n.initialLow and .initialVeryLow are triggered about a month after the individual drops into the Low or Very Low classifications.\n\nAfter this initial notification, .repeatLow or .repeatVeryLow events will remind the individual about once every three months if they stay at the same classification.\n\nYou can read more about the notification types in the developer documentation in the links associated with this session.\n\nTo read the notifications, we'll need another authorization.\n\nThis time, we'll construct a set with only the type appleWalkingSteadinessEvent and pass it in to the requestAuthorization method.\n\nLet's watch for notifications.\n\nHere we're creating an HKObserverQuery that will execute a handler every time a steadiness event is saved to HealthKit, meaning the user got a notification.\n\nIn this handler, we'll prompt the user for a checkup.\n\nWe'll also allow HealthKit to deliver the event to us in the background to ensure we can respond to the notification within a day.\n\nWhen we execute the query, our app will begin listening for notifications.\n\nAnd every time the user receives a notification, we could trigger a prompt to schedule a virtual checkup with the clinic.\n\nGreat! Now you can reach out to patients at increased fall risk.\n\nBut there are other users a physical therapy clinic might be interested in.\n\nHere's an example of a patient who showed great progress at first but is now declining in steadiness.\n\nThey wouldn't have received a Walking Steadiness notification because they aren't yet at a higher-fall-risk classification.\n\nBut a physical therapy clinic might be concerned about trends like this.\n\nAre the exercises appropriate? Are they causing damage? Is the patient just not keeping up? We'd like to schedule a follow-up, so let's design our own notification criteria.\n\nHere are the patient's steadiness scores over time.\n\nThe plan is to query six weeks of steadiness scores and calculate the best-fit slope.\n\nWe'll do this every week, and if a patient's steadiness is declining more than, say, five points per week on average, we should try to schedule a check-in.\n\nLet's create a predicate to query in the past six weeks and execute an HKSampleQuery for the appleWalkingSteadiness QuantityType.\n\nIn the callback, we'll pass the results off to a detectTrends function.\n\nNow, all we need to do is calculate the best-fit slope, using a custom function we have defined, and check if it's less than -5, meaning steadiness is declining at a rate of over five points per week.\n\nAnd if it is, we can prompt the user for a checkup, just like before.\n\nSo now when we detect their steadiness is declining, they will receive a prompt! So that's how to use all three elements of Walking Steadiness and how to design your own simple notification criteria.\n\nIt's never been so easy to perform passive mobility monitoring.\n\nBut let's not get ahead of ourselves.\n\nAll of this is dependent on the patient getting Walking Steadiness scores.\n\nHere are four best practices to make sure they don't miss a single sample.\n\nFirst off, users will only get steadiness if they have their height set in the Health app.\n\nWeight and age are highly recommended.\n\nSo first things first, let's prompt them for those.\n\nWe recommend writing updated samples directly, via the HealthKit API.\n\nSecondly, we recommend prompting the user to turn on Apple's Walking Steadiness notifications.\n\nThey can do this from the Health app in the Mobility room.\n\nThird, as Irida mentioned, for the vast majority of patients, keeping their phone in their pocket while they go about their everyday activities is enough to get steadiness scores.\n\nLet's just encourage them to take their phone with them while they're walking around.\n\nTo check if they're meeting the walking criteria, we can check if they're receiving walking speed estimates in HealthKit.\n\nTwo weeks with consistent Walking Speed samples is a good indicator they're carrying their device enough.\n\nAs a reminder, walking speed requires an iPhone 8 or above, and is measured when the phone is held tightly to the center of the body while walking over flat ground.\n\nA quick glance in the Health app, or a quick HealthKit query, can tell us if we need to prompt them to walk with their phone more.\n\nSo there you have it! You have all the tools you need to build the next-generation physical therapy app that can keep track of your patient's walking quality without any dedicated equipment or assessments.\n\nNow, over to Irida to talk about the many other amazing ways you can use Walking Steadiness for health monitoring.\n\nIrida: Thanks, Sohum.\n\nWe just saw how Walking Steadiness can make a huge difference to virtual care for physical therapy, and it can do so much more.\n\nConsider using Walking Steadiness if you want to build an app that helps families check up on an aging grandparent, or perhaps you can help patients with neurological diseases like multiple sclerosis monitor disease progression.\n\nYou could even use it to recommend workouts and hikes that are more tailored to an individual's fall risk.\n\nWalking Steadiness and the new capabilities for Six-Minute Walk built on top of a rich ecosystem for using motion sensing to monitor heath.\n\nGiven the strong ties between mobility, cardiovascular and respiratory functioning, we encourage you to explore how metrics related to cardiovascular health on the Apple Watch -- and mobility for the iPhone -- can be used for rehabilitation or prehabilitation applications, to best prepare patients for successful surgery.\n\nOr consider how Walking Steadiness, the mobility metrics, and our Movement Disorder API can be combined to monitor the complicated motor symptoms of Parkinson's Disease.\n\nThe combination of these metrics can unlock a truly powerful experience for your apps.\n\nTo wrap up, we want to provide some best practices when collecting this data.\n\nFirst, though walking is something we don't often think a lot about, as we've just seen, it carries a powerful health signal.\n\nAs with any health information, make sure that your data collection has strong privacy and security safeguards.\n\nAny data you take outside of HealthKit should at the very least be key-coded and encrypted.\n\nNext, you should be transparent about the information you are collecting and why.\n\nAnytime you request to read a certain HealthKit type, we'll prompt the user to approve its use.\n\nBut beyond this basic measure, it's our joint responsibility to collect only the most meaningful data and to be transparent on how that data will be used.\n\nFor example, for Six-Minute Walk estimates, our users should understand when the recalibration is appropriate and how it helps their care.\n\nFor the Walking Steadiness metric, the requirements to get an estimate should be clearly communicated.\n\nWorking with domain experts, like physicians or physical therapists, will ensure that you collect the most meaningful data from these metrics.\n\nLastly, your customer should have control of their data.\n\nIn HealthKit, an individual can tap Show All Data and delete any and all samples collected from them.\n\nIf you take data outside of HealthKit, your customer should have an easy way to view and delete, turn off data collection, or have other means to exercise control over what is collected from them.\n\nWhether you are using Walking Steadiness to measure quality of movement, the Six-Minute Walk metric to assess recovery from injury, or any other health metric, following these guidelines will protect our customers' data and promote user trust.\n\nA commitment to these principles is essential when handling any health data.\n\nOK, that's a wrap for us.\n\nWe want to thank you for watching and being part of WWDC21.\n\nWe cannot wait to see what you build next.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "0:01",
      "title": "Grab authorization to read and share sixMinuteWalkTestDistance type",
      "language": "swift",
      "code": "// Grab authorization to read and share sixMinuteWalkTestDistance type\n\nlet healthStore = HKHealthStore()\nlet types: Set = [\n    HKObjectType.quantityType(forIdentifier: .sixMinuteWalkTestDistance)!\n]\n\nhealthStore.requestAuthorization(toShare: types, read: types) { _, _ in }"
    },
    {
      "timestamp": "0:02",
      "title": "Recalibrate Six-Minute Walk estimates",
      "language": "swift",
      "code": "// Recalibrate estimate\n\nlet healthStore = HKHealthStore()\nlet sixMinuteWalkType = HKSampleType.quantityType(forIdentifier: .sixMinuteWalkTestDistance)!\n\nif sixMinuteWalkType.allowsRecalibrationForEstimates {\n\n    healthStore.recalibrateEstimates(sampleType: sixMinuteWalkType, date: surgeryDate) { \n        (success, error) in\n        // Handle error\n    }\n\n}"
    },
    {
      "timestamp": "0:03",
      "title": "Get authorized for walkingSteadiness type",
      "language": "swift",
      "code": "// Get authorized\n\nlet types: Set = [\n    HKObjectType.quantityType(forIdentifier: .walkingSteadiness)!\n]\n\nhealthKitStore.requestAuthorization(toShare: nil, read: types) { _, _ in }"
    },
    {
      "timestamp": "0:04",
      "title": "Construct a query for most recent walkingSteadiness score",
      "language": "swift",
      "code": "// Construct a query for most recent walkingSteadiness score\n\nlet steadinessType = HKObjectType.quantityType(forIdentifier: .walkingSteadiness)\nlet sortByEndDate = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)\n\nlet query = HKSampleQuery(sampleType: steadinessType,\n                          predicate: nil,\n                          limit: 1,\n                          sortDescriptors: [sortByEndDate]) { (query, samples, error) in\n\n    if let sample = samples?.first as? HKQuantitySample{\n\n        let recentScore = sample.quantity.doubleValue(forUnit: .percentUnit)\n\n        updateStatus(score: recentScore)\n    }\n}\n\nself.healthStore.execute(query)"
    },
    {
      "timestamp": "0:05",
      "title": "Construct a query for most recent walkingSteadiness classification",
      "language": "swift",
      "code": "// Construct a query for most recent walkingSteadiness classification\n\nlet steadinessType = HKObjectType.quantityType(forIdentifier: .walkingSteadiness)\n\nlet query = HKSampleQuery(sampleType: steadinessType,\n                          predicate: nil,\n                          limit: 1,\n                          sortDescriptors: nil) { (query, samples, error) in\n\n    if let sample = samples?.first as? HKQuantitySample{\n        \n        let recentScore = sample.quantity.doubleValue(forUnit: .percentUnit)\n\n        // Use HealthKit API to classify a value as OK, Low, or Very Low\n        let recentClassification = HKAppleWalkingSteadinessClassification(for: walkingSteadiness.quantity)\n\n        updateStatus(classification: recentClassification, score: recentScore)\n    }\n}\n\nself.healthStore.execute(query)"
    },
    {
      "timestamp": "0:06",
      "title": "Get authorized .walkingSteadinessEvent",
      "language": "swift",
      "code": "// Get authorized\n\nlet types: Set = [\n    HKObjectType.categoryType(forIdentifier: .walkingSteadinessEvent)!\n]\n\nhealthKitStore.requestAuthorization(toShare: nil, read: types) { _, _ in }"
    },
    {
      "timestamp": "0:07",
      "title": "Watch for walkingSteadiness notifications",
      "language": "swift",
      "code": "// Watch for walkingSteadiness notifications\n\nlet notificationType = HKCategoryType.categoryType(forIdentifier: .appleWalkingSteadinessEvent)!\n\nlet query = HKObserverQuery(sampleType: notificationType, predicate: nil) { \n    (query, completionHandler, errorOrNil) in\n    \n    if let error = errorOrNil {\n        // Properly handle the error.\n        return\n    }\n\n    promptCheckupForNotification()\n\n    completionHandler()\n}\n\nself.healthStore.execute(query)"
    },
    {
      "timestamp": "0:08",
      "title": "Query walking steadiness in the past 6 weeks",
      "language": "swift",
      "code": "// Query samples from HealthKit\n\n// Look back 6 weeks\nlet end = Date()\nlet start = Calendar.current.date(byAdding: .week, value: -6, to: end)\n\nlet datePredicate = HKQuery.predicateForSamples(withStart: start, end: end, options: [])\n\n// Query walking steadiness\nlet steadinessType = HKObjectType.quantityType(forIdentifier: .walkingSteadiness)\nlet sortByEndDate = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false)\n\nlet query = HKSampleQuery(sampleType: steadinessType,\n                          predicate: sortByEndDate,\n                          limit: nil,\n                          sortDescriptors:[sortByEndDate]) { (_, samples, _) in\n\n    detectTrends(samples)\n}\nself.healthStore.execute(query)"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "appleWalkingSteadiness",
        "url": "https://developer.apple.com/documentation/HealthKit/HKQuantityTypeIdentifier/appleWalkingSteadiness"
      },
      {
        "title": "appleWalkingSteadinessEvent",
        "url": "https://developer.apple.com/documentation/HealthKit/HKCategoryTypeIdentifier/appleWalkingSteadinessEvent"
      },
      {
        "title": "CMFallDetectionManager",
        "url": "https://developer.apple.com/documentation/CoreMotion/CMFallDetectionManager"
      },
      {
        "title": "Core Motion",
        "url": "https://developer.apple.com/documentation/CoreMotion"
      },
      {
        "title": "Getting movement disorder symptom data",
        "url": "https://developer.apple.com/documentation/CoreMotion/getting-movement-disorder-symptom-data"
      },
      {
        "title": "HKAppleWalkingSteadinessClassification",
        "url": "https://developer.apple.com/documentation/HealthKit/HKAppleWalkingSteadinessClassification"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10287/5/C117695D-C24C-4B2E-B6A4-C87244FC08AC/downloads/wwdc2021-10287_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10287/5/C117695D-C24C-4B2E-B6A4-C87244FC08AC/downloads/wwdc2021-10287_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10656",
      "year": "2020",
      "title": "Beyond counting steps",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10656"
    },
    {
      "id": "10664",
      "year": "2020",
      "title": "Getting started with HealthKit",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10664"
    }
  ],
  "extractedAt": "2025-07-18T10:37:55.676Z"
}