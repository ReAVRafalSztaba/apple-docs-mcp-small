{
  "id": "256",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/256/",
  "title": "What’s new in SwiftUI",
  "speakers": [],
  "duration": "",
  "topics": [
    "Developer Tools",
    "Essentials"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hi, I'm Anna. And I'm Peter. We're engineers on the SwiftUI team. We’re stoked to talk to you about what’s new in SwiftUI. From low level performance improvements all the way up through the buttons in your user interface, there are some major improvements to share across the system. It’s easier to interact with text and web-based content, and SwiftUI is in even more places. One of mine and Anna’s greatest loves right below SwiftUI is taking pictures while hiking. Peter and I have built an app to help us plan and share our trips. It uses a ton of the enhancements to SwiftUI to make it look and feel great. First, I’ll show off all the new system features and how we made our app shine with them. I'll share enhancements to performance, animations, and layout.\n\nPeter will take you through the new places you can use SwiftUI throughout all of Apple’s platforms.\n\nFinally, he’ll highlight expanded features in SwiftUI views, including support for web content and rich text.\n\nLet’s get started, with how you can make your app truly shine with a new design. The new design system enables a bright and fluid experience that's consistent across Apple platforms.\n\nAfter Peter and I re-compile our app, it gets the brand new appearance.\n\nThe structure of our app hasn't changed, but navigation containers have been updated for the new design.\n\nOn iPad and macOS, our app sidebar has a glassy appearance that reflects the content around it.\n\nTab bars have also been updated. On iPhone, they have a new, more compact appearance.\n\nBeyond tab bars, most toolbar items now appear in Liquid Glass.\n\nDuring navigation transitions, these items can even morph. Check it out.\n\nOur app uses the new toolbar spacer API to adjust the sections of toolbar items.\n\nWe use a fixed spacer to separate the up-down buttons from the settings button.\n\nTo make toolbar items more prominent, Liquid Glass in toolbars supports tinting.\n\nPeter and I apply a bordered prominent button style with a tint color to get this effect.\n\nWhen people scroll down in our app, the toolbar now applies a blur effect to the bar content on the edge that’s being scrolled. This scroll edge effect ensures our bar content remains legible regardless of whatever is underneath.\n\nTo find that next trip, people often search for it.\n\nSearch is now bottom aligned on iPhone, which makes it more ergonomic to reach.\n\nOur existing code places the searchable modifier on the outside of the NavigationSplitView.\n\nPeter and I didn’t have to make any code changes to get the bottom aligned search.\n\nWith this same placement on iPad, our app gets the new search appearance in the top trailing corner.\n\nWith searchable, it’s never been faster to find what you’re looking for.\n\nFor tab-based apps where search is a destination, the Search tab now appears separated from the rest of the tabs in the tab bar and morphs into the search field.\n\nSet your tab as having a search role to get the updated appearance.\n\nControls throughout the system also feel fresh, like toggles, segmented pickers, and sliders. Our custom views aren't left out either. There are APIs to let them take advantage of the new design too.\n\nWe apply a glass effect to our custom view, so it beautifully reflects the content around it, like our previous photos. These updates are just scratching the surface of what you can build with the new design.\n\nTo learn more about how to take advantage of it, from adoption best practices to advanced customizations, check out “Build a SwiftUI app with the new design” In iPadOS 26, there have also been some exciting improvements to the ways that people can interact with your app.\n\nWhen people swipe down, apps now display a menu bar, which provides faster access to common actions.\n\nThe commands API used to construct the menu bar on macOS now creates the same result on iPad. I've added some text editing commands, since our app allows people to jot down notes for their next trip. When planning a trip, people are often looking at multiple apps at once. Windowing on iPad has become even more flexible. People can fluidly resize your app.\n\nFor apps like ours that use split view navigation, the system automatically shows and hides columns based on the available space.\n\nTo get your app ready for resizing, Migrate off APIs that fix the screen to full size, like UIRequiresFullscreen.\n\nThis property list key is deprecated in iPadOS 26.\n\nTo learn how to design your iPad app for resizable windows and the new menu bar, watch “Elevate the design of your iPad app.” Window resizing on macOS is more fluid too.\n\nFor resizes that are caused by changes in the content view size, SwiftUI now synchronizes the animation between that content and the window.\n\nOur app has adopted the new window resize anchor to tailor where the animation originates from.\n\nIt’s great for preserving continuity between different parts of content, like switching tabs in our settings view. Enhancements to the building blocks of SwiftUI also make our app more powerful.\n\nFrom supercharged performance to ease of use improvements and new ways to lay out your content, it’s a great year to be building apps with SwiftUI. Performance improvements to the framework benefit apps across all of Apple’s platforms, from our app to yours. There are major improvements to share in several key areas. Including lists, scrolling, and profiling.\n\nI’m particularly excited about the improvements to lists on macOS.\n\nOn macOS, lists of over 100,000 items now load 6x faster.\n\nAnd these lists update up to 16x faster. Larger lists have even bigger performance gains, and there are improvements to all platforms.\n\nThis improves the experience for people using our trip planning app, whether they're viewing their trips, filtering them, or updating existing ones. Scrolling has some serious wins too.\n\nWhen people scroll in your app, the system gives SwiftUI a certain amount of time to render the next frame. If all the work isn’t done by that deadline, it causes a dropped frame. No one wants this. It can cause your app to feel glitchy or slow.\n\nNow, SwiftUI has improved scheduling of user interface updates on iOS and macOS. This improves responsiveness and lets SwiftUI do even more work to prepare for upcoming frames. All in all, it reduces the chance of your app dropping a frame while scrolling quickly at high frame rates. When you put lazy stacks, like the LazyVStack in this diagram, inside scroll views, SwiftUI delays loading the contained views until they’re about to appear. Now, nested scrollviews with lazy stacks get this same behavior. This is great for building views like photo carousels.\n\nTo understand what performance issues still remain in our app, I can use the new SwiftUI performance instrument in Xcode.\n\nIt has a variety of lanes that allow me to quickly inspect different performance problem areas, like long view body updates or platform view updates.\n\nIt looks like we still have some work to do to make our app as lightning fast as Peter can hike.\n\nTo dive deeper into the new instrument, watch “Optimize SwiftUI performance with instruments”.\n\nConcurrent programming is another fundamental part of building your app. Swift support for structured concurrency allows verifying data race safety at compile time.\n\nThis helped Peter and I find bugs in our concurrent code before they affected our app. To learn more about adding structured concurrency to your app, watch “Embracing Swift concurrency.” Follow it up with “Explore concurrency in SwiftUI” to discover how SwiftUI leverages Swift concurrency.\n\nWhile our app concurrently loads in its data, Peter and I show an animation.\n\nWe animate this using the Animatable protocol, where we define a custom animatable data property that animates all our shapes properties except the drawing direction.\n\nOnce I add that full animatable data declaration, that’s a lot of code to just exclude the drawing direction. Using the new Animatable macro, I’m able to delete the custom animatable data property and let SwiftUI automatically synthesize it for me.\n\nI use the AnimatableIgnored macro to exclude properties I don’t want to animate, like the drawing direction. Layout is in new dimensions, three dimensions to be exact.\n\nSwiftUI has new depth-based variants of modifiers you already know, making it possible to do more volumetric layout directly in SwiftUI. On visionOS, our app lets us plan our hiking routes. I want to add a feature that shows the sun in the sky based on where I’ll be hiking at that time.\n\nInstead of a normal 2D alignment, I use the new Alignment3D type to align the sun.\n\nI place the sun using the Spatial Overlay modifier and adjust the overlay’s alignment based on the time of day.\n\nThat's awesome! Now I'm never getting sunburned again.\n\nThis is just scratching the surface of what you can do with the enhancements to spatial layout in visionOS 26. Watch “Meet SwiftUI spatial layout” to learn more about new tools to build spatial experiences. Peter and I always have backpacks that are way too full. So we added a volume to our app to help us spec out our packs. The new manipulable modifier allows people to interact with the objects in our app. Here, we take a model of a water bottle and enable people to pick it up and move it.\n\nTo make it obvious which items we still need to pack, we use the new scene snapping APIs to read this information out of the environment.\n\nBased on that, we add a pedestal to items that are snapped to the table.\n\nUsing the new volumetric APIs, it's possible to build some truly special experiences.\n\nThat's awesome! SwiftUI has many more enhancements to windows, volumes, and scenes on visionOS, from window restoration to new scene types. Learn how to use them in “Set the scene with SwiftUI in visionOS.” Check out “What’s new in visionOS” to hear all about what’s new on the platform. Wow, those are some pretty picture-perfect enhancements. It seems like this is going to make preparing for our next photo hike a snap. I know! Just look at this photo I took on my last trip.\n\nIt was a real safari. That looks great, Anna. A nice spot to expand the viewfinder, just like SwiftUI this year. Your app can take advantage of SwiftUI across the system. With enhancements to Scene and new APIs in Widgets and Controls, apps can be more a part of the platform than ever. And SwiftUI works even better alongside other frameworks. Scenes are the root containers for views in your app. They represent discrete parts of your interface. You can get access to scenes by declaring them in your app’s body. For example, a WindowGroup. This year, you can also request SwiftUI scenes from your UIKit and AppKit lifecycle apps with scene bridging. Scene bridging is really cool! It allows your UIKit and AppKit lifecycle apps to interoperate with SwiftUI scenes. Apps can use it to open SwiftUI-only scene types or use SwiftUI-exclusive features right from UIKit or AppKit code. You can use scene types like MenuBarExtra and ImmersiveSpace. It also works for scene modifiers, like windowStyle and immersiveEnvironmentBehavior. Scene Bridging works with the new scene types in SwiftUI this year. Like RemoteImmersiveSpace, in macOS Tahoe and visionOS 26, your Mac app can render stereo content on Apple Vision Pro using a new scene.\n\nRemoteImmersiveSpace is a macOS scene to render stereo content on Apple Vision Pro. You render in a RemoteImmersiveSpace with CompositorServices. Your Mac app can use hover effects and input events. To learn more about CompositorServices, Metal, and using them with RemoteImmersiveSpace, Check out “What’s new in Metal rendering for immersive apps.” And AssistiveAccess, which is a special mode for users with cognitive disabilities. Your app can also show UI when someone has their iPhone in this mode by adopting the new AssistiveAccess scene type. To learn more about this API and how you can adopt AssistiveAccess in your app in iOS 26, check out “Customize your app for Assistive Access.” SwiftUI has some great enhancements to working with AppKit this year. In addition to scene bridging, you can show sheets with SwiftUI views in them. This is a great way to incrementally adopt SwiftUI in your app. You can bridge your AppKit gestures over to SwiftUI using NSGestureRecognizerRepresentable, and you can use NSHostingView in Interface Builder.\n\nSwiftUI also offers more API to work alongside RealityKit with a ton of improvements this year. These enhancements simplify every part of interacting with RealityKit from your SwiftUI code. RealityKit Entities now conform to Observable, which makes it easy to observe changes in your SwiftUI views. There’s improved coordinate conversion API. and there’s enhanced support for presentations right from RealityKit. Using a new component, it’s possible to present SwiftUI popovers like this directly from a RealityKit Entity. This is great for marking exactly where we want to go on our next photo hike.\n\nThere’s even more to the integration between SwiftUI and RealityKit, like attachment components, synchronizing animations, binding to components, and new sizing behaviors for RealityView. To learn about SwiftUI and RealityKit’s continued friendship, check out “Better Together: SwiftUI & RealityKit.” I am a big fan of Controls in Control Center. I use them frequently on my phone to control my house, control my device with shortcuts, and control camera experiences. This year, watchOS 26 and macOS Tahoe are getting custom controls. Anna and I are really jazzed about using controls on these platforms. On the Mac, you can access custom controls right from Control Center.\n\nAnd on the watch, when we’re out for a walk, we can mark our favorite photo locations with a tap. Awesome! I’m a big fan of Widgets, too. I like getting information from my apps at a glance. This year, widgets are coming to visionOS and CarPlay. On visionOS, we can customize the appearance of widgets in the shared space. We’ve added a countdown widget to our app and used the new levelOfDetail environment value.\n\nWhen we get close to the widget, it expands to show some photos we took last time we were there. This is a great way to keep an eye on when we’ll take our next photo hike. Only 7 days to go! There’s more new to widgets this year, like Live Activities on CarPlay, push-based updating API, and new APIs for relevance on watchOS. To learn more, check out “What’s new in widgets.” SwiftUI has expanded the capability of views this year. From editing with rich text to charting in 3D, there are some great new views and enhancements to existing ones in SwiftUI. To embed web content directly in your app, WebKit now has a full set of SwiftUI APIs, including WebView. WebView is a new SwiftUI view for showing web content in your app. It’s powered by WebKit, just like Safari. Your app can show URLs by initializing a WebView.\n\nTo customize and interact with the page, WebViews can also show WebPages, a new observable model type designed from the ground up for Swift. WebPage enables rich interaction with the web. You can programmatically navigate on the page and access page properties.\n\nThere’s a lot more to WebKit’s new support for SwiftUI, like customizing user agents, calling JavaScript, custom URL schemes, and more. To learn more about all these new WebKit APIs, point your Internet communicator at “Meet WebKit for SwiftUI.” We’ve been trying to convince our families that our hikes aren’t that hilly. With the new support for 3D in Swift Charts, we can show them just that.\n\nTo show 3D charts, we declare a Chart3D.\n\nChart3D shows plots in three dimensions. We can use the new Z-specific modifiers to specify scales in 3D space. No wonder I was sneezing on that last hike. It was sinusoidal! To learn more about how to add 3D charts to your app, watch “Bring Swift Charts to the third dimension.” To help us share trip data with other apps, Anna and I adopted Drag and Drop in our Mac app. Drag and Drop has some major enhancements this year for your apps.\n\nWe can drag around multiple items using the new variant of the draggable modifier, along with the new dragContainer modifier. This makes our view a container for drag items. We return the items to transfer based on the selection.\n\nThis works with the custom selection behavior in our app. When we use this modifier, SwiftUI requests drag items lazily when a drop occurs.\n\nUsing the new DragConfiguration API, we can customize the supported operations for drags from our app. Here, we allow deleting. To observe events, we use the new onDragSessionUpdated modifier. We check for the ended with delete phase before deleting the photos.\n\nNow, when we drag to the trash in the Dock, the photos are deleted.\n\nTo customize how drag previews look during a drag, we can specify a formation.\n\nThe stack formation places the items nicely on top of one another. Great! Besides plotting and sharing our trips, Anna and I also want to let our friends follow along and participate. We’ve been working on a way for them to comment on our photos. SwiftUI’s new support for rich text editing is great for experiences like this.\n\nTextView now supports AttributedString! By passing a binding to an AttributedString into TextEditor, we’ve allowed our friends to comment on our pictures with rich text using the built-in text formatting controls. Awesome! Do you smell that? Smells like delicious rich text in SwiftUI.\n\nThere’s a menu of options for rich text and localization this year. Check out “Cook up a rich text experience in SwiftUI with AttributedString” to explore more. You can customize paragraph styles, transform attributes, and even constrain attributes that people are allowed to use in your app. Enjoy dessert with “Explore localization with Xcode” to dive into crafting great experiences for every language. It’s so exciting to see all the new places to use SwiftUI. And lots of bridges to other things. Check out this pic from my last hike.\n\nWe should go there next time. Well, it’s time for us to go take some more photos using our new apps. In your apps, go check out the brand new look and feel with the new design, and use the new APIs to polish your app. Inspect the performance of your app with the new performance instrument. Take your app to new depths with the additions to volume and the new spatial layout. Add richer experiences to your apps using the enhancements to rich text and WebKit. And take advantage of controls and widgets being in more places than ever. We hope you enjoy your adventures this year in SwiftUI. I wonder if those performance improvements might help me tackle the hills on our next hike. You're ready to go? Let's do it.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "2:27",
      "title": "Toolbar spacer",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct TripDetailView: View {\n    var body: some View {\n        NavigationStack {\n            TripList()\n                .toolbar {\n                    ToolbarItemGroup(placement: .primaryAction) {\n                        UpButton()\n                        DownButton()\n                    }\n\n                    ToolbarSpacer(.fixed, placement: .primaryAction)\n\n                    ToolbarItem(placement: .primaryAction) {\n                        SettingsButton()\n                    }\n                }\n        }\n    }\n}\n\nstruct TripList: View {\n    var body: some View {\n        Text(\"TripList\")\n    }\n}\n\nstruct UpButton: View {\n    var body: some View {\n        Button(\"Up\", systemImage: \"chevron.up\") { }\n    }\n}\n\nstruct DownButton: View {\n    var body: some View {\n        Button(\"Down\", systemImage: \"chevron.down\") { }\n    }\n}\n\nstruct SettingsButton: View {\n    var body: some View {\n        Button(\"List Settings\", systemImage: \"ellipsis\") { }\n    }\n}"
    },
    {
      "timestamp": "2:52",
      "title": "Toolbar item tint",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct InspectorView: View {\n    var body: some View {\n        NavigationStack {\n            InspectorMap()\n                .toolbar {\n                    ToolbarItem(placement: .primaryAction) {\n                        SaveLocationButton()\n                            .buttonStyle(.borderedProminent)\n                            .tint(.pink)\n                    }\n                }\n        }\n    }\n}\n\nstruct InspectorMap: View {\n    var body: some View {\n        Text(\"InspectorMap\")\n    }\n}\n\nstruct SaveLocationButton: View {\n    var body: some View {\n        Button(\"SaveLocationButton\") { }\n    }\n}"
    },
    {
      "timestamp": "3:30",
      "title": "Searchable",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct PlannerSplitView: View {\n    @State private var query: String = \"\"\n\n    var body: some View {\n        NavigationSplitView {\n            Text(\"Sidebar\")\n        } detail: {\n            Text(\"Detail\")\n        }\n        .searchable(\n            text: $query,\n            prompt: \"What are you looking for?\"\n        )\n    }\n}"
    },
    {
      "timestamp": "4:12",
      "title": "Search tab",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct HealthTabView: View {\n    @State private var text: String = \"\"\n    \n    var body: some View {\n        TabView {\n            Tab(\"Summary\", systemImage: \"heart\") {\n                NavigationStack {\n                    Text(\"Summary\")\n                }\n            }\n            Tab(\"Sharing\", systemImage: \"person.2\") {\n                NavigationStack {\n                    Text(\"Sharing\")\n                }\n            }\n            Tab(role: .search) {\n                NavigationStack {\n                    Text(\"Search\")\n                }\n            }\n        }\n        .searchable(text: $text)\n    }\n}"
    },
    {
      "timestamp": "4:37",
      "title": "Glass effect",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct ToTopButton: View {\n    var body: some View {\n        Button(\"To Top\", systemImage: \"chevron.up\") {\n            scrollToTop()\n        }\n        .padding()\n        .glassEffect()\n    }\n\n    func scrollToTop() {\n        // Scroll to top of view\n    }\n}"
    },
    {
      "timestamp": "5:20",
      "title": "Menu bar commands",
      "language": "swift",
      "code": "import SwiftUI\n\n@main\nstruct TravelPhotographyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            RootView()\n        }\n        .commands {\n            TextEditingCommands()\n        }\n    }\n}\n\nstruct RootView: View {\n    var body: some View {\n        Text(\"RootView\")\n    }\n}"
    },
    {
      "timestamp": "6:40",
      "title": "Window resize anchor",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct SettingsTabView: View {\n    @State private var selection: SectionTab = .general\n    var body: some View {\n        TabView(selection: $selection.animation()) {\n            Tab(\"General\", systemImage: \"gear\", value: .general) {\n                Text(\"General\")\n            }\n            Tab(\"Sections\", systemImage: \"list.bullet\", value: .sections) {\n                Text(\"Sections\")\n            }\n        }\n        .windowResizeAnchor(.top)\n    }\n}\n\nenum SectionTab: Hashable {\n    case general\n    case sections\n}"
    },
    {
      "timestamp": "11:24",
      "title": "@Animatable macro",
      "language": "swift",
      "code": "import SwiftUI\n\n@Animatable\nstruct LoadingArc: Shape {\n    var center: CGPoint\n    var radius: CGFloat\n    var startAngle: Angle\n    var endAngle: Angle\n    @AnimatableIgnored var drawPathClockwise: Bool\n\n    func path(in rect: CGRect) -> Path {\n        // Creates a `Path` arc using properties\n        return Path()\n    }\n}"
    },
    {
      "timestamp": "12:15",
      "title": "Spatial overlay",
      "language": "swift",
      "code": "import RealityKit\nimport SwiftUI\n\nstruct Map: View {\n    @Binding var timeAlignment: Alignment3D\n\n    var body: some View {\n        Model3D(named: \"Map\")\n            .spatialOverlay(\n                alignment: timeAlignment\n            ) {\n                Sun()\n            }\n    }\n}\n\nstruct Sun: View {\n    var body: some View {\n        Model3D(named: \"Sun\")\n    }\n}"
    },
    {
      "timestamp": "13:04",
      "title": "Manipulable and surface snapping",
      "language": "swift",
      "code": "import ARKit\nimport RealityKit\nimport SwiftUI\n\nstruct BackpackWaterBottle: View {\n    @Environment(\\.surfaceSnappingInfo) var snappingInfo: SurfaceSnappingInfo\n\n    var body: some View {\n        VStackLayout().depthAlignment(.center) {\n            waterBottleView\n                .manipulable()\n\n            Pedestal()\n                .opacity(\n                    snappingInfo.classification == .table ? 1.0 : 0.0)\n        }\n    }\n\n    var waterBottleView: some View {\n        Model3D(named: \"waterBottle\")\n    }\n}\n\nstruct WaterBottleView: View {\n    var body: some View {\n        Model3D(named: \"waterBottle\")\n    }\n}\n\nstruct Pedestal: View {\n    var body: some View {\n        Model3D(named: \"pedestal\")\n    }\n}"
    },
    {
      "timestamp": "15:00",
      "title": "SwiftUI scenes",
      "language": "swift",
      "code": "import SwiftUI\n\n@main\nstruct PhotoWalk: App {\n    var body: some Scene {\n        WindowGroup(id: \"AppContents\") {\n            PhotoWalkContent()\n        }\n    }\n}\n\nstruct PhotoWalkContent: View {\n    var body: some View {\n        Text(\"PhotoWalkContent\")\n    }\n}"
    },
    {
      "timestamp": "16:28",
      "title": "Assistive Access scene",
      "language": "swift",
      "code": "import SwiftUI\n\n@main\nstruct PhotoWalk: App {\n  var body: some Scene {\n    WindowGroup {\n      ContentView()\n    }\n\n    AssistiveAccess {\n      AssistiveAccessContentView()\n    }\n  }\n}\n\nstruct ContentView: View {\n  var body: some View {\n    Text(\"ContentView\")\n  }\n}\n\nstruct AssistiveAccessContentView: View {\n  var body: some View {\n    Text(\"AssistiveAccessContentView\")\n  }\n}"
    },
    {
      "timestamp": "17:52",
      "title": "SwiftUI presentations from RealityKit",
      "language": "swift",
      "code": "import RealityKit\nimport SwiftUI\n\nstruct PopoverComponentView: View {\n    @State private var popoverPresented: Bool = false\n    var body: some View {\n        RealityView { c in\n            let mapEntity = Entity()\n\n            let popover = Entity()\n            mapEntity.addChild(popover)\n            popover.components[PresentationComponent.self] = PresentationComponent(\n                isPresented: $popoverPresented,\n                configuration: .popover(arrowEdge: .bottom),\n                content: DetailsView()\n            )\n        }\n    }\n}\n\nstruct DetailsView: View {\n    var body: some View {\n        Text(\"DetailsView\")\n    }\n}"
    },
    {
      "timestamp": "19:24",
      "title": "Level of detail",
      "language": "swift",
      "code": "import SwiftUI\nimport WidgetKit\n\nstruct PhotoCountdownView: View {\n    @Environment(\\.levelOfDetail) var levelOfDetail: LevelOfDetail\n    var body: some View {\n        switch levelOfDetail {\n        case .default:\n            RecentPhotosView()\n        case .simplified:\n            CountdownView()\n        default:\n            Text(\"Unknown level of detail\")\n        }\n    }\n}\n\nstruct RecentPhotosView: View {\n    var body: some View {\n        Text(\"RecentPhotosView\")\n    }\n}\n\nstruct CountdownView: View {\n    var body: some View {\n        Text(\"CountdownView\")\n    }\n}"
    },
    {
      "timestamp": "20:28",
      "title": "WebView",
      "language": "swift",
      "code": "import SwiftUI\nimport WebKit\n\nstruct HikeGuideWebView: View {\n    var body: some View {\n        WebView(url: sunshineMountainURL)\n    }\n\n    var sunshineMountainURL: URL {\n        URL(string: \"sunshineMountainURL\")!\n    }\n}"
    },
    {
      "timestamp": "20:44",
      "title": "WebView with WebPage",
      "language": "swift",
      "code": "import SwiftUI\nimport WebKit\n\nstruct InAppBrowser: View {\n    @State private var page = WebPage()\n\n    var body: some View {\n        WebView(page)\n            .ignoresSafeArea()\n            .onAppear {\n                page.load(URLRequest(url: sunshineMountainURL))\n            }\n    }\n\n    var sunshineMountainURL: URL {\n        URL(string: \"sunshineMountainURL\")!\n    }\n}"
    },
    {
      "timestamp": "21:35",
      "title": "3D charts",
      "language": "swift",
      "code": "import Charts\nimport SwiftUI\n\nstruct HikePlotView: View {\n    var body: some View {\n        Chart3D {\n            SurfacePlot(\n                x: \"x\", y: \"y\", z: \"z\") { x, y in\n                    sin(x) * cos(y)\n                }\n                .foregroundStyle(Gradient(colors: [.orange, .pink]))\n        }\n        .chartXScale(domain: -3 ... 3)\n        .chartYScale(domain: -3 ... 3)\n        .chartZScale(domain: -3 ... 3)\n    }\n}"
    },
    {
      "timestamp": "22:18",
      "title": "macOS drag and drop",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct DragDropExample: View {\n    @State private var selectedPhotos: [Photo.ID] = []\n    var body: some View {\n        ScrollView {\n            LazyVGrid(columns: gridColumns) {\n                ForEach(model.photos) { photo in\n                    view(photo: photo)\n                        .draggable(containerItemID: photo.id)\n                }\n            }\n        }\n        .dragContainer(for: Photo.self, selection: selectedPhotos) { draggedIDs in\n            photos(ids: draggedIDs)\n        }\n        .dragConfiguration(DragConfiguration(allowMove: false, allowDelete: true))\n            .onDragSessionUpdated { session in\n                let ids = session.draggedItemIDs(for: Photo.ID.self)\n                    if session.phase == .ended(.delete) {\n                        trash(ids)\n                        deletePhotos(ids)\n                    }\n            }\n        .dragPreviewsFormation(.stack)\n    }\n}"
    },
    {
      "timestamp": "23:55",
      "title": "Rich text view",
      "language": "swift",
      "code": "import SwiftUI\n\nstruct CommentEditor: View {\n    @Binding var commentText: AttributedString\n\n    var body: some View {\n        TextEditor(text: $commentText)\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Adopting Liquid Glass",
        "url": "https://developer.apple.com/documentation/TechnologyOverviews/adopting-liquid-glass"
      },
      {
        "title": "Applying Liquid Glass to custom views",
        "url": "https://developer.apple.com/documentation/SwiftUI/Applying-Liquid-Glass-to-custom-views"
      },
      {
        "title": "dragContainer(for:in:selection:_:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/dragContainer(for:in:selection:_:)"
      },
      {
        "title": "draggable(containerItemID:)",
        "url": "https://developer.apple.com/documentation/SwiftUI/View/draggable(containerItemID:)"
      },
      {
        "title": "Human Interface Guidelines",
        "url": "https://developer.apple.com/design/human-interface-guidelines"
      },
      {
        "title": "Populating SwiftUI menus with adaptive controls",
        "url": "https://developer.apple.com/documentation/SwiftUI/Populating-SwiftUI-menus-with-adaptive-controls"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/256/4/353ed635-9639-48db-8c8c-69b2b7e499c1/downloads/wwdc2025-256_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/256/4/353ed635-9639-48db-8c8c-69b2b7e499c1/downloads/wwdc2025-256_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "274",
      "year": "2025",
      "title": "Better together: SwiftUI and RealityKit",
      "url": "https://developer.apple.com/videos/play/wwdc2025/274"
    },
    {
      "id": "313",
      "year": "2025",
      "title": "Bring Swift Charts to the third dimension",
      "url": "https://developer.apple.com/videos/play/wwdc2025/313"
    },
    {
      "id": "323",
      "year": "2025",
      "title": "Build a SwiftUI app with the new design",
      "url": "https://developer.apple.com/videos/play/wwdc2025/323"
    },
    {
      "id": "280",
      "year": "2025",
      "title": "Code-along: Cook up a rich text experience in SwiftUI with AttributedString",
      "url": "https://developer.apple.com/videos/play/wwdc2025/280"
    },
    {
      "id": "225",
      "year": "2025",
      "title": "Code-along: Explore localization with Xcode",
      "url": "https://developer.apple.com/videos/play/wwdc2025/225"
    },
    {
      "id": "238",
      "year": "2025",
      "title": "Customize your app for Assistive Access",
      "url": "https://developer.apple.com/videos/play/wwdc2025/238"
    },
    {
      "id": "208",
      "year": "2025",
      "title": "Elevate the design of your iPad app",
      "url": "https://developer.apple.com/videos/play/wwdc2025/208"
    },
    {
      "id": "268",
      "year": "2025",
      "title": "Embracing Swift concurrency",
      "url": "https://developer.apple.com/videos/play/wwdc2025/268"
    },
    {
      "id": "266",
      "year": "2025",
      "title": "Explore concurrency in SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2025/266"
    },
    {
      "id": "273",
      "year": "2025",
      "title": "Meet SwiftUI spatial layout",
      "url": "https://developer.apple.com/videos/play/wwdc2025/273"
    },
    {
      "id": "231",
      "year": "2025",
      "title": "Meet WebKit for SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2025/231"
    },
    {
      "id": "306",
      "year": "2025",
      "title": "Optimize SwiftUI performance with Instruments",
      "url": "https://developer.apple.com/videos/play/wwdc2025/306"
    },
    {
      "id": "290",
      "year": "2025",
      "title": "Set the scene with SwiftUI in visionOS",
      "url": "https://developer.apple.com/videos/play/wwdc2025/290"
    },
    {
      "id": "294",
      "year": "2025",
      "title": "What’s new in Metal rendering for immersive apps",
      "url": "https://developer.apple.com/videos/play/wwdc2025/294"
    },
    {
      "id": "317",
      "year": "2025",
      "title": "What’s new in visionOS 26",
      "url": "https://developer.apple.com/videos/play/wwdc2025/317"
    },
    {
      "id": "278",
      "year": "2025",
      "title": "What’s new in widgets",
      "url": "https://developer.apple.com/videos/play/wwdc2025/278"
    }
  ],
  "extractedAt": "2025-07-18T09:39:40.274Z"
}