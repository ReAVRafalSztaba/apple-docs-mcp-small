{
  "id": "324",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/324/",
  "title": "Automate your development process with the App Store Connect API",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Store, Distribution & Marketing"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "Welcome. My name is Dajinsol Jeon, an engineer on the App Store Connect team. Today, I would like to introduce updates to the App Store Connect API. Let’s begin.\n\nApp Store Connect provides many APIs to automate development processes.\n\nThis automation frees your team to focus on what matters most, building great new features for your users.\n\nThis year, App Store Connect has significantly expanded its API across key areas like app management and TestFlight. Furthermore, App Store Connect now supports new sets of APIs, which include long-awaited Webhooks API and Apple-Hosted Background Assets API.\n\nToday, I will go over some important and long-awaited updates, such as Webhooks, BuildUpload, and Feedback APIs. But first, let me quickly recap the typical app development process.\n\nApp development is an iterative process. You start with new features or bug fixes and upload a new build to App Store Connect.\n\nOnce the new build is distributed, your beta testers submit feedback and your next development phase incorporates the feedback from the previous build.\n\nThe key is you want to run this cycle as fast as possible. For example, when your users report a crash, you want to fix it as soon as possible for better user experience.\n\nThat's where today's updates come in.\n\nThe new App Store Connect APIs allow you to automate this loop, enabling much faster iteration.\n\nLet's dive into how.\n\nThis year, App Store Connect is introducing Build upload API and Feedback API to support better automation. On top of that, App Store Connect is now supporting Webhook notifications. Your system can get notified when something happens on your app and react to those events.\n\nFor instance, App Store Connect will send a Build upload state event to your webhook listener when the processing of the uploaded build is complete. It signals that you can proceed to the next step.\n\nWebhook notifications also support more events, such as Feedback events and Build beta state events, to inform you of important events about your app.\n\nThese additions will help make your development cycle faster than before.\n\nNow, let me explore these enhancements in more detail. I will begin with Webhook notifications.\n\nTraditional APIs are like constantly calling someone to ask, “Is there any news?” Your system has to keep asking App Store Connect for updates, but webhooks flip that around.\n\nWebhooks are essentially push communication between servers. Instead of your system always asking, App Store Connect sends notifications about the events.\n\nTechnically speaking, it’s an HTTP callback from App Store Connect to your server when a specified event occurs related to your app.\n\nThis allows you to build event-driven workflows, which are far more efficient than constantly polling App Store Connect for updates. So, how does this work? Assuming that you have an HTTP server, which will be your webhook listener, you start by giving App Store Connect the URL of your webhook listener, basically telling App Store Connect where to send updates.\n\nThen, whenever a relevant change occurs within App Store Connect, it sends a POST request to your registered URL.\n\nThe request payload contains information about the event. Based on that payload, your system can query the App Store Connect APIs for even more information or perform necessary actions. This year, App Store Connect is introducing webhook notifications for important events, new TestFlight feedback submissions, App version state changes, Build upload state changes, Build beta state changes, and Apple-Hosted Background Asset state changes. In order to receive those notifications from App Store Connect, you need to register your webhook listener first. Let me show you how to register your webhook listener in the App Store Connect website.\n\nFirst, navigate to the Users and Access section. Then select Integrations.\n\nWithin Integrations, there is the Webhooks section on the sidebar. Click the plus button. This will open up the panel where you can configure your webhook details.\n\nFirst, give your webhook a descriptive name. Then, enter the URL of your webhook listener. This is the endpoint where App Store Connect will send the notifications.\n\nNow pay attention to the Secret field, this is important. App Store Connect uses this secret key to sign each webhook notification.\n\nYou can use any string for the secret, but it must be known to App Store Connect and you only.\n\nThis signature allows your system to verify that notification indeed came from Apple.\n\nFinally, you need to choose which event you want to subscribe to. For today’s session, let me enable Build Upload, Build Beta State and TestFlight feedback events. Click create. That’s it. Now your servers will receive webhook notifications whenever those events occur for your app.\n\nYou can also set up your webhook using the API. This approach is particularly useful if you manage many apps or want to register webhook listeners automatically for new apps.\n\nLet me show you how to register a webhook listener with APIs.\n\nTo register a webhook listener with the APIs, you need to send a POST request to the webhook endpoint.\n\nThe attributes are very similar to what we saw in the UI. You need to send the event types you want to subscribe to, the secret App Store Connect will use to sign the event payload, and the URL of your webhook listener.\n\nUpon successful webhook creation, you will receive a 201 CREATED response. The payload will include the webhook ID, which is necessary for managing the webhook later.\n\nSo that’s what webhook notifications are, and how to register your webhook listener with App Store Connect.\n\nNow it is time to automate uploading a new build to App Store Connect using the new build upload API. One of the major enhancements that I’m introducing today is the ability to automate BuildUploads with the App Store Connect API. So why is build upload API useful? The new build upload API is a part of standardized App Store Connect APIs, which allows you to add build upload to the rest of your automation.\n\nThis also means that you can upload your build using any language or platform you prefer.\n\nAnd if you run into issues when uploading, these new APIs provide well-formatted messages to help automate error handling. This gives you a new, more flexible way to automate build upload processes. Let me show you how it works. To upload your build using the new API, start with creating BuildUploads. BuildUploads contain build information such as version and target platform.\n\nNext, provide App Store Connect with the details of your build file using the BuildUploadFiles. App Store Connect will then provide instructions on how to upload your build.\n\nThen, upload your build binary following the instructions provided.\n\nThe final step is to let App Store Connect know that the upload is complete so it can start processing the new build.\n\nNow, let me walk you through the API details.\n\nTo create a BuildUpload, make a POST request. This request should include bundle version of your build and the target platform. If your request is successful, App Store Connect will respond with a 201 CREATED status with unique ID for this new BuildUpload. The next step is to create a BuildUploadFile to let App Store Connect know the file details. You will need to include the file name, size in bytes, and asset type.\n\nIf the BuildUploadFile is created successfully, you will get 201 CREATED response. Inside the response body, you will find upload operations. This tells you exactly how to upload your binary. It gives you the URL to send your build to, instruct you to use the PUT method, and list the required headers.\n\nAs with other App Store Connect APIs for uploading files, you might receive multiple instructions to upload your build in multiple chunks if your build is large. In this case, you will need to make multiple HTTP calls with different parts of your binary. After you upload your build by following the instruction from previous response, you need to tell App Store Connect that the upload is actually finished. This step signals App Store Connect to start processing your new build.\n\nTo do this, send a PATCH request with the uploaded property true.\n\nIf successful, you will get 200 OK responses with the state COMPLETE.\n\nNow, let me open App Store Connect website to see the new build. App Store Connect website indicates that it started processing the new build.\n\nBut this raises a key question. When will it finish? And how will we know? That’s exactly where the webhook notification comes in, the one we configured earlier. It will notify you the moment this processing is complete.\n\nHere is an example of what your server receives from App Store Connect when your build is processed successfully.\n\nThe key change is the state transition from PROCESSING to COMPLETE. Once you see that COMPLETE status, you have confirmation that the build is processed and you are ready to proceed to the next step. You will also get the message signature in the X-Apple-SIGNATURE header. This tells you that App Store Connect uses the HMAC-SHA256 algorithm.\n\nYou can calculate the signature using the secret you set up earlier and the payload body you received, and compare your calculated value and the header value to verify that the notification came from App Store Connect.\n\nThat’s how you automate build upload process with the new APIs.\n\nAnd now let me move on to beta testing with TestFlight. Once your build is processed by App Store Connect, you can use TestFlight to distribute your new build to beta testers. You can assign the build directly to your specific beta tester groups. For external testers, you will need to submit the build for Beta App Review first. Finally, you will want to notify testers that the new build is available. The great news is that all of these steps can be automated using the TestFlight APIs.\n\nThese are some of the TestFlight APIs provided by App Store Connect.\n\nYou can find comprehensive information in the App Store Connect API documentation. However, the key point I want you to remember is that these APIs empower you to fully automate build distribution to your testers. While those APIs are well-established, I do want to highlight a useful new edition this year, the build beta state webhook event. This new webhook is designed to notify you immediately when TestFlight beta review is complete.\n\nHere is an example payload of a build beta state notification. The payload will show the updated state and include a specific build ID.\n\nWhen you receive this notification, you know that your build has passed review and is ready for external testing. Okay, so that’s how you can use TestFlight to distribute your new build.\n\nNow, let me talk about getting TestFlight feedback from testers. Feedback is a key part of using TestFlight. Testers can submit screenshot feedback to make suggestion or report UI issues, and crash feedback when they experience app crashes. TestFlight feedback helps you discover insights that drive your app’s evolution.\n\nA fast reaction to feedback is important for a better user experience. That’s why knowing instantly when new feedback arrives is important.\n\nAlso, since you don’t want to miss any feedback from your testers, tracking feedback with your development tools is very useful.\n\nTo address this, App Store Connect is introducing the new Feedback API along with corresponding webhoock events. This is a long-awaited capability requested by many developers. Let me explore the details.\n\nWhen there is new screenshot feedback, you will get a webhook notification with a payload similar to this.\n\nThe webhook notification contains minimal information. It has the feedback type, which is screenshot in this case, and a related instance.\n\nThe instance tells you that it is beta feedback screenshot submissions and gives the ID.\n\nYou can use this ID to retrieve the details of this feedback.\n\nWhen you call the Feedback API to retrieve screenshot feedback, the response you receive will contain various details, including device information and screenshot URL. You can use these URLs to download the screenshot images in separate calls.\n\nGetting crash feedback is essentially identical to getting screenshot feedback, but when the crash log is available, you can download it programmatically by calling crashLog endpoint. So that’s how to retrieve TestFlight feedback using the API.\n\nAnd that’s how we complete this app development process using the App Store Connect API. Webhook API and events for getting notification, Build upload API for uploading a new build, and Feedback API for retrieving feedback. But there are more.\n\nFor example, if you use Apple-Hosted Background Asset, new APIs are available to automate asset management.\n\nAnd App Store Connect will send app version state webhook events to notify you about state changes of your app in the App Store, completing your process from development, through testing, and finally to release. Moreover, App Store Connect provides many existing APIs to automate different stages of your development process. Again, automating your daily task is important because it allows you to focus more on better user experience.\n\nTo wrap up today’s session, here are some recommendations.\n\nFirst, build webhook listeners so that you can receive webhook notifications from App Store Connect. Next, implement reactive behaviors based on webhook events to automate your processes. Finally, explore what else the App Store Connect API offers and use these APIs in your automation for an even faster development cycle.\n\nAlso, don’t forget to check “Discover Apple-Hosted Background Assets” and “What’s new in App Store Connect” session for more information about this year’s edition in App Store Connect. That's all I have for today. I hope you found this session useful. Thanks for watching.",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Beta feedback crash submissions",
        "url": "https://developer.apple.com/documentation/AppStoreConnectAPI/beta-feedback-crash-submissions"
      },
      {
        "title": "Beta feedback screenshot submissions",
        "url": "https://developer.apple.com/documentation/AppStoreConnectAPI/beta-feedback-screenshot-submissions"
      },
      {
        "title": "Prerelease Versions and Beta Testers",
        "url": "https://developer.apple.com/documentation/AppStoreConnectAPI/prerelease-versions-and-beta-testers"
      },
      {
        "title": "Uploading and versioning Apple hosted background assets",
        "url": "https://developer.apple.com/documentation/AppStoreConnectAPI/managing-apple-hosted-background-assets"
      },
      {
        "title": "Webhook notifications",
        "url": "https://developer.apple.com/documentation/AppStoreConnectAPI/webhook-notifications"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/324/4/73f2b9d1-c998-4828-a323-9613bc559bd3/downloads/wwdc2025-324_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/324/4/73f2b9d1-c998-4828-a323-9613bc559bd3/downloads/wwdc2025-324_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "325",
      "year": "2025",
      "title": "Discover Apple-Hosted Background Assets",
      "url": "https://developer.apple.com/videos/play/wwdc2025/325"
    },
    {
      "id": "328",
      "year": "2025",
      "title": "What’s new in App Store Connect",
      "url": "https://developer.apple.com/videos/play/wwdc2025/328"
    }
  ],
  "extractedAt": "2025-07-18T09:18:46.884Z"
}