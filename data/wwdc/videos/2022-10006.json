{
  "id": "10006",
  "year": "2022",
  "url": "https://developer.apple.com/videos/play/wwdc2022/10006/",
  "title": "Meet Apple Maps Server APIs",
  "speakers": [],
  "duration": "",
  "topics": [
    "Maps & Location",
    "Safari & Web"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hop music ♪ ♪ Hi, everyone! My name is Ankur Soni.\n\nI'm an engineering manager on the Maps Services team here at Apple.\n\nToday, we're going to look at some exciting new capabilities coming to the Maps developer ecosystem.\n\nSo let's get started.\n\nOur Maps app offers various end-user experiences to Apple customers around the globe.\n\nWe empower developers to create beautiful geolocation experiences for their apps and websites through our MapKit and MapKit JS offerings.\n\nHowever, our Apple Maps developer offering has always been very client-centric.\n\nWe have listened carefully to all your great feedback.\n\nYou wanted a way to augment your own data on MapKit without compromising on performance or power.\n\nSo to round out our ecosystem, we are excited to introduce the Apple Maps Server APIs.\n\nWe are introducing four new server APIs: Geocoding, Reverse Geocoding, Search, Estimated Time of Arrival -- or ETA.\n\nThese APIs will help you tackle a variety of use cases while integrating Maps into your applications.\n\nWith Geocoding APIs, you can convert an address to geographic coordinates latitude and longitude.\n\nSimilarly, with Reverse Geocoding, you can do the opposite -- go from geographic coordinates to an address.\n\nWith Search API, you can give your users the capability to enter a search string to discover places like businesses, points of interest, and more.\n\nMaybe you want to overlay some of your own data and present it to the user.\n\nWith ETA API, you can help your customers get a sense of how far your business is from them or do some computations to find the closest store.\n\nThe possibilities are endless! We think you'll love server APIs for three important reasons.\n\nYou can now deliver a seamless experience by leveraging MapKit, MapKit JS, and the new Apple Maps Server APIs.\n\nThis will simplify your application architecture giving you a full Apple Maps stack.\n\nThis will make your life much easier.\n\nFor sure, it helped me.\n\nBut hey, I'm biased! The next benefit is the reduction in network calls.\n\nMany times, we find ourselves in a situation where we are making repetitive and redundant requests from our users' devices like an iPhone, iPad, websites, etcetera.\n\nMaybe you are looking up the same address over and over again from your app running on different user devices.\n\nThis causes a lot of network calls and wasted bandwidth.\n\nDelegating this common operation to your server and doing it only once in the back end using server APIs will help your application consume less bandwidth.\n\nA nice side effect of this is that now your application is power efficient too, since some processing is now delegated to your server using Apple Maps Server APIs.\n\nNow let's take some of these APIs for a spin.\n\nLet's say we are building these contact cards for your store locator application.\n\nHere we see three stores with their addresses and distance from the customer location.\n\nIn this example, we'll assume that the customer has provided their location.\n\nFor now, let's focus on building one of these contact cards.\n\nWe'll assume that these addresses are on a server which stores and serves the locations of comic bookstores.\n\nThere are many ways to build this, but for a second, let's assume we don't have these new server APIs.\n\nWhat would a basic architecture look like? How would your client application get this data? In this diagram, our application is making a call to the server to get the list of store addresses.\n\nThe back-end server returns a list of store addresses to your client device.\n\nSince we don't have the server APIs in this example, now our client application has to perform various actions on the address to build the contact card.\n\nTo perform a single task, a client may have to make multiple calls to various back-end services.\n\nHere you can see that the client app is making a call directly to the Apple Maps Server, either by using MapKit or MapKit JS.\n\nThis chattiness between a client and a back end can adversely impact the performance and scale of the application.\n\nOver a cellular network with typically high latency, using individual requests in this manner is inefficient and could result in broken connectivity or incomplete requests.\n\nWhile each request may be done in parallel, the application must send, wait, and process data for each request all on separate connections increasing the chance of failure.\n\nFinally, you'll have to merge all the responses on the client.\n\nAnd while all these calls happen, you are showing a spinner to the user.\n\nPlus, the client device is using more bandwidth and power for these extra calls.\n\nThat is not a good user experience.\n\nNow, let's look at a model architecture with access to Apple Maps Server APIs.\n\nYou can start using your back-end server as a gateway to reduce chattiness between the client and the services.\n\nJust like before, here we request a list of stores to be displayed from your client.\n\nNext, we make a request from the server to do geocoding.\n\nWe then receive responses for each API from the Apple Maps Server.\n\nThe comic book server combines the responses from each service and sends the response to the application.\n\nThis pattern can reduce the number of requests that the application makes to back-end services, and improve application performance over high-latency networks.\n\nIn summary, your client makes one call to your server to get the list of stores.\n\nYour server then does the heavy lifting to make appropriate API calls to compose a response most suited for your user.\n\nSo let's go back to our case study example here.\n\nWe'll use Geocoding and ETA API to get the distance to the store.\n\nWe can use the Geocode API to find the latitude and longitude for the store addresses, which we'll later use for ETA calculations.\n\nIn this example, first, we are going to take the address for the comic book store and URL encode it.\n\nNext, we'll use the Geocode API and pass this URL-encoded address as a query parameter.\n\nWe'll skip over the authentication details for now and come back to it in a few slides.\n\nIn the response, you can see the latitude and longitude for the address returned.\n\nWe'll repeat the same process to find the latitude and longitude for the customer's address.\n\nThis will be later used for ETA calculations.\n\nAs you can see, there are more fields in the response.\n\nI'll link the detailed documentation in the Resources section below.\n\nNow, we can set the origin and destination on the ETA API with the data we got from the Geocode API.\n\nAs I mentioned before, we have the origin latitude, longitude and the destination latitude, longitude.\n\nWe can specify up to 10 destinations here if needed.\n\nWe'll feed that in the ETA API as origin and as destination query parameters which are URL encoded.\n\nThe response to the API is a list of ETAs, one for each destination provided.\n\nIn this case, we only have one since we provided one destination.\n\nHere for our example, we are interested in distanceMeters to calculate the distance to the store.\n\nWith this, we have all the pieces we need: the store address and the distance for the user to reach your store.\n\nYou can also choose to augment or overlay this data with your own store information, like store hours.\n\nIn this way, you can leverage different server APIs to build your applications.\n\nFor other APIs, please refer to documentation linked below this talk.\n\nOne critical piece we haven't talked about is authentication.\n\nAll the Apple Maps Server APIs are authenticated.\n\nIf you are using MapKit JS, you are already halfway there.\n\nApple Maps Server APIs use the same mechanism as MapKit JS to authenticate.\n\nFirst, you'll download your private key from your developer account.\n\nYou'll then use this private key to generate a Maps auth token in JWT format.\n\nThere is a detailed doc about how to generate one linked below.\n\nYou can then exchange this Maps auth token using the token API to get Maps access token.\n\nWe'll authenticate the Maps auth token on the back end and send back Maps access token.\n\nThis is in JWT format and will be used for all API interactions.\n\nThis access token needs to be refreshed every 30 minutes by repeating the highlighted process here.\n\nNow that we saw how the authentication flow looks like, here is a simple example of how to use the token API to fetch the access token.\n\nWe are using the token API here.\n\nWe are passing the Maps auth token as a header.\n\nYou'll get back a Maps access token that can be used to access the API.\n\nThis will be in JWT format and will have standard fields like expiry, issuedAt, etcetera.\n\nAs a convenience, the expiresInSeconds field shows for how long the token is valid for.\n\nIn this case, it's 30 minutes.\n\nKeep in mind Maps auth token is not the same as Maps access token.\n\nYou exchange the Maps auth token to get a 30-minute long Maps access token to access the server APIs.\n\nLet's take a quick look at how the API interaction with Maps access token looks like.\n\nWe'll pass the Maps access token along with server API call.\n\nIt is added as a header to the API call, just like we saw a few slides ago.\n\nThe Apple Maps Server will validate the Maps access token.\n\nOnce the validation is successful, the Apple Maps Server will respond with an API response.\n\nNow that I have covered APIs and authentication, let me talk about usage limits.\n\nWith great power comes great responsibility, so use your quota wisely.\n\nThere is a daily cap on how many API calls you can make, and it's big! You'll get a quota of 25,000 service calls per day in total.\n\nKeep in mind, calling services via MapKit JS and server APIs use the same quota.\n\nIf you need more, please reach out to us.\n\nSo, how do you keep track of all this? You can view your usage stats at the Maps developer dashboard.\n\nAnybody using MapKit JS? This will look very familiar to you.\n\nThe server API usage is categorized as Services, which you can see highlighted here.\n\nWhen the daily quota is exceeded, which means more than 25,000 server API calls, we'll start rejecting new service calls and respond with HTTP status 429, which means too many requests.\n\nYou should make sure that the app experience degrades gracefully in such scenarios.\n\nIn rare scenarios, when your service makes an unusual amount of requests -- maybe it's due to some bug in your code or infrastructure -- it's possible to get HTTP status 429 as well.\n\nWhen you receive HTTP 429, it is important not to simply loop repeatedly in making requests.\n\nA better approach is to retry with increasing delays in between attempts.\n\nThis approach is known as exponential backoff.\n\nSo, what did we learn today? We are releasing four new server APIs.\n\nThese APIs are Geocoding, Reverse Geocoding, Search, and ETA.\n\nUsing these APIs in conjunction with MapKit and MapKit JS will help you better architect your apps using the Apple Maps stack.\n\nYou can optimize redundant and repetitive calls by delegating those tasks to your back-end server using Apple Maps Server APIs.\n\nDaily quota for these APIs is 25,000 and is shared with your MapKit JS service usage.\n\nAnd that's the new Apple Maps Server APIs for you.\n\nBe sure to check out the other sessions mentioned here and detailed documentation linked below.\n\nWe look forward to seeing how you take advantage of them.\n\nThank you! ♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Apple Maps Server API",
        "url": "https://developer.apple.com/documentation/AppleMapsServerAPI"
      },
      {
        "title": "Creating a Maps identifier and a private key",
        "url": "https://developer.apple.com/documentation/AppleMapsServerAPI/creating-a-maps-identifier-and-a-private-key"
      },
      {
        "title": "Creating and using tokens with Maps Server API",
        "url": "https://developer.apple.com/documentation/AppleMapsServerAPI/creating-and-using-tokens-with-maps-server-api"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10006/3/30C45DFC-CD54-4D31-894F-9954C9A58C93/downloads/wwdc2022-10006_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10006/3/30C45DFC-CD54-4D31-894F-9954C9A58C93/downloads/wwdc2022-10006_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10043",
      "year": "2023",
      "title": "Meet MapKit for SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10043"
    },
    {
      "id": "10035",
      "year": "2022",
      "title": "What's new in MapKit",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10035"
    }
  ],
  "extractedAt": "2025-07-18T10:38:34.374Z"
}