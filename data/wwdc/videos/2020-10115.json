{
  "id": "10115",
  "year": "2020",
  "url": "https://developer.apple.com/videos/play/wwdc2020/10115/",
  "title": "AutoFill everywhere",
  "speakers": [],
  "duration": "",
  "topics": [
    "Privacy & Security",
    "SwiftUI & UI Frameworks"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello and welcome to WWDC.\n\nHello, everyone. My name's Zeheng Chen, and I'm a keyboard engineer. Today I'm going to talk about AutoFill. I'm going to share some tips about how you can help your users complete some everyday tasks in your app. I'm going to talk about AutoFilling recent addresses, contact information, as well as passwords and security codes. If your app requires a log in or a new account setup, I will also talk about some best practices for that. Now let me start with an example of how AutoFill can use recent addresses. If you are building a navigation app, there maybe a text field expecting an address.\n\nAs soon as the user taps that text field, iOS will intelligently suggest an appropriate location. For example, you just checked out a restaurant and now the keyboard will suggest a restaurant address right in the in QuickType bar. So, your user is only one tap away from inputting the address. If you are interested in promoting locations from your app to the system, you can watch the WWDC 2016 session \"Increase Usage of Your App with Proactive Suggestions.\" Another example: You have a Calendar event coming up and now the keyboard will suggest event location.\n\nOr maybe you want to go home, and the keyboard will suggest your home address.\n\nNow you may be wondering: How do I do this in my app? Well, the good news is it's easy. Let me show you. You can adopt this in code. You just need to annotate your text field with the UITextContentType API, which provides the semantic meaning of these text fields to iOS. Here we are setting the Content Type to fullStreetAddress, which is all you need to get recent address AutoFill from the previous example. It's that simple.\n\nYou can also set the Content Type for a UITextView or a UITextField directly in the Xcode Attributes inspector.\n\nOne thing to pay attention to is the expected semantic meaning for each text field should be identified as precisely as possible. You can't combine multiple values for one Text Content Type property. So think about your specific use case and find the appropriate one. For example: for a navigation app, a full street address might be the right granularity, but for a weather app, a city address is likely enough.\n\nI want to pause here and take a moment to talk about privacy. At Apple, it's one of our core values. Our devices are essential to so many parts of our lives. What we share and who we share with should be entirely up to us. We design our products to protect our users' privacy and give them control over their information. It's not always easy. Sometimes building a great experience might need some level of access to personal information. Let's take a look at an example.\n\nHere I'm building a payment app that allows users to send money to their friends.\n\nHow can I help my users find their intended recipient quickly? Should I bring up a Contact Picker and let them choose, or should I suggest Contacts as they type? Either way, I probably need to request access to their Contacts, right? But is asking for Contact access a good idea? If I ask for their Contacts, users will be prompted to allow access.\n\nThis is not only going to interrupt their flow, they might not even feel comfortable sharing their Contacts.\n\nBesides, even if they do choose to share their Contacts with my app, my app now has a greater risk for potential privacy exposure because I have access to their personal information.\n\nA better approach is to use the Contact Picker API. By using this API, the app does not need access to Contacts and users will not be prompted to grant permission. There's no prompt because the app only has access to the specific information that the user chooses to share with the app.\n\nIn iOS 14, we are now suggesting Contact information in the QuickType keyboard while the user types.\n\nJust like the previous example, the app has no access to Contacts and so there will be no prompt here either.\n\nNothing is shared with the app until the user taps the QuickType bar and inserts the text.\n\nSo, how do we accomplish this? The adoption of this new Contact AutoFill feature may look familiar to you.\n\nSimilar to recent address AutoFill, you just set the Content Type to email or telephone number to get Contact AutoFill in your app.\n\nTo reiterate, if your app requires access to users' Contacts, try to use these two solutions first. This way you don't have the potential liability of holding users' data, you don't have to prompt users, and you don't have to maintain custom UI for Contact selection and suggestions.\n\nNow let's talk about Password AutoFill.\n\nEven if your app has adopted Sign in with Apple, which is the best way to get users signed in with an account quickly, Password AutoFill may be important to your app if your app has a way to log in with usernames and passwords.\n\nAnd, fortunately, it's easy to make Password AutoFill work great in your apps.\n\nFor Password AutoFill, you just need to tag the username and password fields with the corresponding content type, username: password.\n\nThe keyboard will automatically suggest the corresponding username and password saved in iCloud Keychain or another password manager.\n\nFor security codes, the Content Type you want to use is One Time Code.\n\nAutomatic Strong Passwords can hugely simplify the onboarding flow in your app. By suggesting unique strong passwords and automatically saving them to iCloud Keychain, this is not only quick and easy for the user, it also helps increase your app's security.\n\nAn adoption couldn't be easier as shown in the example here, where we are using the newPassword Content Type.\n\nThe last step is to associate your app with a domain. To learn how to do this, check out \"Automatic Strong Passwords and Security Code AutoFill\" from WWDC 2018. Let's talk about the Mac. New to macOS Big Sur, Catalyst apps now have security code AutoFill. If security code AutoFill works in your iPad apps, it will work great on macOS.\n\nAnd also new to macOS Big Sur, AppKit based apps have full support for password and security code AutoFill. AppKit now has a NSTextContentType, which is similar to UITextContentType in UIKit. Currently the supported values are .username, .password and .oneTimeCode. And one more thing that's cool is that macOS Big Sur also supports password manager apps as a data source for AutoFill.\n\nLast, but not least, if you get one thing out of this talk, it should be: Tag every text field in your app. Tag address fields, tag email fields. Tag all text fields.\n\nThanks for your time. Happy AutoFilling.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "2:06",
      "title": "Address AutoFill",
      "language": "swift",
      "code": "let streetAddressTextField = UITextField()\nsteetAddressTextField.textContentType = .fullStreetAddress  \n\n//Other address granularity: \n// .addressCity, .addressCityAndState, .addressState, .countryName\n// .postalCode, .streetAddressLine1, .streetAddressLine2, .sublocality"
    },
    {
      "timestamp": "6:17",
      "title": "Contact AutoFill",
      "language": "swift",
      "code": "// AutoFill contacts' email address\nlet emailTextField = UITextField()\nemailTextField.textContentType = .emailAddress \n\n// AutoFill contacts' phone number\nlet phoneTextField = UITextField()\nphoneTextField.textContentType = .telephoneNumber \n\n// AutoFill contacts' address \nlet streetAddressTextField = UITextField()\nsteetAddressTextField.textContentType = .fullStreetAddress"
    },
    {
      "timestamp": "7:35",
      "title": "Password AutoFill",
      "language": "swift",
      "code": "let userTextField = UITextField()\nuserTextField.textContentType = .username\n\nlet passwordTextField = UITextField()\npasswordTextField.textContentType = .password"
    },
    {
      "timestamp": "8:00",
      "title": "Security Code AutoFill",
      "language": "swift",
      "code": "let securityCodeTextField = UITextField()\nsecurityCodeTextField.textContentType = .oneTimeCode"
    },
    {
      "timestamp": "8:30",
      "title": "Automatic Strong Passwords",
      "language": "swift",
      "code": "let userTextField = UITextField()\nuserTextField.textContentType = .username\n\nlet newPasswordTextField = UITextField()\nnewPasswordTextField.textContentType = .newPassword"
    },
    {
      "timestamp": "9:20",
      "title": "Password and Security Codes AutoFill for AppKit based apps",
      "language": "swift",
      "code": "let usernameTextField = NSTextField()\nusernameTextField.contentType = .username\n\nlet passwordField = NSSecureTextField()\npasswordField.contentType = .password\n\nlet securityCodeTextField = NSTextField()\nsecurityCodeTextField.contentType = .oneTimeCode"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2020/10115/8/FFE4310A-D8B3-4E53-8BBF-D799F4F858E5/wwdc2020_10115_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2020/10115/8/FFE4310A-D8B3-4E53-8BBF-D799F4F858E5/wwdc2020_10115_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10003",
      "year": "2021",
      "title": "There and back again: Data transfer on Apple Watch",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10003"
    },
    {
      "id": "10276",
      "year": "2021",
      "title": "Use the camera for keyboard input in your app",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10276"
    },
    {
      "id": "10676",
      "year": "2020",
      "title": "Build trust through better privacy",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10676"
    },
    {
      "id": "10173",
      "year": "2020",
      "title": "Get the most out of Sign in with Apple",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10173"
    }
  ],
  "extractedAt": "2025-07-18T10:43:37.969Z"
}