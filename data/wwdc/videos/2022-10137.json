{
  "id": "10137",
  "year": "2022",
  "url": "https://developer.apple.com/videos/play/wwdc2022/10137/",
  "title": "Swift Charts: Raise the bar",
  "speakers": [],
  "duration": "",
  "topics": [
    "Health & Fitness",
    "SwiftUI & UI Frameworks"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hop music ♪ ♪ Hello, I'm Donghao.\n\nIn this session, we are going to learn more about how to build great data visualizations with Swift Charts.\n\nIn other words, we will raise the bar of what you can do with charts in your apps.\n\nA great data visualization makes your app more informative and more engaging.\n\nIn order to build a great chart in our apps, there are many things to consider.\n\nOf course, we would want our charts to faithfully communicate the underlying data and be accessible for everyone.\n\nBut charts in an app don't live in a vacuum.\n\nThey are part of the app's user interface.\n\nWe have to support localization and OS features like Dark Mode.\n\nA chart has to have a proper layout that fits seamlessly into the rest of the UI; it should support Dynamic Type and device screen sizes.\n\nWe'll also want charts to work in all platforms, and have great animation for the best look and feel.\n\nSwift Charts takes care of a lot of these basic features for you automatically, so you can focus more on building the best charts to communicate your unique data and make it accessible for everyone.\n\nSwift Charts achieves this by providing you with a declarative syntax that feels just like SwiftUI.\n\nYou specify what you want in a chart with a small amount of code, and Swift Charts will automatically produce a great chart out of the box.\n\nSwift Charts also provides a rich set of customization options, so you can style the chart to match your unique application.\n\nThis session is about giving you a deeper understanding of Swift Charts.\n\nWe will start by covering the basic building blocks of the declarative syntax: marks and the composition of marks.\n\nHere are some examples where we use charts in Apple products.\n\nAs you can see, there is a wide variety of data, chart types, and styles.\n\nInstead of providing a prebuilt component for each type of chart, Swift Charts is built on the idea of creating charts by composition.\n\nIt provides a small number of basic building blocks by combining them in different ways, you can create a wide range of charts.\n\nLet me show you how it works.\n\nTo do that, I'll need an example.\n\nAll of my teammates love pancakes, so we are having an app to track orders for a food truck selling various kinds of pancakes.\n\nHere is a chart showing the number of pancakes delivered over the last 30 days, broken down by style.\n\nThis is widely known as a bar chart.\n\nIn Swift Charts, we consider each of the six blue rectangles a mark.\n\nA mark is a graphical element that represents data.\n\nThis is a bar mark showing the number of cachapas sold over the last 30 days.\n\nIn this chart we have six bar marks, each showing a pancake style and the corresponding sales number.\n\nLet's see how this is written in code.\n\nHere we have a SwiftUI view that includes a descriptive title like \"Most Sold Style, Cachapa,\" and an empty chart.\n\nThe chart type here is the top-level view that defines a single chart.\n\nYou can add a chart in your SwiftUI application just like adding any other view.\n\nFor the rest of the talk, we'll focus on the chart part.\n\nYou can add marks to a chart.\n\nHere we have a single BarMark showing cachapa and its sales number.\n\nThis makes a chart with a single bar mark.\n\nAs shown in the screenshot, the chart fits nicely into the rest of the user interface and has a great default style.\n\nFor example, nicely rounded numbers in the X-axis.\n\nIf you add another bar mark with different name and sales, you'll get a second bar.\n\nYou can repeat this to add more bars.\n\nIn a real app, we'll probably generate these marks programmatically.\n\nYou can do so by providing an array of structs or tuples to the chart, and use a ForEach to create the bar marks with the values from each element.\n\nIf ForEach is the only content in the chart, like in this case, you can also put data in the chart directly.\n\nMany SwiftUI modifiers are available for marks.\n\nFor example, you could set the color of the bars with the .foregroundStyle modifier.\n\nHere we are setting it to a named color, which can be created in Xcode as a named asset.\n\nIt's very important that the chart is accessible for everyone.\n\nBy default, the chart will be exposed to VoiceOver users with automatically generated accessibility elements.\n\nYou can customize these with the .accessibilityLabel and .accessibilityValue modifiers.\n\nHere for example, we set the label to the name of the pancake, and the value to the sales with the suffix \"sold.\" As a result, we get a custom experience for VoiceOver users.\n\nVoiceOver: Cachapa, 916 sold. Injera, 850 sold.\n\nCrêpe, 802 sold.\n\nDonghao: Our app also tracks pancake deliveries over the days.\n\nHere, we have a view showing the number of pancakes sold in the last 30 days.\n\nThe chart gives a detailed view of each individual day.\n\nLet's see how to make this chart.\n\nHere, we have a data array with day and sales.\n\nThe day is represented by a Date value at the start of the day.\n\nWe visualize the data with bar marks, where x shows day, and the unit parameter here means that the Date values represent the duration of a calendar day, and y shows the sales of the day.\n\nAs you see on the right, we get a bar chart showing sales over the days.\n\nBar chart is not the only way to visualize this data.\n\nLet's try a line chart.\n\nThe only change we have to make is to replace BarMark with LineMark.\n\nWith a declarative syntax, it is very easy to switch between chart types in Swift Charts.\n\nThe previous chart shows total sales over time.\n\nBut the food truck service has been operating in two cities, and we would love to compare the sales between the two cities on each weekday, to help us decide where to go.\n\nThe lines in this chart show the sales from Monday to Sunday.\n\nEach line represents a city.\n\nLet's see how this is built.\n\nNow suppose we have two cities' data defined here with an array of tuples, each contains city name and the sales of the weekdays.\n\nThen, we can wrap the line chart we had before with a ForEach that loops over the series data.\n\nIn order to differentiate the two cities, we use the .foregroundStyle(by:) modifier to style the two lines by the city name.\n\nAs you can see, Swift Charts automatically picks two colors for the two cities, color the lines, and then add a legend to indicate what each color means.\n\nThe default colors are chosen to be system colors that are easy to differentiate.\n\nTo make the chart easier to read for people with color blindness, we can add symbols to the lines to further differentiate them.\n\nThis can be done by adding the .symbol(by:) modifier with city as the data.\n\nFinally, to make the lines look smoother, we can use a curve as the interpolation method for the lines.\n\nEven with the two series line chart, we can still go back to bar mark and see how it looks like.\n\nChanging the mark type to BarMark, and remove the modifiers that aren't relevant to bars, we get a stacked bar chart.\n\nThe bars are automatically stacked because we now have two bars for each month.\n\nWhile the stacked bar chart is great for showing the total sales value for the two cities, it's not very good for comparing between the two cities.\n\nTo make it easier to compare, we can turn this into a grouped bar chart with the .position(by:) modifier.\n\nSo far, we've seen bar marks and line marks.\n\nSwift Charts supports a couple of other mark types including point mark, area mark, rule mark, and rectangle mark.\n\nYou can combine these marks to build more complex charts.\n\nLet's see an example.\n\nLet's start with a line chart showing the average daily sales for each month.\n\nWhile the average is useful, we also want to see the minimum and maximum daily sales to get an idea of the more extreme values.\n\nLet's start by adding these values to the data.\n\nWe introduce daily min and daily max to each element in the data array.\n\nWe can then visualize the min and the max with an area mark, where x is showing month, and y starts at the daily min, and ends at the daily max.\n\nThis way, we have a chart showing daily average values with a line, and daily min and max values with the area around the line.\n\nA line plus area isn't the only way to visualize this kind of data.\n\nYou can easily switch to other mark types to explore more design options.\n\nFor example, here we are using a BarMark.\n\nHowever, the line doesn't seem to fit very well with the bars.\n\nLet's change the line mark to a RectangleMark, with a height of two points.\n\nThis way, the rectangle mark creates horizontal lines inside the bars showing the average value.\n\nYou can also adjust the width of these marks.\n\nHere, for example, we are setting width to be with a ratio of .6 This means the width of the bars and rectangles will be 60 percent of the width of a whole month, as you can see in the screenshot.\n\nFinally, we'd like to have an option to show the average daily sales among all the months.\n\nTo do so, we first set the foreground style to a fade gray color to deemphasize them.\n\nThen, we add a rule mark outside the ForEach, with y showing the average value.\n\nThis adds a horizontal rule.\n\nTo make it clear that the rule is showing the yearly average, we can add an annotation to the rule using the .annotation modifier.\n\nThis adds a text label at the top of the rule mark, with leading alignment.\n\nWe've discussed a couple of examples of building charts by composition.\n\nThere are many different ways to use and combine these basic marks.\n\nLike a box plot, multi-series line chart, population pyramid, range plot, stream graph, multi-series scatter plot, heat map, or even a plot of a vector field.\n\nThese are just some examples of the wide variety of charts you can build with Swift Charts.\n\nLet's dive into the next topic.\n\nPlotting data with mark properties.\n\nSwift Charts support three major types or data: quantitative, nominal, and temporal.\n\nQuantitative data is a numerical value, such as the number of products sold, the temperature of a room, or the price of a stock.\n\nSwift Charts treats Swift numerical types such as Int, Float, and Double as quantitative data.\n\nNominal data, or categorical data, represent discrete categories or groups.\n\nFor example, the name of a person, a continent, or the type of a product.\n\nYou can use a string or a custom string-valued enum as nominal data.\n\nTemporal data represents a point or interval in time.\n\nFor example, the duration of a particular day, or the exact time of a transaction.\n\nSwift Charts treats \"Date\" as temporal data.\n\nA chart works by transforming abstract data, like sales value, into the properties of marks.\n\nLet's take a look at BarMark, which can plot data with X, Y, and Foreground Style properties.\n\nIn this example, we plot sales value, which is quantitative, with the x property, and name, which is nominal, with the y property.\n\nThe resulting chart consists of horizontal bars, each showing Sales on X, and Name on Y.\n\nIf we swap Name and Sales, such that Name is on X and Sales is on Y, we get a vertical bar chart instead.\n\nAs you can see, the BarMark's behavior depends on the data type plotted with its X and Y properties.\n\nThe orientation of the bar depends on where the quantitative property is.\n\nNow, let's look at another chart with all three properties used to plot data.\n\nHere we plot Weekday, which is temporal, with X, Sales with Y, and City with Foreground Style.\n\nThe resulting chart is a stacked bar chart, where X-axis shows Weekday, Y-axis shows Sales, and the bars are colored by city.\n\nSwift Charts has six mark types, and six mark properties that you can plot data with.\n\nRemember that data can be of the three kinds, so there is a vast array of possible combinations.\n\nThis is what allows Swift Charts to support a wide range of chart designs with a small number of basic building blocks.\n\nWhen you plot data with a mark property, for example, sales with Y, Swift Charts creates a mapping that transforms the abstract data into a proper value of the property.\n\nIn this case, it will transform Sales value to Y coordinates in screen space.\n\nWe use the term \"scale\" to refer to the mapping from abstract data, like sales, to mark property, like Y position.\n\nYou can think of Scale as a function that takes data value and returns a property value.\n\nFor example, here is a yScale function that takes sales and returns the Y position of the bar.\n\nThe name \"scale\" comes from the fact that for position properties, we often scale the input value by some factor to convert it to a reasonable screen coordinate.\n\nWhen you plot data with mark properties, a scale is created to transform the data into the corresponding mark property.\n\nFor example, in this chart we have three scales, each transforming Weekday to X, Sales to Y, and City to Foreground Style, respectively.\n\nBy default, Swift Charts infers the scales automatically from the data, so you get a nice chart out of the box.\n\nYou can use the scale modifiers to configure the scales in a chart.\n\nLet's take a look at a few examples.\n\nIn this example, the Y scale is automatically inferred to be zero to 150.\n\nHowever, we'd like to fix the Y scale so that no matter what the current sales looks like, we always have a consistent Y scale.\n\nLet's change it such that the Y scale always starts at zero and ends at 200.\n\nTo do so, we can use the .chartYScale modifier, and set the domain of the scale to be zero to 200.\n\nNow, as you can see, the axis goes from zero to 200.\n\nSimilarly, we can change how the two cities map to foreground style using the .chartForegroundStyleScale modifier.\n\nNow we have new colors for the two cities.\n\nNow we know how to compose marks and plot data with mark properties.\n\nLet's dive into more customization options that Swift Charts provides.\n\nA chart consists of axes, possibly a legend, and a plot area.\n\nAxes and legends help us interpret the chart.\n\nThe plot area is the area between the two axes.\n\nThis is where we plot data with marks.\n\nAll of these elements are customizable in Swift Charts.\n\nLet's first see a few examples on how to customize axes and legends.\n\nHere is a chart showing total monthly sales.\n\nWithout customization, Swift Charts generates a default axis that features nicely rounded values.\n\nRight now, the X-axis shows a label for every quarter.\n\nLet's change it to show a label every month, and use a single-letter month label.\n\nWe'll start by adding a .chartXAxis modifier to customize the X-axis, with AxisMarks as the content.\n\nAxisMarks with no parameter recreates the default axis.\n\nLet's start by changing the axis values.\n\nSince we want to have regular calendar intervals, we can use stride(by:), similar to the stride function from the standard library.\n\nNow we have a label for each month.\n\nHowever, the default labels feel too crowded, as you see in the screenshot.\n\nSome labels get truncated because we don't have enough space for them.\n\nLet's change the labels to use a single-letter format.\n\nTo do so, let's build up the axis marks from the individual components, including AxisGridLine, AxisTick, and AxisValueLabel.\n\nLet's set the format of the label to use narrow month names.\n\nNow we have one letter for each month.\n\nThe value parameter passed into the result builder provides information about the current axis value.\n\nYou can use this to conditionally determine the existence and style of axis marks.\n\nFor example, here we have a condition that tests whether the value as a date is the first quarter of a month.\n\nIf yes, we can highlight the first month of each quarter with a different foreground style.\n\nIf not, we only display a grid line, without tick and label.\n\nSince we are now showing quarters, we can change the format to quarter style.\n\nWith the customizations we just did, we get a more unique X-axis showing quarter data, with subgrid lines showing every month.\n\nIn addition to values, axis marks have other properties that allows you to configure the general appearance and style.\n\nSuppose we'd like to have the Y-axis appear at the leading edge of the chart instead of the default trailing edge, we can set the position parameter to leading to move them to the leading edge.\n\nSwift Charts provides a default preset for the axis marks based on the axis and the type of data being visualized.\n\nYou can override the default using the preset parameter.\n\nFor example, here we are using the .extended preset for the Y-axis to help with visual alignment with the rest of the user interface.\n\nIn some charts, you may not want the axis to be visible.\n\nFor example, the purpose of the top sales chart here is to give people a brief overview, so the axes aren't really necessary.\n\nYou can pass in .hidden to the chart axis modifiers to hide an axis.\n\nLegend configuration is similar to axis.\n\nFor example, in this chart that highlights the best day and location, we already use opacity to highlight the best city, so we can hide the automatically generated legend.\n\nTo do so, we can add the .chartLegend modifier with .hidden as parameter.\n\nNow let's talk about the plot area.\n\nYou can use the .chartPlotStyle modifier to configure the plot area of a chart.\n\nIn the trailing closure, we will write a function that takes original plot area, and returns a modified plot area.\n\nLet's see a few examples.\n\nIn some cases, we might want the plot area to have an exact size or aspect ratio.\n\nFor example, in this case, we want the plot area's height to be driven by the number of categories in the chart.\n\nTo achieve this, we can apply a .frame modifier to the plot area, and return the modified plot area.\n\nThis will set the height of the plot area.\n\nWe can also use modifiers to achieve a special visual effect.\n\nFor example, in this Dark Mode chart, we use the .background modifier to add a pink background with opacity of .2 to make the chart stand out a little bit.\n\nAnd then add a 1-pt border with the same pink color.\n\nThis creates a unique visual effect for the chart.\n\nEarlier in the session we mentioned scales, which are functions that map data values to mark properties such as X and Y.\n\nSwift Charts provides a ChartProxy that allows you to access the X and Y scales in a chart.\n\nYou can use the ChartProxy's position(for:) method to get the position for a given data value, or use the value(at:) method to get the data value at a given position.\n\nThis allows you to coordinate other views with the chart.\n\nLet's look at an example.\n\nWe are going to build this interactive brushing view.\n\nHere you can select an interval from the chart with a drag gesture, and that interval will then be used to filter the rows in the details view.\n\nWe can get a chart proxy object from the .chartOverlay or .chartBackground modifiers.\n\nThese two modifiers are similar to SwiftUI's overlay and background modifiers, but they provide you with a chart proxy.\n\nTo build this example, we'll start by defining the base chart just like before.\n\nWe then add a .chartOverlay modifier that provides us with the chart proxy.\n\nInside, we have a geometry reader that gives us access to the geometry of the overlay view.\n\nThen, we have a Rectangle view that is configured to respond to SwiftUI's DragGesture.\n\nWhen the drag gesture happens, we first find the x coordinates of the start and the current locations inside the chart's plot area.\n\nThis is done by subtracting the plot area's origin from the locations provided by the gestures.\n\nOnce we have these coordinates, we can then use the chart proxy to find the corresponding Date values, and finally set it to a SwiftUI state that keeps track of the current date interval.\n\nWith the range state, we can then define a rectangle mark in the chart to visualize the currently selected date range.\n\nThis state can also be used to control other parts of your application for example, to filter the contents of the details view below the chart.\n\nThis is a simple example to illustrate how chart proxy works.\n\nYou can use it to build many interesting features, for example, this interactive chart that shows the selected day and sales value with an overlay that looks like a lollipop.\n\nIn this session, we have discussed how to create charts by composing marks; how to plot data with mark properties, and how to customize a chart.\n\nYou can go to the design sessions to learn more about how to design great app experiences with charts and how to design an effective chart.\n\nWe think you will love building data visualizations with Swift Charts.\n\nThanks for watching.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "3:48",
      "title": "Top style chart",
      "language": "swift",
      "code": "import SwiftUI\nimport Charts\n\nstruct TopStyleChart: View {\n    let data = [\n        (name: \"Cachapa\", sales: 916),\n        (name: \"Injera\", sales: 850),\n        (name: \"Crêpe\", sales: 802),\n        (name: \"Jian Bing\", sales: 753),\n        (name: \"Dosa\", sales: 654),\n        (name: \"American\", sales: 618)\n    ]\n\n    var body: some View {\n        Chart(data, id: \\.name) {\n            BarMark(\n                x: .value(\"Sales\", $0.sales),\n                y: .value(\"Name\", $0.name)\n            )\n            // Set the foreground style of the bars.\n            .foregroundStyle(.pink)\n            // Customize the accessibility label and value.\n            .accessibilityLabel($0.name)\n            .accessibilityValue(\"\\($0.sales) sold\")\n        }\n    }\n}"
    },
    {
      "timestamp": "5:12",
      "title": "Daily sales chart",
      "language": "swift",
      "code": "struct DailySalesChart: View {\n    var body: some View {\n        Chart {\n            ForEach(dailySales, id: \\.day) {\n                // Try change to LineMark.\n                BarMark( \n                    x: .value(\"Day\", $0.day, unit: .day),\n                    y: .value(\"Sales\", $0.sales)\n                )\n            }\n        }\n    }\n  \n    let dailySales: [(day: Date, sales: Int)] = [\n        (day: date(year: 2022, month: 5, day: 8), sales: 168),\n        (day: date(year: 2022, month: 5, day: 9), sales: 117),\n        (day: date(year: 2022, month: 5, day: 10), sales: 106),\n        (day: date(year: 2022, month: 5, day: 11), sales: 119),\n        (day: date(year: 2022, month: 5, day: 12), sales: 109),\n        (day: date(year: 2022, month: 5, day: 13), sales: 104),\n        (day: date(year: 2022, month: 5, day: 14), sales: 196),\n        (day: date(year: 2022, month: 5, day: 15), sales: 172),\n        (day: date(year: 2022, month: 5, day: 16), sales: 122),\n        (day: date(year: 2022, month: 5, day: 17), sales: 115),\n        (day: date(year: 2022, month: 5, day: 18), sales: 138),\n        (day: date(year: 2022, month: 5, day: 19), sales: 110),\n        (day: date(year: 2022, month: 5, day: 20), sales: 106),\n        (day: date(year: 2022, month: 5, day: 21), sales: 187),\n        (day: date(year: 2022, month: 5, day: 22), sales: 187),\n        (day: date(year: 2022, month: 5, day: 23), sales: 119),\n        (day: date(year: 2022, month: 5, day: 24), sales: 160),\n        (day: date(year: 2022, month: 5, day: 25), sales: 144),\n        (day: date(year: 2022, month: 5, day: 26), sales: 152),\n        (day: date(year: 2022, month: 5, day: 27), sales: 148),\n        (day: date(year: 2022, month: 5, day: 28), sales: 240),\n        (day: date(year: 2022, month: 5, day: 29), sales: 242),\n        (day: date(year: 2022, month: 5, day: 30), sales: 173),\n        (day: date(year: 2022, month: 5, day: 31), sales: 143),\n        (day: date(year: 2022, month: 6, day: 1), sales: 137),\n        (day: date(year: 2022, month: 6, day: 2), sales: 123),\n        (day: date(year: 2022, month: 6, day: 3), sales: 146),\n        (day: date(year: 2022, month: 6, day: 4), sales: 214),\n        (day: date(year: 2022, month: 6, day: 5), sales: 250),\n        (day: date(year: 2022, month: 6, day: 6), sales: 146)\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: .init(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "6:16",
      "title": "Sales by location with line mark",
      "language": "swift",
      "code": "struct LocationsChart: View {\n    var body: some View {\n        Chart {\n            ForEach(seriesData, id: \\.city) { series in\n                ForEach(series.data, id: \\.weekday) {\n                    LineMark(\n                        x: .value(\"Weekday\", $0.weekday, unit: .day),\n                        y: .value(\"Sales\", $0.sales)\n                    )\n                }\n                .foregroundStyle(by: .value(\"City\", series.city))\n                .symbol(by: .value(\"City\", series.city))\n                .interpolationMethod(.catmullRom)\n            }\n        }\n    }\n\n    let seriesData = [\n        (\n            city: \"Cupertino\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 54),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 88),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 49),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 125),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 67)\n            ]\n        ),\n        (\n            city: \"San Francisco\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 81),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 90),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 52),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 72),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 137)\n            ]\n        )\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "7:19",
      "title": "Sales by location with bar mark",
      "language": "swift",
      "code": "struct LocationsChart: View {\n    var body: some View {\n        Chart {\n            ForEach(seriesData, id: \\.city) { series in\n                ForEach(series.data, id: \\.weekday) {\n                    BarMark(\n                        x: .value(\"Weekday\", $0.weekday, unit: .day),\n                        y: .value(\"Sales\", $0.sales)\n                    )\n                }\n                .foregroundStyle(by: .value(\"City\", series.city))\n                .position(by: .value(\"City\", series.city))\n            }\n        }\n    }\n\n    let seriesData = [\n        (\n            city: \"Cupertino\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 54),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 88),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 49),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 125),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 67)\n            ]\n        ),\n        (\n            city: \"San Francisco\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 81),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 90),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 52),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 72),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 137)\n            ]\n        )\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "8:02",
      "title": "Monthly sales with line and area marks",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart {\n            ForEach(data, id: \\.month) {\n                AreaMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    yStart: .value(\"Daily Min\", $0.dailyMin),\n                    yEnd: .value(\"Daily Max\", $0.dailyMax)\n                )\n                .opacity(0.3)\n                LineMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    y: .value(\"Daily Average\", $0.dailyAverage)\n                )\n            }\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952, dailyAverage: 127, dailyMin: 95, dailyMax: 194),\n        (month: date(year: 2021, month: 8), sales: 4044, dailyAverage: 130, dailyMin: 96, dailyMax: 189),\n        (month: date(year: 2021, month: 9), sales: 3930, dailyAverage: 131, dailyMin: 101, dailyMax: 184),\n        (month: date(year: 2021, month: 10), sales: 4217, dailyAverage: 136, dailyMin: 96, dailyMax: 193),\n        (month: date(year: 2021, month: 11), sales: 4006, dailyAverage: 134, dailyMin: 104, dailyMax: 202),\n        (month: date(year: 2021, month: 12), sales: 3994, dailyAverage: 129, dailyMin: 96, dailyMax: 190),\n        (month: date(year: 2022, month: 1), sales: 4202, dailyAverage: 136, dailyMin: 96, dailyMax: 203),\n        (month: date(year: 2022, month: 2), sales: 3749, dailyAverage: 134, dailyMin: 98, dailyMax: 200),\n        (month: date(year: 2022, month: 3), sales: 4329, dailyAverage: 140, dailyMin: 104, dailyMax: 218),\n        (month: date(year: 2022, month: 4), sales: 4084, dailyAverage: 136, dailyMin: 93, dailyMax: 221),\n        (month: date(year: 2022, month: 5), sales: 4559, dailyAverage: 147, dailyMin: 104, dailyMax: 242),\n        (month: date(year: 2022, month: 6), sales: 1023, dailyAverage: 170, dailyMin: 120, dailyMax: 250)\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "8:46",
      "title": "Monthly sales with bar and rectangle marks",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart {\n            ForEach(data, id: \\.month) {\n                BarMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    yStart: .value(\"Daily Min\", $0.dailyMin),\n                    yEnd: .value(\"Daily Max\", $0.dailyMax),\n                    width: .ratio(0.6)\n                )\n                .opacity(0.3)\n                RectangleMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    y: .value(\"Daily Average\", $0.dailyAverage),\n                    width: .ratio(0.6),\n                    height: 2\n                )\n            }\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952, dailyAverage: 127, dailyMin: 95, dailyMax: 194),\n        (month: date(year: 2021, month: 8), sales: 4044, dailyAverage: 130, dailyMin: 96, dailyMax: 189),\n        (month: date(year: 2021, month: 9), sales: 3930, dailyAverage: 131, dailyMin: 101, dailyMax: 184),\n        (month: date(year: 2021, month: 10), sales: 4217, dailyAverage: 136, dailyMin: 96, dailyMax: 193),\n        (month: date(year: 2021, month: 11), sales: 4006, dailyAverage: 134, dailyMin: 104, dailyMax: 202),\n        (month: date(year: 2021, month: 12), sales: 3994, dailyAverage: 129, dailyMin: 96, dailyMax: 190),\n        (month: date(year: 2022, month: 1), sales: 4202, dailyAverage: 136, dailyMin: 96, dailyMax: 203),\n        (month: date(year: 2022, month: 2), sales: 3749, dailyAverage: 134, dailyMin: 98, dailyMax: 200),\n        (month: date(year: 2022, month: 3), sales: 4329, dailyAverage: 140, dailyMin: 104, dailyMax: 218),\n        (month: date(year: 2022, month: 4), sales: 4084, dailyAverage: 136, dailyMin: 93, dailyMax: 221),\n        (month: date(year: 2022, month: 5), sales: 4559, dailyAverage: 147, dailyMin: 104, dailyMax: 242),\n        (month: date(year: 2022, month: 6), sales: 1023, dailyAverage: 170, dailyMin: 120, dailyMax: 250)\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "9:19",
      "title": "Monthly sales with average line and annotation",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart {\n            ForEach(data, id: \\.month) {\n                BarMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    yStart: .value(\"Daily Min\", $0.dailyMin),\n                    yEnd: .value(\"Daily Max\", $0.dailyMax),\n                    width: .ratio(0.6)\n                )\n                .opacity(0.3)\n                RectangleMark(\n                    x: .value(\"Month\", $0.month, unit: .month),\n                    y: .value(\"Daily Average\", $0.dailyAverage),\n                    width: .ratio(0.6),\n                    height: 2\n                )\n            }\n            .foregroundStyle(.gray.opacity(0.5))\n\n            RuleMark(\n                y: .value(\"Average\", averageValue)\n            )\n            .lineStyle(StrokeStyle(lineWidth: 3))\n            .annotation(position: .top, alignment: .leading) {\n                Text(\"Average: \\(averageValue, format: .number)\")\n                    .font(.headline)\n                    .foregroundStyle(.blue)\n            }\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952, dailyAverage: 127, dailyMin: 95, dailyMax: 194),\n        (month: date(year: 2021, month: 8), sales: 4044, dailyAverage: 130, dailyMin: 96, dailyMax: 189),\n        (month: date(year: 2021, month: 9), sales: 3930, dailyAverage: 131, dailyMin: 101, dailyMax: 184),\n        (month: date(year: 2021, month: 10), sales: 4217, dailyAverage: 136, dailyMin: 96, dailyMax: 193),\n        (month: date(year: 2021, month: 11), sales: 4006, dailyAverage: 134, dailyMin: 104, dailyMax: 202),\n        (month: date(year: 2021, month: 12), sales: 3994, dailyAverage: 129, dailyMin: 96, dailyMax: 190),\n        (month: date(year: 2022, month: 1), sales: 4202, dailyAverage: 136, dailyMin: 96, dailyMax: 203),\n        (month: date(year: 2022, month: 2), sales: 3749, dailyAverage: 134, dailyMin: 98, dailyMax: 200),\n        (month: date(year: 2022, month: 3), sales: 4329, dailyAverage: 140, dailyMin: 104, dailyMax: 218),\n        (month: date(year: 2022, month: 4), sales: 4084, dailyAverage: 136, dailyMin: 93, dailyMax: 221),\n        (month: date(year: 2022, month: 5), sales: 4559, dailyAverage: 147, dailyMin: 104, dailyMax: 242),\n        (month: date(year: 2022, month: 6), sales: 1023, dailyAverage: 170, dailyMin: 120, dailyMax: 250)\n    ]\n\n    let averageValue = 137\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "13:54",
      "title": "Chart with custom scales for Y and foreground style",
      "language": "swift",
      "code": "struct LocationsChart: View {\n    var body: some View {\n        Chart {\n            ForEach(seriesData, id: \\.city) { series in\n                ForEach(series.data, id: \\.weekday) {\n                    LineMark(\n                        x: .value(\"Weekday\", $0.weekday, unit: .day),\n                        y: .value(\"Sales\", $0.sales)\n                    )\n                }\n                .foregroundStyle(by: .value(\"City\", series.city))\n                .symbol(by: .value(\"City\", series.city))\n                .interpolationMethod(.catmullRom)\n            }\n        }\n        .chartYScale(domain: 0 ... 200)\n        .chartForegroundStyleScale([\n            \"San Francisco\": .orange,\n            \"Cupertino\": .pink\n        ])\n    }\n  \n    let seriesData = [\n        (\n            city: \"Cupertino\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 54),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 88),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 49),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 42),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 125),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 67)\n            ]\n        ),\n        (\n            city: \"San Francisco\", data: [\n                (weekday: date(year: 2022, month: 5, day: 2), sales: 81),\n                (weekday: date(year: 2022, month: 5, day: 3), sales: 90),\n                (weekday: date(year: 2022, month: 5, day: 4), sales: 52),\n                (weekday: date(year: 2022, month: 5, day: 5), sales: 72),\n                (weekday: date(year: 2022, month: 5, day: 6), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 7), sales: 84),\n                (weekday: date(year: 2022, month: 5, day: 8), sales: 137)\n            ]\n        )\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "15:16",
      "title": "Chart with custom X axis",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart(data, id: \\.month) {\n            BarMark(\n                x: .value(\"Month\", $0.month, unit: .month),\n                y: .value(\"Sales\", $0.sales)\n            )\n        }\n        .chartXAxis {\n            AxisMarks( values: .stride(by: .month) ) { value in\n                AxisGridLine()\n                AxisTick()\n                AxisValueLabel(\n                    format: .dateTime.month(.narrow)\n                )\n            }\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952),\n        (month: date(year: 2021, month: 8), sales: 4044),\n        (month: date(year: 2021, month: 9), sales: 3930),\n        (month: date(year: 2021, month: 10), sales: 4217),\n        (month: date(year: 2021, month: 11), sales: 4006),\n        (month: date(year: 2021, month: 12), sales: 3994),\n        (month: date(year: 2022, month: 1), sales: 4202),\n        (month: date(year: 2022, month: 2), sales: 3749),\n        (month: date(year: 2022, month: 3), sales: 4329),\n        (month: date(year: 2022, month: 4), sales: 4084),\n        (month: date(year: 2022, month: 5), sales: 4559),\n        (month: date(year: 2022, month: 6), sales: 1023)\n    ]\n\n    let averageValue = 137\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "16:17",
      "title": "Chart with custom X axis and conditional content for axis marks",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart(data, id: \\.month) {\n            BarMark(\n                x: .value(\"Month\", $0.month, unit: .month),\n                y: .value(\"Sales\", $0.sales)\n            )\n        }\n        .chartXAxis {\n            AxisMarks(values: .stride(by: .month)) { value in\n                if value.as(Date.self)!.isFirstMonthOfQuarter {\n                    AxisGridLine().foregroundStyle(.black)\n                    AxisTick().foregroundStyle(.black)\n                    AxisValueLabel(\n                        format: .dateTime.month(.narrow)\n                    )\n                } else {\n                    AxisGridLine()\n                }\n            }\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952),\n        (month: date(year: 2021, month: 8), sales: 4044),\n        (month: date(year: 2021, month: 9), sales: 3930),\n        (month: date(year: 2021, month: 10), sales: 4217),\n        (month: date(year: 2021, month: 11), sales: 4006),\n        (month: date(year: 2021, month: 12), sales: 3994),\n        (month: date(year: 2022, month: 1), sales: 4202),\n        (month: date(year: 2022, month: 2), sales: 3749),\n        (month: date(year: 2022, month: 3), sales: 4329),\n        (month: date(year: 2022, month: 4), sales: 4084),\n        (month: date(year: 2022, month: 5), sales: 4559),\n        (month: date(year: 2022, month: 6), sales: 1023)\n    ]\n\n    let averageValue = 137\n}\n\nextension Date {\n    var isFirstMonthOfQuarter: Bool {\n        Calendar.current.component(.month, from: self) % 3 == 1\n    }\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "17:00",
      "title": "Chart with custom Y axis",
      "language": "swift",
      "code": "struct MonthlySalesChart: View {\n    var body: some View {\n        Chart(data, id: \\.month) {\n            BarMark(\n                x: .value(\"Month\", $0.month, unit: .month),\n                y: .value(\"Sales\", $0.sales)\n            )\n        }\n        .chartYAxis {\n            AxisMarks( preset: .extended, position: .leading)\n        }\n    }\n\n    let data = [\n        (month: date(year: 2021, month: 7), sales: 3952),\n        (month: date(year: 2021, month: 8), sales: 4044),\n        (month: date(year: 2021, month: 9), sales: 3930),\n        (month: date(year: 2021, month: 10), sales: 4217),\n        (month: date(year: 2021, month: 11), sales: 4006),\n        (month: date(year: 2021, month: 12), sales: 3994),\n        (month: date(year: 2022, month: 1), sales: 4202),\n        (month: date(year: 2022, month: 2), sales: 3749),\n        (month: date(year: 2022, month: 3), sales: 4329),\n        (month: date(year: 2022, month: 4), sales: 4084),\n        (month: date(year: 2022, month: 5), sales: 4559),\n        (month: date(year: 2022, month: 6), sales: 1023)\n    ]\n\n    let averageValue = 137\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    },
    {
      "timestamp": "18:26",
      "title": "Chart with plot area style",
      "language": "swift",
      "code": "struct TopStyleChart: View {\n    var body: some View {\n        Chart(data, id: \\.name) {\n            BarMark(\n                x: .value(\"Sales\", $0.sales),\n                y: .value(\"Name\", $0.name)\n            )\n            // Set the foreground style of the bars.\n            .foregroundStyle(.pink)\n            // Customize the accessibility label and value.\n            .accessibilityLabel($0.name)\n            .accessibilityValue(\"\\($0.sales) sold\")\n        }\n        .chartPlotStyle { plotArea in\n            plotArea.frame(height: 60 * 6)\n                    .background(.pink.opacity(0.2))\n                    .border(.pink, width: 1)\n        }\n    }\n\n    let data = [\n        (name: \"Cachapa\", sales: 916),\n        (name: \"Injera\", sales: 850),\n        (name: \"Crêpe\", sales: 802),\n        (name: \"Jian Bing\", sales: 753),\n        (name: \"Dosa\", sales: 654),\n        (name: \"American\", sales: 618)\n    ]\n}"
    },
    {
      "timestamp": "20:03",
      "title": "Chart with brushing interaction",
      "language": "swift",
      "code": "struct InteractiveBrushingChart: View {\n    @State var range: (Date, Date)? = nil\n\n    var body: some View {\n        Chart {\n            ForEach(data, id: \\.day) {\n                LineMark(\n                    x: .value(\"Month\", $0.day, unit: .day),\n                    y: .value(\"Sales\", $0.sales)\n                )\n                .interpolationMethod(.catmullRom)\n                .symbol(Circle().strokeBorder(lineWidth: 2))\n            }\n            if let (start, end) = range {\n                RectangleMark(\n                    xStart: .value(\"Selection Start\", start),\n                    xEnd: .value(\"Selection End\", end)\n                )\n                .foregroundStyle(.gray.opacity(0.2))\n            }\n        }\n        .chartOverlay { proxy in\n            GeometryReader { nthGeoItem in\n                Rectangle().fill(.clear).contentShape(Rectangle())\n                    .gesture(DragGesture()\n                        .onChanged { value in\n                            // Find the x-coordinates in the chart’s plot area.\n                            let xStart = value.startLocation.x - nthGeoItem[proxy.plotAreaFrame].origin.x\n                            let xCurrent = value.location.x - nthGeoItem[proxy.plotAreaFrame].origin.x\n                            // Find the date values at the x-coordinates.\n                            if let dateStart: Date = proxy.value(atX: xStart),\n                               let dateCurrent: Date = proxy.value(atX: xCurrent) {\n                                range = (dateStart, dateCurrent)\n                            }\n                        }\n                        .onEnded { _ in range = nil } // Clear the state on gesture end.\n                    )\n            }\n        }\n    }\n\n    let data: [(day: Date, sales: Int)] = [\n        (day: date(year: 2022, month: 5, day: 8), sales: 168),\n        (day: date(year: 2022, month: 5, day: 9), sales: 117),\n        (day: date(year: 2022, month: 5, day: 10), sales: 106),\n        (day: date(year: 2022, month: 5, day: 11), sales: 119),\n        (day: date(year: 2022, month: 5, day: 12), sales: 109),\n        (day: date(year: 2022, month: 5, day: 13), sales: 104),\n        (day: date(year: 2022, month: 5, day: 14), sales: 196),\n        (day: date(year: 2022, month: 5, day: 15), sales: 172),\n        (day: date(year: 2022, month: 5, day: 16), sales: 122),\n        (day: date(year: 2022, month: 5, day: 17), sales: 115),\n        (day: date(year: 2022, month: 5, day: 18), sales: 138),\n        (day: date(year: 2022, month: 5, day: 19), sales: 110),\n        (day: date(year: 2022, month: 5, day: 20), sales: 106),\n        (day: date(year: 2022, month: 5, day: 21), sales: 187),\n        (day: date(year: 2022, month: 5, day: 22), sales: 187),\n        (day: date(year: 2022, month: 5, day: 23), sales: 119),\n        (day: date(year: 2022, month: 5, day: 24), sales: 160),\n        (day: date(year: 2022, month: 5, day: 25), sales: 144),\n        (day: date(year: 2022, month: 5, day: 26), sales: 152),\n        (day: date(year: 2022, month: 5, day: 27), sales: 148),\n        (day: date(year: 2022, month: 5, day: 28), sales: 240),\n        (day: date(year: 2022, month: 5, day: 29), sales: 242),\n        (day: date(year: 2022, month: 5, day: 30), sales: 173),\n        (day: date(year: 2022, month: 5, day: 31), sales: 143),\n        (day: date(year: 2022, month: 6, day: 1), sales: 137),\n        (day: date(year: 2022, month: 6, day: 2), sales: 123),\n        (day: date(year: 2022, month: 6, day: 3), sales: 146),\n        (day: date(year: 2022, month: 6, day: 4), sales: 214),\n        (day: date(year: 2022, month: 6, day: 5), sales: 250),\n        (day: date(year: 2022, month: 6, day: 6), sales: 146)\n    ]\n}\n\nfunc date(year: Int, month: Int, day: Int = 1) -> Date {\n    Calendar.current.date(from: DateComponents(year: year, month: month, day: day)) ?? Date()\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Creating a chart using Swift Charts",
        "url": "https://developer.apple.com/documentation/Charts/Creating-a-chart-using-Swift-Charts"
      },
      {
        "title": "Swift Charts",
        "url": "https://developer.apple.com/documentation/Charts"
      },
      {
        "title": "Visualizing your app’s data",
        "url": "https://developer.apple.com/documentation/charts/visualizing_your_app_s_data"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10137/3/AB0A9BA9-E0B1-440B-98E6-E9C8A395FF34/downloads/wwdc2022-10137_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2022/10137/3/AB0A9BA9-E0B1-440B-98E6-E9C8A395FF34/downloads/wwdc2022-10137_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10133",
      "year": "2022",
      "title": "Build a productivity app for Apple Watch",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10133"
    },
    {
      "id": "110340",
      "year": "2022",
      "title": "Design an effective chart",
      "url": "https://developer.apple.com/videos/play/wwdc2022/110340"
    },
    {
      "id": "110342",
      "year": "2022",
      "title": "Design app experiences with charts",
      "url": "https://developer.apple.com/videos/play/wwdc2022/110342"
    },
    {
      "id": "10136",
      "year": "2022",
      "title": "Hello Swift Charts",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10136"
    },
    {
      "id": "10052",
      "year": "2022",
      "title": "What's new in SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10052"
    },
    {
      "id": "110929",
      "year": "2022",
      "title": "WWDC22 Day 1 recap",
      "url": "https://developer.apple.com/videos/play/wwdc2022/110929"
    }
  ],
  "extractedAt": "2025-07-18T10:37:48.038Z"
}