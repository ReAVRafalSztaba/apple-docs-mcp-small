{
  "id": "10119",
  "year": "2023",
  "url": "https://developer.apple.com/videos/play/wwdc2023/10119/",
  "title": "What’s new in Safari extensions",
  "speakers": [],
  "duration": "",
  "topics": [
    "Safari & Web"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hop ♪ ♪ David Johnson: Hello, everyone.\n\nWelcome to \"What's New in Safari Extensions.\" My name is David Johnson, and I'm a Safari extensions engineer here at Apple.\n\nToday, I'm excited to tell you about some recent developments in Safari extensions, highlighting improvements to the user experience and new features.\n\nFirst, we want to thank you for creating and sharing the over 2000 Safari extensions available on the App Store today.\n\nDemand for Safari extensions on iOS has been especially impressive.\n\nThey're often among the top categories on the App Store since their introduction at WWDC21.\n\nYour extensions empower users to customize their browsing experience across macOS, iOS, and iPadOS.\n\nThere are four ways to build Safari extensions: content blockers, share extensions, app extensions, and web extensions.\n\nSafari 17 continues to support all of these types, but the future of browser customization lies in web extensions.\n\nApple is dedicated to standardizing web extensions alongside the other major browser vendors.\n\nThis collaboration aims to improve compatibility, streamline development, and ensure a familiar experience across all browsers.\n\nWe're working together in the W3C WebExtensions Community Group, where Apple proudly serves as a cochair.\n\nBy connecting with other browser and extension developers to drive this standardization effort, we're building a stronger and more unified web extension ecosystem.\n\nBefore jumping into today's topics, I'd like to share two key details about Safari web extensions.\n\nFirst, Safari 17 will continue to support both Manifest v2 and v3 web extensions.\n\nWe'll continue to add new features to Manifest v3, so update when it makes sense for your extension.\n\nSecond, web extensions are the best way to build extensions for Safari across platforms.\n\nWith a single shared codebase, web extensions allow you to customize the capabilities of Safari on iOS, iPadOS, macOS, and now xrOS.\n\nThat's right, web extension available on iOS and iPadOS will also be available on xrOS.\n\nWeb extensions on xrOS work just like you'd expect and have the same capabilities as extensions on iOS, including the ability to inject scripts, run background content, and display popovers.\n\nWe're excited to see how your extensions enhance the browsing experience on xrOS.\n\nTo learn more about Safari on xrOS, check out \"Meet Safari for xrOS.\" With those announcements out of the way, here's what we'll cover in the rest of today's session.\n\nFirst, we'll delve into some new and updated extension APIs and how they enhance the capabilities of Safari extensions.\n\nThen we'll cover per-site permissions for Safari app extensions, offering users more control over their browsing experience.\n\nAnd finally, we'll take a look at how to ensure compatibility with both Safari Profiles and Private Browsing.\n\nUp first, new extension APIs.\n\nContent blockers are a great way to clean up web pages, remove annoyances, and block loading of scripts.\n\nContent blockers use rules defined in JSON to block or hide content without needing access to any information about what websites are visited.\n\nDeclaratively hiding content on web pages can be tricky.\n\nThat's why content blockers now support :has() selectors.\n\n:has() selectors are great because they allow your content blocker to precisely target parent elements based on their children.\n\nIn this rule example, we're hiding any elements with the class .post that also have a child element with the class .paid-promo.\n\nExtensions that hide webpage content, or block network requests, are some of the most popular types of extensions.\n\nThat's why Safari continues to support you in creating innovative and effective extensions that offer a secure and private browsing experience for your users.\n\nIf you're looking to block or modify network requests with a web extension, you should check out these updates to Declarative Net Request.\n\nDeclarative Net Request is a powerful API that provides a way for your web extension to block and modify network requests.\n\nLike content blockers, your extension provides rules in a JSON format and Safari handles the rest.\n\nThis means enhanced power efficiency, especially on battery-powered devices.\n\nSince these rules are declarative, your extension doesn't need access to webpages the user visits, increasing their privacy and security.\n\nOne big update to Declarative Net Request in Safari 16.4 is that your extension can now modify request headers.\n\nIn this example, I've defined an action that sets a custom User-Agent header for all requests made to example.com.\n\nBeyond setting headers, this action type can modify headers by adding new values, removing existing values, or even removing headers entirely from HTTP requests.\n\nModifying network requests is a powerful tool, and there are some key points to keep in mind.\n\nFirst, you must declare the declarativeNetRequestWithHostAccess permission in the manifest.\n\nIn Safari 16.4, this permission is now also required for redirect actions.\n\nYour extension must also be granted per-site permissions for any modify headers or redirect actions to be applied.\n\nThis ensures that the user has control over their data on a site-by-site basis.\n\nBy keeping these considerations in mind, you can create powerful and privacy-friendly content-blocking extensions that provide a tailored experience for your users.\n\nIf you're building an extension that uses Declarative Net Request, you may want to let your users know just how many requests it has blocked.\n\nUsing the new declarativeNetRequest.setExtensionActionOptions API, you can configure the badge text to display action counts, such as the number of blocked loads.\n\nIn this example, we set the displayActionCountAsBadgeText option to true, which is currently the only option for this API.\n\nYour extension badge will update automatically based on the actions taken.\n\nThis allows your users to easily monitor the extension's activity and effectiveness, all while keeping their browsing history private.\n\nNow I'll cover an update to the scripting API that gives you more control over the behavior of your extension.\n\nWith the registerContentScript set of APIs, you can create content scripts that can be registered, updated, or removed programmatically.\n\nThis means that you can target specific pages or conditions to apply to content scripts.\n\nIn this example, I'm registering a script to be injected onto pages that match webkit.org.\n\nThis script registration will also persist across sessions.\n\nThis new API complements the static content scripts defined in the extension manifest, giving you greater flexibility in managing content scripts and enabling you to create more advanced features for your extensions.\n\nSafari 16.4 also brings a new storage area to web extensions: the session storage area.\n\nStoring and retrieving data from session storage uses the same familiar functions as other storage areas.\n\nThis API allows you to store data in memory for the duration of your browser session, providing a fast and efficient way to access data between nonpersistent background page loads.\n\nUnlike local storage, session storage is not persisted to disk and it's cleared when Safari quits.\n\nThis makes session storage particularly useful for storing sensitive or security-related data, such as decryption keys or authentication tokens, that should not be stored in local storage.\n\nFinally, we know that making sure your extension has all the right icon sizes for different UI elements is a chore.\n\nThat's why starting in Safari 16.4, you can now create a single SVG icon that looks beautiful at any size.\n\nSafari will take care of scaling your extension's icon sharply, letting you focus on everything else.\n\nThose API updates are just some of the improvements to Safari extensions this year.\n\nNow let's talk about Safari app extensions and per-site permissions.\n\nIf you're already familiar with per-site permissions from web extensions, they work the same way for app extensions.\n\nUsers are able to grant extensions access to websites as they browse, providing for better privacy and control.\n\nWhen an extension is first turned on, it won't have access to any sites that the user visits.\n\nThe first time an extension tries to access the page, Safari will badge the extension's toolbar item alerting the user that the extension wants access to the current page.\n\nWhen the user clicks on that toolbar item, they'll be shown information about what access the extension will have, and be given the option to Allow for One Day, or Always Allow.\n\nWhen granted permission, the extension's toolbar item will be tinted to show that the extension has access to the current page.\n\nAnyone that upgrades to Safari 17 and already has Safari app extensions turned on will have all permissions migrated for those extensions.\n\nThey'll also be shown a banner giving them the option to increase their privacy.\n\nIf Ask for Each Website is chosen, all Safari app extension permissions will be reset, and your users will be able to grant your extension access to each site as they visit.\n\nThere are no new APIs to adopt to support this change in Safari 17; however, take some time to review your extension's assumptions and test how your extensions behave in Safari 17.\n\nYour users will have full control over the websites every Safari app extension can access.\n\nYour extension will automatically have access to sites when permission is granted by the user.\n\nHowever, permissions can be granted or revoked at any time.\n\nToolbar items are now shown by default for all extensions.\n\nTake a look at how your extension icon appears in Safari and supply a PDF vector icon that can be tinted appropriately.\n\nFinally, let's talk about updates to how extensions work in both Profiles and Private Browsing.\n\nIn Safari 17, users will be able to control which extensions have access to their Private Browsing windows and tabs without needing to turn off the extension in other browsing contexts.\n\nExtensions that inject scripts, or can read information about the pages a user visits, are turned off by default.\n\nHowever, extensions that don't access content, like content blockers, are automatically allowed in Private Browsing because there aren't any additional privacy concerns.\n\nHere's the updated Extensions pane in Safari settings on macOS and there are similar updates on iOS.\n\nThere's a new option to allow this extension in Private Browsing.\n\nFor extensions that are turned on, it's one click in Safari settings to allow that extension access to Private Browsing as well.\n\nProfiles are new in Safari this year.\n\nThey're a way to keep browsing data separated.\n\nProfiles contain separate history, cookies, and website data.\n\nUsers can also choose which extensions they want to turn on per profile.\n\nThis includes new tab page extensions.\n\nAnd of course, all these settings sync across all of a user's iPhone, iPad, and Macs through iCloud.\n\nThe Extensions pane in Safari settings has also been updated to list the profiles where an extension is active.\n\nHere you can see that the Sea Creator extension is active in both Work and School profiles.\n\nWhen an extension is turned on in a profile, it is an entirely new instance of that extension.\n\nThis means each instance will have a different UUID, background page, and storage.\n\nHowever, per-site permissions are shared across profiles.\n\nThat means your users only need to grant your extension access once.\n\nWhen running in a profile, an extension only has access to the windows, tabs, and other data related to that profile.\n\nIf your extension communicates with a native host app, make sure that your app expects to receive messages from multiple profiles and respects the separation of data across those profiles.\n\nWhen your app receives a call to beginRequest(with context:), decode the userInfo dictionary.\n\nIf your extension is active in a profile, there will be a profileIdentifier value for the key SFExtensionProfileKey.\n\nSince extensions have unique instances per profile, it's possible to inspect their background content separately.\n\nFrom the Develop menu in Safari 17, you can dive into the Web Extension Background Content menu item and see the background pages and service workers grouped by extension.\n\nEach extension will list its inspectable content per profile.\n\nTo learn more about the improvements to Safari developer features this year, check out \"What's new in Web Inspector\" and \"Rediscover Safari developer features.\" In summary, Safari is committed to standardizing web extensions and providing you with new APIs to create innovative and effective extensions.\n\nWe'd love for you to join in the discussion and help shape the future of web extensions by participating in the WECG.\n\nWith per-site permissions for app extensions and support for new features like :has() selectors, you can create extensions that offer a secure and private browsing experience for your users.\n\nDon't forget to update your extensions to take advantage of these new capabilities and ensure they work well with both Profiles and Private Browsing.\n\nAnd finally, provide feedback through Feedback Assistant as you test your extensions in Safari 17.\n\nThank you for listening, and have a great rest of WWDC.\n\n♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Adding a web development tool to Safari Web Inspector",
        "url": "https://developer.apple.com/documentation/SafariServices/adding-a-web-development-tool-to-safari-web-inspector"
      },
      {
        "title": "Developing a Safari Web Extension",
        "url": "https://developer.apple.com/documentation/SafariServices/developing-a-safari-web-extension"
      },
      {
        "title": "Safari Release Notes",
        "url": "https://developer.apple.com/documentation/safari-release-notes"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10119/4/83A24FCC-71E7-4137-BD8D-E165D7A1A020/downloads/wwdc2023-10119_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10119/4/83A24FCC-71E7-4137-BD8D-E165D7A1A020/downloads/wwdc2023-10119_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10279",
      "year": "2023",
      "title": "Meet Safari for spatial computing",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10279"
    },
    {
      "id": "10262",
      "year": "2023",
      "title": "Rediscover Safari developer features",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10262"
    },
    {
      "id": "10053",
      "year": "2023",
      "title": "What’s new in privacy",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10053"
    },
    {
      "id": "10118",
      "year": "2023",
      "title": "What’s new in Web Inspector",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10118"
    },
    {
      "id": "10099",
      "year": "2022",
      "title": "What’s new in Safari Web Extensions",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10099"
    },
    {
      "id": "10104",
      "year": "2021",
      "title": "Meet Safari Web Extensions on iOS",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10104"
    }
  ],
  "extractedAt": "2025-07-18T10:44:11.273Z"
}