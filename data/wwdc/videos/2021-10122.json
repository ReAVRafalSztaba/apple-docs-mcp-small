{
  "id": "10122",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10122/",
  "title": "Bring accessibility to charts in your app",
  "speakers": [],
  "duration": "",
  "topics": [
    "Accessibility & Inclusion"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Preston Lewis: Hi, my name is Preston, and today I'm going to be talking about how to bring accessibility to charts in your apps.\n\nLet's go over what we're going to cover today.\n\nFirst, we'll talk about some of the benefits of making your charts accessible.\n\nThen, we'll go over some principles for making inclusive decisions for the visual aspects of your chart.\n\nNext, we'll discuss how to make your charts perceivable and navigable with VoiceOver.\n\nAnd lastly, we'll talk about an exciting new feature called \"audio graphs\" and how to support them in your app.\n\nSo, let's get started.\n\nData is so important in our modern world.\n\nWe use data every day to make decisions about our finances, our health, our goals, and so many other things.\n\nBut in order to make any use of data, we have to be able to understand it.\n\nCharts are useful because they allow us to quickly understand what our data is telling us without having to get too deep into the details.\n\nBut charts are not inherently accessible for blind or low-vision people.\n\nThere's no value in a visual chart if you can't see it.\n\nThe accessibility team has been working hard for years to make data more accessible to blind and low-vision people.\n\nThis year, you can bring the full power of your charts to people with blindness or low vision by supporting audio graphs in your apps.\n\nLet's look at an example.\n\nHere is an example app showing historical birth rates from the year 1917 to 1975.\n\nWhen you look at this chart, you can immediately see some interesting features.\n\nYou can see that the birth rate decreased to a minimum around the year 1935, and then quickly increased to about the year 1960 and then decreased again.\n\nWe can give blind and low-vision people the same ability to quickly get a sense of the data using the new audio graph VoiceOver feature.\n\nLet me show you how it works.\n\nFirst, I'm going to find the Audio Graph menu in the VoiceOver rotor.\n\nVoiceOver: Audio graph.\n\nPreston: Then I'll swipe down until I hear \"Chart Details\".\n\nVoiceOver: Play audio graph. Chart details.\n\nPreston: Then I'll double-tap to open the audio graph Explorer view.\n\nVoiceOver: Audio graph. Heading.\n\nPreston: Then I'll navigate to the Play button to play the audio graph, which will play the data series as a continuous tone.\n\nVoiceOver: Twentieth-century birth rates.\n\nPlay audio graph. Button.\n\nPreston: Let's listen to it now.\n\nVoiceOver: Complete.\n\nPreston: Wasn't that exciting? What you just heard was the same chart as the one you see, represented auditorily instead of visually.\n\nThe pitches you heard correspond to birth rates over time with lower pitches meaning lower values and higher pitches meaning higher values.\n\nThese pitches exactly mirror the line in the visual chart.\n\nSo even without seeing the chart, the audio graph allows you to perceive its important features in just a few seconds.\n\nNow that we have a general sense of the data, let's get more precise information about the features we're interested in.\n\nThe next thing we might want to know is approximately what the maximum birth rate was and what year it occurred.\n\nTo do this, audio graphs provide an interactive mode where VoiceOver users can double-tap and hold and then drag to listen to the data at their own pace.\n\nIf they pause, VoiceOver will read the data value corresponding to the user's current position in the audio graph.\n\nLet's use this interactive mode to try to find the maximum birth rate and what year it occurred.\n\nVoiceOver: Twentieth-century birth rates.\n\nData point. 1960. 268 births per 10,000 people.\n\nPreston: By scrubbing through the audio graph until we heard the highest pitch, then pausing to hear the data value, we can tell that the maximum birth rate was 268 per 10,000 people around the year 1960.\n\nBecause we know the maximum occurred around 1960, we might even be able to infer that this peak corresponds to the baby boom era.\n\nWe can figure all of this out just from the sonified representation of the chart.\n\nOK, now let's look at an example of a different kind of chart.\n\nThis chart is a scatter plot showing the relationship between vehicle weight on the X axis and fuel efficiency on the Y axis for several different types of automobiles.\n\nIn the audio graph for this chart, each tone you hear will represent a data point for one automobile, just like each visual data point on the visual chart.\n\nThe pitch of each tone will represent the automobile's fuel efficiency in miles per gallon, so higher pitches signify more fuel-efficient vehicles.\n\nTake a second to think about what you expect to hear when I play this audio graph.\n\nLet's hear what it sounds like.\n\nTry to listen to hear whether the data is trending upwards or downwards.\n\nVoiceOver: Complete.\n\nPreston: Hopefully you heard the downward trend.\n\nThis trend means that bigger automobiles tend to be less fuel-efficient in this data set.\n\nImagine how much longer it would have taken to understand this relationship if we only had the raw data points available to us and we had to look at each data point individually.\n\nAlso, if you were listening closely, you might have heard the very high-pitched outlier in this data set.\n\nIt sticks out in the audio graph just like it sticks out in the visual chart and happens to be the only hybrid vehicle in this data set.\n\nIf you wanted to get more information about the outlier, you could use the interactive mode to navigate through the data until you hear the highest pitch, then pause to hear the data value, just like we did with the birth rate chart.\n\nIn addition to the audio graph, this explorer view provides summary information about important features of the data like shape, trend, and outliers, which are inferred from an automatic statistical analysis of this chart's data.\n\nAlong with the audio graph, VoiceOver can read this summary information to complete our understanding of the data.\n\nOK, let's quickly recap the benefits of accessible charts.\n\nMaking your charts accessible allows your data-rich applications to reach wider audiences, including blind and low-vision people.\n\nIt will empower your users by giving them helpful tools for understanding the data in your charts, which will help them leverage the incredible power of data in their personal and professional lives.\n\nAnd lastly, with new API coming this year, making your charts is easier than ever before.\n\nI'm really excited to show you how to support audio graphs in your apps, but we need to cover some general chart accessibility topics first, starting with how you can make your charts more visually accessible.\n\nThere are a few simple things you can do to make your visual charts more understandable for everybody.\n\nTake this chart as an example.\n\nThis is simple line chart that shows average monthly rainfall for tropical and arid regions.\n\nLet's apply some accessibility principles to improve the visual accessibility of this chart.\n\nFirst, it's important to use high-contrast colors whenever possible.\n\nHigh contrast between foreground and background colors makes your chart easier to look at and understand, especially for people with low vision.\n\nAs you can see, the lines' contrast against their background is pretty low.\n\nThe title and label text also seem a bit dim.\n\nLet's update these colors to have higher contrast against the background.\n\nThat's much better.\n\nYou can check contrast ratios between colors to determine whether or not the contrast is sufficient.\n\nThe Accessibility Inspector that comes bundled with Xcode has a Color Contrast Calculator that you can use.\n\nIt's good to aim for contrast ratios of at least 4.5:1.\n\nThe next thing you can do to improve your chart's visual accessibility is to avoid problematic color pairings.\n\nIt's generally good practice to avoid using red and green together if possible.\n\nRed and green color blindness is the most common type and using these colors together can make your chart difficult to understand for some people.\n\nSo here's the line chart again, with a green line representing rainfall in tropical regions and a red line representing rainfall in arid regions.\n\nYou can probably tell which data series is which using the color encoding in the legend.\n\nBut if you have deuteranopia, a form of red-green color blindness, the chart might look something more like this to you.\n\nIt would be hard for you to tell which line represents tropical rainfall and which line represents arid rainfall with these colors.\n\nLet's improve this by replacing the red color with blue.\n\nThis might not seem like a huge change, but to someone with red-green color blindness, this chart might now look like this.\n\nWith this small adjustment, it becomes easy for someone with red-green colorblindness to spot the difference between the series.\n\nIt's also good to avoid using blue and yellow together because this family of color blindness is the second most common.\n\nThese are some good improvements, but let's take this one step further by using symbols in addition to color for distinguishing your data series.\n\nUsing data symbols makes it so that people can understand your chart without having to rely on color at all.\n\nSo here's our chart again.\n\nAnd now let's add some symbols for each data series.\n\nNotice the tropical data series has circles now, and the arid data series has squares.\n\nYou can tell which series is which now just by looking at the associated symbols.\n\nThis means that even a person who can't perceive color at all can now understand your chart.\n\nIt's good to do all of these things by default, but again, sometimes design or product constraints might limit your choice of colors or decision to include symbols.\n\nIn these cases, you can still provide an accessible experience by supporting a few simple accessibility settings.\n\nIf you can't have symbols in your chart for the default case, you can still provide an accessible experience by adding symbols when the Differentiate Without Color system accessibility setting is enabled.\n\nIf you can't easily change your color set for product reasons, consider adopting higher-contrast colors when the Increase Contrast accessibility setting is set.\n\nReducing the use of transparency can also make your chart more visually accessible.\n\nIf your chart uses transparency effects, consider disabling them when the Reduce Transparency accessibility setting is on.\n\nIf you're building a macOS rather than an iOS app, each of these settings has a counterpart on macOS that you can support.\n\nYou'll find links to developer documentation for these APIs in the materials for this session.\n\nNow let's look at how we can make your data navigable for VoiceOver.\n\nNow, I love coffee, and I love programming.\n\nLet's pretend for a minute there's a relationship between the amount of coffee consumed and amount of code an engineer produces as shown in this chart.\n\nJust pretend.\n\nAlso, the data goes up to 12 cups of coffee, But don't worry, no engineers were harmed in the making of this data; it's all made up.\n\nAll right, let's see how we can make this data navigable for VoiceOver users.\n\nHere's an example snippet of code from a chart view class and its corresponding model object.\n\nThe chart view might have a reference to its model, and a function for drawing itself.\n\nAnd the model might have the chart's title and data points contained in a simple struct.\n\nThe first thing you'll want to do is make the chart a container.\n\nThis will help VoiceOver group your chart elements correctly and aid in navigation.\n\nTo make your chart a container, simply override accessibilityContainerType on your ChartView and return the semanticGroup container type.\n\nAgain, this is important for VoiceOver navigation and communicating which elements belong to the chart.\n\nNext, we need to give our chart an accessibilityLabel.\n\nThis tells VoiceOver what to speak when it encounters your chart.\n\nTypically, this should just be your chart's title or something similar that VoiceOver can speak to uniquely identify your chart in your UI.\n\nLast but not least, you'll want to provide an accessibility element for each data point.\n\nYou can provide these elements by overriding your chart view's accessibilityElements property.\n\nThis will create elements inside your chart that VoiceOver can navigate, so that people can get information about individual data points.\n\nTo implement this, you can simply use \"map\" to build an array of accessibility elements from your list of data points.\n\nFor each data point, we'll create a new UIAccessibilityElement object, specifying the ChartView as its accessibilityContainer.\n\nThen, we'll provide a string representation of the data point for the element's accessibilityValue property.\n\nThis string is what VoiceOver will speak when it navigates to these data point elements.\n\nIn your code, you'll probably want this string to be localized, and you may want to use a strings dictionary to define proper pluralization rules.\n\nFor this example, though, let's just keep it simple.\n\nLastly, we need to provide an accessibility frame for our element so that VoiceOver knows where it lives on the screen.\n\nYou'll probably already have logic for computing the frame for each data point elsewhere, since you needed this to draw the visual chart.\n\nIf you have it available, you can reuse that logic here.\n\nYou can now return your finished accessibility element for this data point.\n\nAll right! Let's see what we've accomplished so far.\n\nVoiceOver: Cups of coffee versus lines of code.\n\nZero cups. Twenty lines of code.\n\nOne cup. Thirty lines of code.\n\nTwo cups. Thirty-five lines of code.\n\nThree cups. Thirty-two lines of code.\n\nPreston: Great! As you heard, VoiceOver now speaks the title when it focuses an element inside the chart because we made the chart a semantic group and gave it an accessibility label.\n\nWe also made it possible to navigate through each data point by creating a UIAccessibilityElement to represent each one.\n\nThere's one more thing I want to mention before we move on.\n\nSometimes you might have hundreds or even thousands of data points.\n\nIn these cases, you definitely don't want to make an accessibility element for each data point because there will just be way too many to navigate.\n\nInstead, we suggest breaking up your chart into reasonable intervals and making an accessibility element for each interval rather than each data point.\n\nThis will provide a better navigation experience as well as improve performance while still being understandable.\n\nWe're not done yet; we can do even more.\n\nMaking data navigable is important, but we're still only presenting raw data to VoiceOver users one point at a time.\n\nThe value of charts is their ability to show us what the data is really telling us, and to help us look beyond individual data points.\n\nThis is where audio graphs come in.\n\nSo now -- finally -- let's talk about how to implement audio graph support for your chart.\n\nImagine we have a ChartModel struct that contains all the information we need to define a particular chart.\n\nIn your code, you probably have a model object that looks something like this already.\n\nIf you don't, don't worry.\n\nThese concepts will still apply to your code however it's organized.\n\nFor our example, let's say a chart has a title and a summary, it has an X and a Y axis, and each axis has a title as well as a numeric range representing the minimum and maximum displayable values for the axis.\n\nAnd lastly, it has an array of data points containing our chart's actual data.\n\nWe'll use the information in this example model object to enable the audio graph feature for our chart.\n\nFirst, import the Accessibility framework, then extend your ChartView class to conform to the AXChart protocol.\n\nConforming to the AXChart protocol is easy because there's only one property to support.\n\nYou just need to implement accessibilityChartDescriptor.\n\nThe chart descriptor object you construct will contain all of the information VoiceOver needs to provide the audio graph experience.\n\nLet's walk through how to build one of these chart descriptors step by step.\n\nFirst, we need to create an axis descriptor object for each axis.\n\nEach axis descriptor provides information to VoiceOver about whether it represents categorical or numerical data, the range of displayable values for the axis, the positions of grid lines, and how to format speakable data values.\n\nSince the X axis is numeric for our coffee chart, we'll create a numeric axis descriptor.\n\nIf we had categorical data on our X axis, we'd use a categorical axis descriptor instead.\n\nWe'll provide the title and range for this axis using our model object.\n\nWe can also optionally provide the positions of grid lines on this axis if we have them.\n\nWhen you provide grid lines, they're represented in the audio graph as haptic feedback during playback and interaction.\n\nWe'll leave this empty for now since we don't have any X-axis grid lines in this chart.\n\nFor numeric axes, we also need to create a valueDescriptionProvider closure.\n\nThis closure is very important because it tells VoiceOver how to speak the values on this axis, so it can say \"5 cups\" instead of just saying \"5\".\n\nFor this axis, we'll format the description to speak \"cups\" after the value.\n\nAgain, in your code, you would probably want to localize this string with proper pluralization rules, but let's keep this example simple.\n\nWe'll do the same thing to create an axis descriptor for our Y axis, except we'll format our value description to say \"lines of code\" rather than \"cups.\" Now that we have the basic structure of our chart defined, let's add the data.\n\nTo do this, you add a data series descriptor for each data series.\n\nWe only have one data series in this chart, so we'll just create one data series descriptor, passing in the name of the series, whether or not it is continuous, and the actual data points for this series.\n\nYou should pass \"false\" for \"isContinuous\" when the series is visually represented using discrete marks, like points or bars, and you should pass \"true\" when the series is visually represented as a line.\n\nFor the series' data, we need to provide an array of AXDataPoint objects.\n\nThe easiest way to do this is to just map them from the data in the chart model.\n\nWe're almost there! We just have one last thing to do.\n\nAnd that's to put all the pieces together to build our AXChartDescriptor object.\n\nWe'll give it a title, which should, again, be the title of our chart.\n\nThen, if we have one, we can provide a summary of our chart.\n\nThis is kind of like providing alt text for your chart.\n\nYou should use this property to communicate the most important insights from your data in a sentence or two.\n\nThis summary text will be presented to users in the audio graph explorer view.\n\nThis can be incredibly helpful to VoiceOver users trying to understand your chart.\n\nLastly, we'll provide the axis and data series descriptors we created earlier to complete our chart descriptor and then we'll return it.\n\nThat's it! Let's see the final result.\n\nVoiceOver: Audio graph. Play audio graph.\n\nChart details. Audio graph. Heading: Cups of coffee versus lines of code.\n\nPlay audio graph. Button.\n\nComplete.\n\nPreston: Let's recap.\n\nBe sure to make accessible choices for the visual design of your chart.\n\nThis includes using good contrast ratios, using symbols in addition to color to differentiate categories of data, and avoiding color schemes that might be problematic for colorblind users.\n\nBe sure to expose your data elements in the accessibility tree to make them perceivable and navigable to VoiceOver users.\n\nAnd last but not least, implement the AXChart protocol and accessibilityChartDescriptor on your chart view to allow VoiceOver users to get the same value out of your chart as sighted users.\n\nNow you have everything you need to create rich, accessible charts for everyone.\n\nWe hope you'll use these tools to empower your users since data is so incredibly important in our lives.\n\nCharts are one of our very best tools for understanding data in a data-rich world, and now you can bring this benefit to everyone! ♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "10:47",
      "title": "Chart Model",
      "language": "swift",
      "code": "class ChartView: UIView {\n    let model: ChartModel\n\n    func drawChart() {\n        // ...\n    }\n}\n\nstruct ChartModel {\n    let title: String\n    let dataPoints: [DataPoint]\n        \n    struct DataPoint {\n        let name: String\n        let x: Double\n        let y: Double\n    }\n}"
    },
    {
      "timestamp": "10:48",
      "title": "ChartView",
      "language": "swift",
      "code": "extension ChartView {\n    public override var accessibilityContainerType: UIAccessibilityContainerType { … }\n    public override var accessibilityLabel: String? { … }\n\n    public override var accessibilityElements: [Any]? {\n        get {\n            return model.dataPoints.map { point in\n                let axElement = UIAccessibilityElement(accessibilityContainer: self)\n                axElement.accessibilityValue = \"\\(point.x) cups, \\(point.y) lines of code\"\n                axElement.accessibilityFrameInContainerSpace = frameRect(for: point)\n                return axElement\n            }\n        }\n        set {}\n    }\n  \n private func frameRect(for dataPoint: DataPoint) -> CGRect {"
    },
    {
      "timestamp": "14:23",
      "title": "Basic chart definition example",
      "language": "swift",
      "code": "struct ChartModel {\n    let title: String\n    let summary: String\n    let xAxis: Axis\n    let yAxis: Axis\n    let data: [DataPoint]\n\n    struct Axis {\n        let title: String\n        let range: ClosedRange<Double>\n    }\n    \n    struct DataPoint {\n        let name: String\n        let x: Double\n        let y: Double\n    }\n}"
    },
    {
      "timestamp": "15:08",
      "title": "Enabling Audio Graphs",
      "language": "swift",
      "code": "import Accessibility\n\nextension ChartView: AXChart {\n\npublic var accessibilityChartDescriptor: AXChartDescriptor? {\n    get {\n    }\n    set {}\n    }\n}"
    },
    {
      "timestamp": "15:35",
      "title": "Chart Descriptor- Basic",
      "language": "swift",
      "code": "public var accessibilityChartDescriptor: AXChartDescriptor? {\n    get {\n        let xAxis = AXNumericDataAxisDescriptor( … ) \n        let yAxis = AXNumericDataAxisDescriptor(title: model.yAxis.title,\n                                                range: model.yAxis.range,\n                                                gridlinePositions:[],\n                                                valueDescriptionProvider: { value in\n            return \"\\(value) lines of code\"\n        })\n    }\n    set {}\n}"
    },
    {
      "timestamp": "16:55",
      "title": "Chart Descriptor- Continued",
      "language": "swift",
      "code": "public var accessibilityChartDescriptor: AXChartDescriptor? {\n    get {\n        let xAxis = AXNumericDataAxisDescriptor( … )\n        let yAxis = AXNumericDataAxisDescriptor( … )\n        let series = AXDataSeriesDescriptor( … )\n        return AXChartDescriptor(title: model.title,\n                                 summary: model.summary,\n                                 xAxis: xAxis,\n                                 yAxis: yAxis,\n                                 additionalAxes: [],\n                                 series: [series])\n    }\n    set {}\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "accessibilityReduceMotion",
        "url": "https://developer.apple.com/documentation/SwiftUI/EnvironmentValues/accessibilityReduceMotion"
      },
      {
        "title": "Appearance Effects and Motion",
        "url": "https://developer.apple.com/design/human-interface-guidelines/accessibility/overview/appearance-effects/"
      },
      {
        "title": "Audio graphs",
        "url": "https://developer.apple.com/documentation/Accessibility/audio-graphs"
      },
      {
        "title": "Color and Contrast",
        "url": "https://developer.apple.com/design/human-interface-guidelines/accessibility/overview/color-and-contrast/"
      },
      {
        "title": "isReduceMotionEnabled",
        "url": "https://developer.apple.com/documentation/UIKit/UIAccessibility/isReduceMotionEnabled"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10122/6/218A971D-4AB5-4417-96CE-15D01B009082/downloads/wwdc2021-10122_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10122/6/218A971D-4AB5-4417-96CE-15D01B009082/downloads/wwdc2021-10122_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10119",
      "year": "2021",
      "title": "SwiftUI Accessibility: Beyond the basics",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10119"
    }
  ],
  "extractedAt": "2025-07-18T09:08:32.083Z"
}