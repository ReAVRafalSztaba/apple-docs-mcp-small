{
  "id": "805",
  "year": "2019",
  "url": "https://developer.apple.com/videos/play/wwdc2019/805/",
  "title": "Building Great Shortcuts",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services",
    "Design"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "Hello. My name is Ian and I am an engineer on the Shortcuts Team. Today I'm going to talk to you about how users can build their own shortcuts and how you can ensure that they have the best possible experience. I'm going to cover three topics today. First, intents from your app can now be editable by the user as actions. I'm going to walk you through the parts of an action and show how users can configure them inside of their Shortcuts.\n\nYou've built great Shortcuts and we want to make sure that you can get them in front of your users, as well. I'm going to talk about some ways that you can showcase the Shortcuts from your app using Add to Siri and other APIs.\n\nAnd later on, we're going to build a multistep shortcut and make actions that work great with others by using input and output. Let's get started.\n\nI have an app called Soup Chef. And as you know, it's a super way to order clam chowder or tomato soup for delivery and pickup. And Soup Chef has made an intent for ordering soup. So, here's that inside of the Shortcuts Editor, where actions are configured.\n\nEvery action can have parameters that can be edited by the user. And these parameters were defined inside of the Intent definition file.\n\nUntil the user enters a value, parameters show the display name. And because this display name can sometimes be shown as a title in configuration UI, make sure that the display name is always capitalized.\n\nThe parameter summary is a sentence that's shown to the user that describes what the shortcut will do when it's run.\n\nSummaries should read like a sentence and start with a verb. There's no need to write the name of your app in the summary because it will be displayed at the top of the action alongside your app's icon.\n\nTry to keep the summary short and only include the parameters that must be filled out for the action to be functional.\n\nAnd whichever parameters you don't include the summary will be displayed underneath Show More which the user can expand while editing to modify the values in the remaining parameters.\n\nParameter summaries are defined in the Shortcuts app section in the Intent editor Xcode.\n\nSoup Chef has multiple different summaries. One for ordering pickup and the other for ordering delivery.\n\nSo, as the user changes between pickup and delivery inside of the action, the parameter summary will update based on the different values that the user has entered.\n\nSo, your app knows best about what the user does and when. So, we think the most relevant place to create shortcuts is right inside of your app.\n\nHere we are inside of Soup Chef and someone just ordered some tomato soup with cheese. And this is a great time to present an Add to Siri button because the user just performed an action that they're very likely to repeat.\n\nSo, to do that, Soup Chef placed the order information into an intent and then, placed the Add to Siri button into the UI.\n\nWhen the user taps on that button, the app lets them create a shortcut by showing the Add to Siri View Controller. The API to do this has not changed since iOS 12 but this year, we've expanded what users can do inside of the View Controller. So, let's look at what's new.\n\nFirst, and instead of having to say the phrase to save the shortcut, users can now just type it or use dictation. Your app should be prefilling this value by setting the suggestedInvocationPhrase property of your intent.\n\nTry to keep this phrase short and descriptive about the kind of action that the user just did. And because the user will be able to say this to Siri, it should also be easy to speak and remember. Underneath that is the Do section, which will show the user a preview of what this shortcut will do when it's run.\n\nMake sure to put as much information as possible into the intent about what the user just did. This will ensure that your app can order the soup again without having to ask too many follow-up questions. And if you've made your intent configurable, the user can tap on this, customize the shortcut, and change the values that were prefilled by, by you. And once the user is done, they will tap the Add to Siri button and return back to your app. And later on, they can go into the Shortcuts app where they can view, edit, and run the shortcut that they've made. So, now let's take a look at some places in the Shortcuts app where you can make your shortcuts discoverable, as well.\n\nMany first-time users will start off in the right-most tab which is the Gallery. Here is where we suggest prebuilt shortcuts.\n\nIn iOS 13, we added a new section to the Gallery and it has suggested shortcuts from the apps that are frequently used on your device.\n\nNow, your app's suggested shortcuts have the possibility of being prominently featured in the Gallery depending on how frequently the user interacts with your app. Your app can influence the suggestions that are displayed in the Gallery in two different ways.\n\nFirst, you can explicitly set a list of suggested shortcuts and you can use the INVoiceShortcutCenter to do this.\n\nYou can update this as often as you'd like as you learn more about your user's habits and preferences.\n\nAnd we also populate this list with recent or frequently used actions that the user has done inside of your app. Now, how does the Shortcuts app know what the user does inside of your app? In previous years, we've introduced the concept of Donation.\n\nNow, Donation allows you to tell the system about things that the user does so that the system can later suggest them at a relevant time.\n\nYou can create a, you can donate by creating an INInteraction and putting a filled out intent about what the user just did into there.\n\nAnd then, later call the Donate method.\n\nNot only does Donate allow your shortcuts to appear in the Gallery, but it also enables private on-device Siri suggestions in places like the Lock Screen or Spotlight Search.\n\nIf you'd like to know more information about how suggestions from Donations work across the system, I encourage that you watch our talks from WWDC 2018.\n\nNow, another time that users might be creating and discovering your shortcuts is when building a new shortcut inside of the app.\n\nYou'll see all of the possible actions that can be added into the shortcut in the Shortcuts editor.\n\nThere's categories across the top which contain hundreds of built-in actions for things like playing media, adding reminders, and also scripting actions like Loops and If statements. Next, is a list of suggested actions. And these suggestions are based also on device usage which includes actions from third-party apps.\n\nSince I order soup a lot, Soup Chef's action is right here at the top.\n\nSo, how did Soup Chef get all of these soup options to show up? Well, there were two easy steps to get this to work.\n\nThe first thing is to select which of the parameters is the key parameter.\n\nYour key parameter should be the one that's most identifiable to the user. And Soup Chef picked the soup type as the parameter because that's the most useful to the user, more than quantity or toppings.\n\nAnd the second step is to Donate every time the user performs that action inside of your app, if you're already donating via the INVoiceShortcutCenter or via INInteraction, then there's no additional work required by your app. As long as your donation has a value set for that key parameter, we can show it inside of suggestions.\n\nAlso, don't forget to include an image for your key parameter when donating. If you don't provide an image, then your app's icon will be displayed in the list, instead. And additionally, if you're looking for a list of all of the actions from your app that's donated or not, you can tap on the app's section to see them all.\n\nNow, let's switch gears and build a shortcut with a set of actions that work great together by using input and output.\n\nI have another app called StickyNote. And StickyNote's a notetaking app where I write down things that I need to do.\n\nStickyNote has a whole bunch of actions. And most importantly, it has an action where I can search for notes by name.\n\nAnd then, once a note is found, there are other actions that can manipulate that note such as inserting text into the note or deleting it. In iOS 13, we now allow actions from your apps to output information for others to use. So, the Find StickyNote action can output a StickyNote with an identifier, name, content, and the last date that it was modified. I want to be able to chain two shortcuts together and find a note and then, add information into that note. So, the note would be the output of the first action and I'm passing it as input to the second.\n\nSo, let's take a look at how to set up your action to produce output.\n\nFirst, we'll click on the plus button at the bottom left to add a new type representing what a StickyNote is.\n\nTypes already have an identifier and the Display Name. But the note has content and a date that it was last modified. So, we'll add those as properties so the user can access all of that information.\n\nNext, we'll select the response. And the response is the object representing the result of the intent. We will add a note property, selecting the new type that we just made.\n\nAnd finally, we'll select that property from the Output dropdown. So, if your response has multiple properties, you need to pick a single one from that Output dropdown. And this lets you control what information other actions can see. So, now that our action has output, I can add one action and after the other and select the found note as the note that I want to add text to. But for actions to work really great together, it would be nice if the note could automatically be filled in to the second action, so I don't have to select it from the first every single time.\n\nSo, if you need your actions to work great together and fill output from one into the input of another, you need to select one of your parameters as the input parameter. Here we are looking at that Add Text to Note action.\n\nAnd we'll select the note as the input parameter.\n\nSo, now when I add the second action, the Add Text to Note action, that note is already filled in to the note parameter from the first action.\n\nSo, adding inputs and outputs allows users to create multiple step shortcuts using your actions that work great together.\n\nSo, let's take a look at the things that we covered today.\n\nFirst, we walked through the components of a Shortcuts action and how users can configure one.\n\nNext, we looked at the various ways that users can discover your actions. And we started inside of your app using the Add to Siri experience.\n\nAnd next, we walked through the Gallery and the Editor inside of the Shortcuts app and talked about how to make your actions discoverable there, as well.\n\nAnd finally, we explored how to make your actions work great together taking input and produce output. The Soup Chef app is available as sample code. So, be sure to check that out if you want to see more about how all of this works.\n\nWe also had a session earlier this week where we covered more about how these can be used to power follow-up questions in Siri.\n\nThanks for attending.\n\n[ Applause ]",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Donating Shortcuts",
        "url": "https://developer.apple.com/documentation/SiriKit/donating-shortcuts"
      },
      {
        "title": "SiriKit",
        "url": "https://developer.apple.com/documentation/SiriKit"
      },
      {
        "title": "Soup Chef: Accelerating App Interactions with Shortcuts",
        "url": "https://developer.apple.com/documentation/SiriKit/soup-chef-accelerating-app-interactions-with-shortcuts"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/805fgsgar5ertqwh8k/805/805_hd_building_great_shortcuts.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2019/805fgsgar5ertqwh8k/805/805_sd_building_great_shortcuts.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "806",
      "year": "2019",
      "title": "Designing Great Shortcuts",
      "url": "https://developer.apple.com/videos/play/wwdc2019/806"
    },
    {
      "id": "213",
      "year": "2019",
      "title": "Introducing Parameters for Shortcuts",
      "url": "https://developer.apple.com/videos/play/wwdc2019/213"
    }
  ],
  "extractedAt": "2025-07-18T09:18:20.518Z"
}