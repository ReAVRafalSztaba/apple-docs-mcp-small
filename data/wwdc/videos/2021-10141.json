{
  "id": "10141",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10141/",
  "title": "Improve global streaming availability with HLS Content Steering",
  "speakers": [],
  "duration": "",
  "topics": [
    "Audio & Video"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Naiwei Zheng: Hello. Welcome to WWDC.\n\nMy name is Zheng Naiwei.\n\nI'm from Apple's HLS Streaming Team.\n\nToday I'm going to talk about a new feature in HLS called Content Steering, and how it can improve global streaming availability.\n\nToday's network connectivity is at global scale.\n\nStreaming media providers deliver their contents all around the world.\n\nHowever, delivering contents at the global scale comes with enormous amount of challenges the industry has to solve.\n\nWe, HLS Streaming Team at Apple, also recognize these challenging problems and are constantly working to provide solutions.\n\nToday, we will be focusing on the problem of availability.\n\nSpecifically, network congestion mitigation and error recovery.\n\nTo help us understand these problems, let's take a look at an example.\n\nLet's assume a popular streaming provider in Asia deploys its CDN infrastructures in the following three countries: China, Japan, and Singapore.\n\nIn this graph, we are showing a state where everything is working in perfect condition.\n\nWe have users in China streaming from Chinese CDN and users from Japan streaming from Japanese CDN, and both CDN networks are performing at capable level.\n\nNow, let's introduce some change.\n\nLet's say a while later, users in China streaming from the Chinese CDN has greatly increased, to a degree that CDN network is becoming overloading.\n\nWith the HLS technologies we had, it's difficult to fully address this issue of network congestion.\n\nEven though we could assign new users to different CDN, it's, however, difficult to instruct existing clients to use a different CDN, and existing traffic will continuously overload the current CDN.\n\nWith our new HLS Content Steering feature, content providers can solve this problem by hosting their own steering server.\n\nIt establishes a side channel with all latest HLS clients to update them with the latest CDN policy.\n\nFor example, it can send a policy update to 30 percent of the existing clients in China to switch to Japanese CDN.\n\nAnd the clients receiving the policy update will honor the change and redirect their network traffics to the Japanese CDN.\n\nNow the network congestion in the Chinese CDN is mitigated.\n\nBut network congestion is only one of the many availability problems.\n\nWhat happens when there's a network outage? Let's take another example.\n\nSay the network path from users in Japan to the Japanese CDN has experienced a regional outage.\n\nWith HLS technologies we had, content providers can list our fallback variant streams in master playlist, so clients can try to walk through the list until it reaches a working CDN.\n\nBut this approach is preliminary in the sense that content provider is unable to change the ordering or priorities of the CDNs listed in the master playlist in real time.\n\nHowever, with the help of the steering server, clients will be updated with the latest CDN priorities at near real time.\n\nLet's rewind a bit to see how it can facilitate the client with more efficient error recovery.\n\nBefore the network outage, clients in Japan periodically pull for CDN priority list updates from the steering server.\n\nLet's say in the latest update, clients in Japan received the following CDN priority list where the Japanese CDN being most preferred, following Singapore and then China.\n\nCurrently, users in Japan are streaming from the Japanese CDN.\n\nNow when the network outage happens, the Japanese CDN will be marked as penalized from the priority list.\n\nThe client will move on to the next CDN in the priority list, which in this case, the CDN in Singapore, and redirect their network traffics.\n\nNow the users in Japan will be able to continue watching their shows without interrupt.\n\nWhat our example showed you is just a high-level overview of our new HLS feature, Content Steering.\n\nNow let's dive deeper to show you how to integrate this amazing feature into your streams.\n\nIt's just a simple listing of different CDN URLs duplicating all available variants.\n\nAs explained before, a playlist like this has a constant and final ordering of CDN priorities.\n\nContent providers cannot change it later during the playback.\n\nNow let's see how to add Content Steering support to this playlist.\n\nYou may be surprised how little the change introduced.\n\nIn fact, the changes are backward-compatible with current HLS clients.\n\nLet's walk through the additions.\n\nMost notably, we now group variant streams into different pathways by the PATHWAY-ID attributes on each variant stream, where each pathway typically corresponds to one CDN.\n\nIn this example, we group the variant streams into pathway CN, JP, and SG, representing CDNs in China, Japan, and Singapore, respectively.\n\nHowever, a pathway may contain variant streams from different CDNs to enable more advanced use case.\n\nWhen the client selects a pathway, only the variant streams from that pathway is eligible for variant selection.\n\nThe PATHWAY-ID attribute on the new CONTENT-STEERING tag specifies the initial pathway to use at playback startup.\n\nSo, in this case, the client will only choose from variant streams belonging to the CN pathway at the initial playback.\n\nThe SERVER-URI attribute specifies where is the Content Steering server.\n\nClients will pull for Content Steering updates from this URI.\n\nBut what if your playlist contains media groups? No problem.\n\nIt's still very simple to enable Content Steering.\n\nAll you have to do is to duplicate the media groups for each pathway and assign them with unique GROUP-IDs.\n\nFor example, the audio group in this playlist is being duplicated for each pathway, with the GROUP-ID set to CN-audio for the CN pathway and et cetera.\n\nWhen an HLS client loaded a master playlist with Content Steering tag, it triggers a slightly different startup routine.\n\nFirst, when it performs initial variant stream selection, it will only use variant streams from the initial pathway.\n\nThen it will load and start playing the selected variant stream and its media segments as usual.\n\nBut in parallel to the normal playback routine, the client will start making periodic Steering Manifest requests in background.\n\nLet's take a look of what a Steering Manifest request looks like.\n\nIt's just a simple HTTP GET request sent to this resolved URI from the SERVER-URI attribute based on the master playlist URL.\n\nThe steering server will respond with a Steering Manifest.\n\nLet's dissect its format with an example.\n\nThe Steering Manifest is a JSON document.\n\nThe steering server can craft customized Steering Manifests for each client.\n\nThis gives steering server great potential in shaping its managed network traffic.\n\nThe most important property in this Steering Manifest is the PATHWAY-PRIORITY field.\n\nIt's a list of pathway IDs ordered by their priorities, with the first being the most preferred.\n\nHere in this example, we have a priority of CN pathway being most preferred, followed by JP and then SG.\n\nUpon receiving the Steering Manifest from the steering server, the client will perform Content Steering evaluation to determine whether to switch to a different pathway.\n\nFirst, the client will exclude variant streams ineligible for selection.\n\nThis includes penalized variant streams due to network errors.\n\nAnd also, variant streams with unsupported codecs, just like usual variant selection would do.\n\nIt will select a pathway that has at least one eligible variant streams and has highest pathway priority among all eligible pathways.\n\nIf the chosen pathway is different from the currently using pathway, the client will immediately switch to the new pathway.\n\nIf no suitable pathway is chosen or is already using the chosen pathway, client will do nothing and keep playing using the current pathway.\n\nFinally, the client will schedule for the next Steering Manifest request to pull for latest updates from the steering server.\n\nSo how does this scheduling work? Let's review the Steering Manifest.\n\nNotice that there's a TTL field which specify the number of seconds the client should wait until sending the next Steering Manifest request.\n\nIn this example, after the client performed the Content Steering evaluation using this Steering Manifest's pathway priority list, it will schedule the next Steering Manifest request in 300 seconds, which is five minutes.\n\nIt's also worth noting that steering server is able to change this TTL value in each Steering Manifest response, affecting how long the client should schedule the next request.\n\nIt's also useful for steering server to inject some randomness to each client's TTL value to distribute server load.\n\nIn addition, the optional RELOAD-URI field tells the clients where to request the next Steering Manifest.\n\nSteering server can leverage this field to inject client-specific state or session data in the URL to be echoed back in the next request.\n\nNow you have seen the major technical details of Content Steering.\n\nLet's go back to one of our early examples to see how it works under the hood.\n\nLet's say in this case, all users in China have received a Steering Manifest with the CN pathway being most preferred, and the corresponding Chinese CDN is being overloaded because of the increasing number of users.\n\nSo the steering server came into action, and sending out a different Steering Manifest to 30 percent of the users in China, with the most preferred pathway changed to JP.\n\nAfter performing a Content Steering evaluation, those 30 percent clients in China will switch to the JP pathway, redirecting their network traffics to the CDN in Japan, resolving the network congestion situation in Chinese CDN.\n\nTo wrap up, we introduced the new HLS feature of Content Steering, explained how it works, and how to integrate it in your streams.\n\nWith this amazing feature, you will be able to fine-tune your global streaming availability.\n\nFor more technical details, follow the link below this video for \"HLS Content Steering Specification\".\n\nI'd also like to tell you that playlists and Steering Manifest validation is also supported in our latest HTTP Live Streaming Tools.\n\nI'd also like to acknowledge feedbacks and helps we received from industry members in the HLS Interest IETF forum.\n\nFuture feedbacks and suggestions are also welcomed.\n\nAnd with all these in place, the HLS Content Steering will be available to developers and users in this year's WWDC Seed builds.\n\nSo, if you want a better global streaming delivery with more availability, act now to integrate HLS Content Steering in your streams and bring your customers a better streaming experience.\n\nThank you very much.\n\n♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10141/4/E5EA0996-E08C-4259-B644-23C1F47B339A/downloads/wwdc2021-10141_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10141/4/E5EA0996-E08C-4259-B644-23C1F47B339A/downloads/wwdc2021-10141_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10144",
      "year": "2022",
      "title": "Deliver reliable streams with HLS Content Steering",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10144"
    }
  ],
  "extractedAt": "2025-07-18T09:23:29.597Z"
}