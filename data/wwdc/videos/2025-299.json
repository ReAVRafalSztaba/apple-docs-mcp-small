{
  "id": "299",
  "year": "2025",
  "url": "https://developer.apple.com/videos/play/wwdc2025/299/",
  "title": "Deliver age-appropriate experiences in your app",
  "speakers": [],
  "duration": "",
  "topics": [
    "Privacy & Security",
    "System Services"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "Hello, and welcome to “Deliver age-appropriate experiences in your app”. I’m Austin, and I’m an Engineering Manager for iCloud Family. In this video, I will cover three topics. First, helping protect kids online. Then, I’ll go over the Declared Age Range framework. And lastly, I will show you how to request an age range and build a great age-appropriate experience. I'll start by going over the background that led us to create the Declared Age Range framework. At Apple, our goal is to create technology that empowers people and enriches their lives while helping them stay safe online and protect their privacy. We want people of all ages to be able to have great, safe experiences with our products and services.\n\nIn February 2025, Apple released a white paper called “Helping Protect Kids Online.” Protecting kids from online threats, whether they’re young children, preteens, or teenagers, requires constant effort.\n\nThe digital world is increasingly complex, and the risks to families are ever-changing. Building on Apple's profound commitment to privacy, security, and safety, we are continuing to enhance the trusted tools that we provide to help parents protect their kids in a way that is designed around privacy. In March 2025, Apple launched a streamlined child setup flow. It enables child-appropriate default settings if parents prefer to wait until later to finish setting up a child account. And in iOS 26, Apple is providing parents with the ability to easily correct the age that’s associated with their child’s account, if it was previously set up incorrectly. Also, in iOS 26, the App Store’s global age ratings changed to provide more granularity. There are now five categories: 4+, 9+, 13+, 16+, 18+. The ratings add more useful information on product pages and give parents further insight into their kids’ experiences. And lastly is the introduction of the new Declared Age Range API, the focus of this video. Next, I’ll go over the specifics of the Declared Age Range framework.\n\nIn an age-appropriate experience, the app can ask for an age range. The prompt itself is customized based on what the app requests, and the age of the user. Users can choose to share or not to share. Based on that decision, the app can tailor its experience. Here, the app is asking if the user is 16 or older. In order to preserve privacy, the app provides a set of ages that are important to their experience. The API will then return an age range, which is a set of two numbers. This helps keep the birth date private. The user only has to reveal what’s necessary in order to get the appropriate experience. Now, I will go through how different users can declare their age ranges. In this example, the app asks for the ages 13 and 16.\n\nOlivia is 14, so she can declare that she is in the 13 to 15 range.\n\nEmily is 9, so she can share that she is 12 or under.\n\nAnn is 42, so she can share that she is 16 or over. In each case, the birth date is not revealed to the app. The Declared Age Range framework is for child and teen experiences. Therefore, the API will set a regional max for any age provided. The max will always be the age of an adult in that region.\n\nApps have their own unique requirements. Each app can specify up to three different ages in one request, which results in four different ranges. Each range must be at least two years in duration.\n\nDeciding which ages are right for your app is fundamentally about what experiences an app wants to present or hide from users of different ages.\n\nSome apps may base this off of regional requirements or decide it’s required for the best experience. During child onboarding, a parent can learn more about Declared Age Range, confirm their child’s age, and choose which sharing option is appropriate for their child. A parent can also manage this by going to Family & Settings, tap on a child, go to Apple Account & Password, and then Age Range for Apps.\n\nYou can also manage this on the child device by going to Apple Account and Settings, tap on Personal Information, and again, Age Range for Apps is shown. There are three different settings for this API.\n\nThis user is in Always Share.\n\nAlways Share automatically returns the age range that is asked by the app.\n\nIf new information is revealed, a notification appears.\n\nThis user is in Ask First.\n\nAsk First displays a prompt to choose whether to share or not.\n\nThis user is in Never share. Never share always declines to share. Nothing is shown when an app requests for the user’s age.\n\nKeeping birth dates private is essential.\n\nSo there are additional measures in the Declared Age Range framework to ensure privacy.\n\nWhen in Ask First, by default, it will only prompt on the anniversary of the original response.\n\nSimilarly, in Always Share, by default, it will only reveal new age information on the anniversary of the original response.\n\nHere's an example. If a child turns 13 and crosses into a new age range, the API will still return 12 or under until the anniversary.\n\nThen, on the anniversary of the original age declaration, upon request, the API will then either automatically share or prompt to share.\n\nThis helps protect users from revealing their birth date.\n\nLastly, a user can also allow the app to reprompt in order to receive the current age. For example, on the weekend after the user’s birthday, they are excited to get access to features for older children right away. They don’t have to wait for the anniversary. In Settings, age range for apps, they can force the cache to clear by going to a specific app and tapping Share Age Range again.\n\nThis provides an app the updated age range response the next time the age is requested.\n\nCreating an age-appropriate experience is really about modifying the features in your app to ensure they're suitable for users. To illustrate, I will go through the exercise of building out the age-appropriate experience that I showed previously.\n\nApps can now choose to change the experience based on whether it’s appropriate for the user’s age. In this case, the photo sharing feature will be unavailable until the Landmarks app can confirm the child's age range and determine that it's age-appropriate.\n\nTo get started, you will need to add the Declared Age Range capability to your project. Go to the Signing and Capabilities tab in your project target and click the plus button.\n\nThen select Declared Age Range.\n\nNow I’ll go into the sample app UI and start coding.\n\nHere is the Landmarks app. It shows a list of landmarks. When I tap, I’m taken to a detailed description.\n\nThis is the landmarks detail view. This is where I’d like to add my new photo sharing feature.\n\nI add a variable that will keep track of whether my feature is enabled or not.\n\nAdd an environment variable to help the API know which window to display an alert on. This is important in use cases where there are multiple windows for your app, for example, on iPad or Mac. Then I add a button that checks whether it should be enabled.\n\nBy default, it will be disabled.\n\nNow I will dive into requestAgeRangeHelper.\n\nThis method contains all the logic for requesting and receiving a response from the API.\n\nThe API allows apps to specify ages at runtime. So for each region or use case, specify the ages that apply to your app in that context. For the sake of time, I add a comment to later implement code to check which region the user is in.\n\nRequest age range using requestAgeRange method. And provide the ages that you care about. In this case, I want to know if the user is 16 or older.\n\nI’m ready to implement the code that handles the response. The response will return an enum that will equal sharing or decline sharing.\n\nIf the enum equals sharing, the user shared, and a lower and upper bound is returned. This represents the age range returned by the API. If the enum equals decline sharing, the user chose not to share.\n\nI will now check if the lower bound is greater than or equal to 16.\n\nIf this is true, I can assume the upper bound is nil.\n\nAs mentioned, upper and lower bound values can be nil. This is used to represent ranges like 12 or under, or ranges that don’t have an upper limit, like 16 or over.\n\nIf they are 16 or over, I will enable the photo sharing button. If they are 15 or under, the button will remain disabled. If the age range is shared, you will also get back an ageRangeDeclaration value.\n\nFor children, the value will always be guardianDeclared. For teens, if they are in an iCloud family, it will be guardianDeclared.\n\nIf they are not in an iCloud family, it will be selfDeclared.\n\nFor adults, the value will be selfDeclared. Now, back to the code.\n\nThe API can also throw an error. I'll add some code to handle errors. Error invalidRequest is a developer generated error. It indicates that something is wrong with the request itself. For example, you have an age range that is not two years in duration.\n\nError notAvailable indicates device configuration issue that needs to be handled by the app. For example, the user hasn’t signed into the device with an Apple account.\n\nNow, I will put it all together and demonstrate the user experience.\n\nWhen I open the Landmarks detail view, an alert appears asking if I’d like to share that I’m 16 or older. I choose to share. As expected, the photo sharing experience is now available.\n\nThere are a few more details that are helpful to know. Because the API will be called often, the system caches the responses so the user doesn’t constantly have to answer prompts. Practically speaking, this means apps won’t need to worry that calling the API will prompt the user too many times.\n\nCached responses are synced across devices. For example, a cached age range shared on iPhone will sync to Mac.\n\nUsers can manage cache responses in Settings.\n\nAdditionally, if the upper bound of an age range is below the age of majority, the API returns a set of additional parental controls that the parent has configured for the child. Here, I have code that checks to see if communication limits is enabled for the child.\n\nTo learn more about it, check out “Enhance child safety with PermissionKit.” Apps leveraging this framework are able to allow parents to be in control of who a child can communicate with in third-party experiences.\n\nSo that's the new API. Let me tell you about some other features you can use to protect your users.\n\nSensitive Content Analysis API helps apps provide a safer experience in your app by detecting and alerting users to nudity in images and videos before displaying them on screen.\n\nAnd in iOS 26, the Sensitive Content Analysis API has been expanded to detect and block nudity in live streaming video calls.\n\nThe Screen Time Framework gives apps the tools needed to help parents and guardians supervise their children's web usage. And Family Controls helps apps provide their own parental controls on a device.\n\nNow you know about age appropriate experiences. Here's what you need to do next.\n\nReview Apple’s child safety tools at developer.apple.com, add age-appropriate experiences where they make sense, use the Declared Age Range framework to properly gate your age appropriate experiences.\n\nThank you for adding age-appropriate experiences in your app.",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "8:03",
      "title": "Request an age range",
      "language": "swift",
      "code": "// Request an age range\n\nimport SwiftUI\nimport DeclaredAgeRange\n\nstruct LandmarkDetail: View {\n    // ...\n    @State var photoSharingEnabled = false\n    @Environment(\\.requestAgeRange) var requestAgeRange\n    \n    var body: some View {\n        ScrollView {\n            // ...\n            Button(\"Share Photos\") {}\n                .disabled(!photoSharingEnabled)\n        }\n        .task {\n            await requestAgeRangeHelper()\n        }\n    }\n\n    func requestAgeRangeHelper() async {\n        do {\n            // TODO: Check user region\n            let ageRangeResponse = try await requestAgeRange(ageGates: 16)\n            switch ageRangeResponse {\n            case let .sharing(range):\n                 // Age range shared\n                if let lowerBound = range.lowerBound, lowerBound >= 16 {\n                    photoSharingEnabled = true\n                }\n                // guardianDeclared, selfDeclared\n                print(range.ageRangeDeclaration)\n            case .declinedSharing:\n                // Declined to share\n                print(\"Declined to share\")\n            }\n        } catch AgeRangeService.Error.invalidRequest {\n            print(\"Handle invalid request error\")\n        } catch AgeRangeService.Error.notAvailable {\n            print(\"Handle not available error\")\n        } catch {\n            print(\"Unhandled error: \\(error)\")\n        }\n    }\n}"
    },
    {
      "timestamp": "11:49",
      "title": "Communication Limits",
      "language": "swift",
      "code": "// Request an age range\n\nfunc requestAgeRangeHelper() async {\n    do {\n        // TODO: Check user region\n        let ageRangeResponse = try await requestAgeRange(ageGates: 16)\n        switch ageRangeResponse {\n        case let .sharing(range):\n            if range.activeParentalControls.contains(.communicationLimits) {\n                print(\"Communication Limits enabled\")\n            }\n            // ...\n        case .declinedSharing:\n            // Declined to share\n            print(\"Declined to share\")\n        }\n    } catch {\n        // ...\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Declared Age Range",
        "url": "https://developer.apple.com/documentation/DeclaredAgeRange"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/299/4/ffa39510-a851-4af3-9584-7e37abdfc5bf/downloads/wwdc2025-299_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2025/299/4/ffa39510-a851-4af3-9584-7e37abdfc5bf/downloads/wwdc2025-299_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "293",
      "year": "2025",
      "title": "Enhance child safety with PermissionKit",
      "url": "https://developer.apple.com/videos/play/wwdc2025/293"
    }
  ],
  "extractedAt": "2025-07-18T10:42:30.005Z"
}