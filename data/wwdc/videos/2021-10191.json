{
  "id": "10191",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10191/",
  "title": "Deliver a great playback experience on tvOS",
  "speakers": [],
  "duration": "",
  "topics": [
    "Audio & Video"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Max Stepanov: Hello! My name is Max, and I'm a software engineer on the tvOS team.\n\nToday, I'm excited to share with you a great all-new look of the media playback UI on Apple TV and what you can do to get the most out of this new functionality available to you as a developer.\n\nIn this session, we will overview the enhancements to the standard playback UI in tvOS 15; we will introduce new APIs; and finally, we'll discuss best practices that will help you create a great playback experience in your application.\n\nLet's get started.\n\nAVPlayerViewController provides the standard media playback for users on Apple TV.\n\nIt supports a wide variety of remotes, including the new Click Wheel remote, as well as skipping, scanning, scrubbing functionality, Siri command, interstitial support, and more.\n\nWe encourage you to start using AVPlayerViewController in your application to allow users to have a similar experience as with first-party applications on Apple TV.\n\nIf you haven't yet used AVPlayerViewController -- or would benefit from a refresher -- I recommend you to watch \"Delivering intuitive media playback with AVKit\" from WWDC 2019, which goes into greater detail on how to incorporate AVPlayerViewController into your application.\n\nNow, let's overview the enhancements we are bringing this year.\n\nIn tvOS 15, we entirely redesigned the standard playback UI to help viewers stay in the moment through a more consistent, interactive experience.\n\nBy adding relevant controls and options to the transport bar, we improved the discoverability of common playback tasks, such as turning on subtitles or changing audio language.\n\nThe transport bar controls are both universal in nature as well as can be application-specific.\n\nAnd with new content tabs, users can now easily access supporting information -- like Info or Chapters -- making inline navigation accessible and discoverable.\n\nContent tabs can also be used to show related content.\n\nHere in this example, I'm viewing a session from last year's WWDC and can browse content recommendations for the session without leaving the player.\n\nLastly, we added contextual actions available to users during playback.\n\nThose actions have perfect functionality, like Skip Intro or Recap.\n\nTo take advantage of the new playback UI on Apple TV, your application must be linked with tvOS 15 SDK.\n\nWe took this approach to maintain compatibility with any existing applications available to users in the App Store.\n\nThose applications will get default tvOS 14 playback UI and functionality.\n\nBy now, you're probably excited to learn how to adopt some of this new functionality in your media application.\n\nSo let's dive into the new APIs in tvOS 15...\n\n...starting with Title View.\n\nThe new Title View displayed just above the transport bar will help users to instantly know what they're watching.\n\nTo present the Title View, we'll use values for commonIdentifierTitle and iTunesMetadataTrackSubtitle from the metadata of the current AVPlayerItem.\n\nIf a media asset does not contain embedded metadata, or you need to augment it, use the externalMetadata property of AVPlayerItem.\n\nWhen playing live streaming content, the Title View will also display a badge to indicate the content state to the viewer.\n\nLastly, if your application would prefer not to display Title View, suppress it by setting the value of new property transportBarIncludesTitleView to false.\n\nNext, let's take a look at the transport bar controls.\n\nTransport bar controls is a collection of UI elements sitting right on top of the transport bar scrubber.\n\nThose controls will help users quickly and intuitively find all the playback options your application may provide.\n\nSome standard controls -- such as subtitles, audio languages, and Picture in Picture -- are provided by the system.\n\nAs a developer, you can extend the list of transport bar controls, using the new property of AVPlayerViewController, transportBarCustomMenuItems.\n\nIt supports instances of UIAction and UIMenu classes.\n\nLet's take a look at an example of using transport bar controls.\n\nHere, I'm using UIAction to let users add the current media item to their Favorites.\n\nYou could also create more advanced arrangements of actions and present them in a menu, using UIMenu class.\n\nUIMenus presented by AVPlayerViewController support up to one level of nesting, using the displayInline option.\n\nFor greater detail on using UIMenu and UIAction classes, I recommend you to watch \"Modernizing your UI for iOS 13\" from WWDC 2019.\n\nNow, let's talk about content tabs.\n\nContent tabs will allow your application to display complementary information or recommendations for more content.\n\nAVPlayerViewController will display the Info tab when a media asset contains embedded metadata or when you supplement external metadata with AVPlayerItem.\n\nAlso, when you supply navigationMarkerGroups with AVPlayerItem, AVPlayerViewController will show the Chapters tab.\n\nYour application can present additional content tabs using the new property of AVPlayerViewController, customInfoViewControllers.\n\nAnd in tvOS 15, we are deprecating the customInfoViewController property in favor of the new property that allows for multiple view controllers.\n\nTo size your content tabs appropriately, please specify the height using preferredContentSize property or define appropriate autolayout constraints.\n\nWhen calculating the required height to display content tabs, the system will size all view controllers to the height of the tallest content tab.\n\nWhen working with multiple content tabs, size your custom view controllers consistently or verify that the layout is expected at runtime.\n\nAnd don't forget to set title property on your custom view controller.\n\nWe will use it for the title of the content tab.\n\nTo help you create great-looking content tabs, this year, we are introducing new content configurations in TVUIKit framework: TVMediaItemContent Configuration and TVMonogramContent Configuration.\n\nLet's take a look at a couple examples of how these configurations can be used in your code.\n\nFor instance, to present a list of media items at 16:9 aspect ratio, you can use the wide cell from TVMediaItem ContentConfiguration.\n\nSet its properties, like image, title, or secondary text.\n\nYou could also configure it to show a badge and playback progress.\n\nWhen you're done, assign the contentConfiguration to your collection view cell.\n\nIt's that easy.\n\nIf you would like to display people or characters associated with the current media content, use TVMonogramContentConfiguration.\n\nFor more information on using content configurations, I recommend you to watch \"Modern cell configuration\" from WWDC 2020.\n\nFinally, contextual actions.\n\nContextual actions allow your application to display relevant controls during the playback.\n\nTo display contextual actions, use new contextualActions property of AVPlayerViewController and provide one or more UIActions.\n\nTypically, your application would want to present contextual actions during a relevant section of the content.\n\nTo achieve this, observe the AVPlayer timing by adding periodic or boundary time observers.\n\nTo hide contextual actions, reset the property to an empty array.\n\nSome of you may have already implemented solutions for the skip functionality within your applications.\n\nWith this new API, the user interaction with contextual controls is consistent with focus behavior, and when used, it will also maintain the Now Playing status for your application.\n\nNow, let's talk about some best practices with AVPlayerViewController on tvOS.\n\nFirst -- and most important -- avoid adding extra gestures to the player.\n\nThis will interfere with standard playback UI and most certainly might not work in the future.\n\nSecond, supplement missing metadata.\n\nSometimes we have media that doesn't have all the metadata baked in with the asset.\n\nIn those cases, provide all essential metadata -- like title, artwork, or description -- using the externalMetadata property of AVPlayerItem.\n\nAnd when you do so, we will do the rest to populate Title View and Info tab with all relevant information.\n\nLastly, consider enabling Picture in Picture in your tvOS application.\n\nIt will give your users multitasking flexibility, allowing for simultaneous video playback and the ability to swap between full-screen content and Picture in Picture.\n\nTo get started with Picture in Picture, I recommend you to watch \"Master Picture in Picture on tvOS\" from WWDC 2020.\n\nSo to recap.\n\ntvOS 15 makes it easier than ever to build great media experiences using standard playback UI.\n\nThe powerful new APIs make AVPlayerViewController more configurable and customizable than ever.\n\nThere's never been a better time to adopt it into your applications.\n\nAnd it's easy to get started.\n\nFor more information, see additional resources for this session in the Developer app.\n\nThanks for watching and enjoy the conference.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "4:42",
      "title": "Transport Bar Controls Example",
      "language": "swift",
      "code": "let favoriteAction = UIAction(title: \"Favorites\", image: UIImage(systemName: \"heart\")) {\n    // Add to favorites\n}\n\nlet submenu = UIMenu(title: \"Speed\", options: [.displayInline, .singleSelection],\n                     children: [ UIAction(…) ])\n\nlet menu = UIMenu(image: UIImage(systemName: \"gearshape\"), children: [submenu, UIAction(…)])\nplayerViewController.transportBarCustomMenuItems = [favoriteAction, menu]"
    },
    {
      "timestamp": "6:11",
      "title": "Content Tabs Example",
      "language": "swift",
      "code": "// Initialize content tab view controller\n\ncustomViewController.preferredContentSize = CGSize(width: 0, height: 140)\ncustomViewController.title = \"Recommended\""
    },
    {
      "timestamp": "7:08",
      "title": "TVMediaItemContentConfiguration Example",
      "language": "swift",
      "code": "// Configure 16:9 UICollectionView cell\nimport TVUIKit\n\nvar contentConfiguration = TVMediaItemContentConfiguration.wideCell()\ncontentConfiguration.image = UIImage(imageLiteralResourceName: \"tanu\")\ncontentConfiguration.text = \"Title\"\ncontentConfiguration.secondaryText = \"Secondary text\"\ncontentConfiguration.badgeText = \"NEW\"\ncontentConfiguration.badgeProperties.backgroundColor = .systemRed\ncontentConfiguration.playbackProgress = 0.75\n\ncell.contentConfiguration = contentConfiguration"
    },
    {
      "timestamp": "7:36",
      "title": "TVMonogramContentConfiguration Example",
      "language": "swift",
      "code": "// Configure monogram UICollectionView cell\nimport TVUIKit\n\nvar contentConfiguration = TVMonogramContentConfiguration.cell()\ncontentConfiguration.image = UIImage(imageLiteralResourceName: \"jad\")\ncontentConfiguration.text = \"Jad\"\n\ncell.contentConfiguration = contentConfiguration"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "AVKit",
        "url": "https://developer.apple.com/documentation/AVKit"
      },
      {
        "title": "Customizing the tvOS Playback Experience",
        "url": "https://developer.apple.com/documentation/AVKit/customizing-the-tvos-playback-experience"
      },
      {
        "title": "Human Interface Guidelines: Designing for tvOS",
        "url": "https://developer.apple.com/design/human-interface-guidelines/designing-for-tvos"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10191/4/E98B040E-0A40-48C3-85D2-F7F18715F00F/downloads/wwdc2021-10191_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10191/4/E98B040E-0A40-48C3-85D2-F7F18715F00F/downloads/wwdc2021-10191_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10323",
      "year": "2021",
      "title": "Wednesday@WWDC21",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10323"
    },
    {
      "id": "10290",
      "year": "2021",
      "title": "What's new in AVKit",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10290"
    },
    {
      "id": "10176",
      "year": "2020",
      "title": "Master Picture in Picture on tvOS",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10176"
    },
    {
      "id": "10027",
      "year": "2020",
      "title": "Modern cell configuration",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10027"
    },
    {
      "id": "503",
      "year": "2019",
      "title": "Delivering Intuitive Media Playback with AVKit",
      "url": "https://developer.apple.com/videos/play/wwdc2019/503"
    },
    {
      "id": "224",
      "year": "2019",
      "title": "Modernizing Your UI for iOS 13",
      "url": "https://developer.apple.com/videos/play/wwdc2019/224"
    }
  ],
  "extractedAt": "2025-07-18T09:23:50.002Z"
}