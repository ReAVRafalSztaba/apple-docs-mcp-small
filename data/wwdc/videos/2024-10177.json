{
  "id": "10177",
  "year": "2024",
  "url": "https://developer.apple.com/videos/play/wwdc2024/10177/",
  "title": "Use HDR for dynamic image experiences in your app",
  "speakers": [],
  "duration": "",
  "topics": [
    "Audio & Video"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "Hello and welcome! My name is Davide. This presentation continues last year's session titled \"Support HDR Images in Your App.\" This year, we have created some exceptional technologies related to HDR images and cannot wait to share them with you. In this video, I will first introduce the concepts of headroom and tone mapping. I will then explain Adaptive HDR, a new technology that is backward compatible with SDR applications, decoders, and displays. David will then explain how to read Adaptive HDR images from a file. He will explain the process of editing images while preserving the HDR content.\n\nYou will learn that when adopted, the new APIs will enable seamless integration with the operating system and other apps, such as transitioning between background and foreground.\n\nDavid will then conclude the talk by explaining the recommended ways to write an HDR image to a file.\n\nLet's start with HDR concepts and technologies. First, what is High Dynamic Range? At its core, HDR is a set of technologies created to represent the visual world around us with greater fidelity.\n\nIt allows the capture and display of a wider range of light intensity found in real life. Compared to the Standard Dynamic Range, it can display a deeper range of colors. It also defines a set of rules or transformations that enable displaying brighter and deeper content on HDR screens. These transformations are called Tone Mapping.\n\nWhat is tone mapping, you may ask? In order to understand that, we first need to understand the notion of headroom.\n\nAnd to understand headroom, we need to talk about dynamic range in photography.\n\nOne of the amazing properties of the human visual system is the ability to adapt to a wide range of input stimuli, from the dim light of a night star to the extreme brightness of the sunlight.\n\nThe term Dynamic Range refers to the contrast between the brightest and the darkest tones of an image.\n\nOn a Standard Dynamic Range display, you can accurately represent only part of real-life light ranges. Even though images look good, there is a tonal compression happening to the range of the image. HDR displays, on the other hand, can represent both dark and bright tones better than SDR with fewer compromises.\n\nFor instance specular highlights. Or light coming from emissive objects are better preserved.\n\nNow, let’s zoom in on the plot at the bottom of the slide.\n\nAs we have seen, the peak brightness that HDR can represent can be much higher than the SDR peak. Per the ISO image standard, the brightest SDR signal is known also as reference white.\n\nReference white is approximately the brightness of a page of a book in an indoor setting, or the white background of a Keynote presentation.\n\nAn HDR display, on the other hand, lets us render specular highlights or light from emissive objects brighter than reference white.\n\nThe extra brightness is known as headroom.\n\nIn mathematical terms, headroom is the ratio between the HDR Peak and the Reference White. Headroom can also be represented as the logarithm of the value.\n\nWhen in Log form, we would say the the headroom is 1 stop, or 2 stops above reference white, to indicate that HDR is 2 or 4 times brighter.\n\nNow that we understand the notion of headroom, it is important to make a fundamental distinction, which will be useful later.\n\nWhen a file is encoded in such a way that the data contains brightness levels above reference white, we will call it Content Headroom.\n\nWhen we talk about the display's ability to show brightness levels above reference white, we will refer to it as Display Headroom. Let’s now dig deeper into the difference.\n\nIn the example above, you can see a high-dynamic range version of a beautiful landscape. The Histogram shows that the content contains approximately 2 stops of headroom above reference white. Now, an editor or a capture device like an iPhone may create a brighter rendition. The example above shows around 3 stops.\n\nAt the same time, the image can be displayed on a wide variety of screens. If the Display Headroom capacity is sufficient, the image will be decoded and rendered with full fidelity. In the example above, the display has 3 stops of headroom and can display all 3 stops of the content headroom. However, there are situations where the display may not be able to show the entire content headroom. For example, because of the current screen brightness settings. Later in the video, we will explore other causes of reduced display headroom. In this case, the data must be manipulated first, to preserve the creator's intent and avoid clipping. How is that done? Through a technique called tone mapping. Tone mapping adjusts the image brightness and color values to fit within the range that the medium or the display can handle, ensuring an accurate representation of the image. Tone mapping in digital photography can occur when a photo is captured or edited and also when an image is decoded and displayed. The first stage is commonly referred to as artistic or creative adjustment.\n\nFor example, an artist would import an image, like an Apple ProRAW asset, analyze it on a reference display and viewing environment, and tone map it to either SDR or a defined HDR headroom, based on the creative intent.\n\nA capture device such as an iPhone could also make automatic tone mapping decisions using machine learning techniques, before saving the image to a file.\n\nThe second stage is commonly referred to as display adjustment.\n\nAfter an HDR image is decoded. It can be displayed on a variety of devices, including some that may have limited headroom.\n\nAnd each device can be located on a variety of physical environments.\n\nIn each of these cases, the display will need to adjust the rendering of the image according to the situation.\n\nAdjusting the content happens due to the following reasons: Based on the display capabilities, or how many nits the hardware can physically show.\n\nBased on the current screen brightness settings, and the resulting headroom available. Depending on the remaining battery life of your device. In a low-battery situation, the display may need to dim, to conserve power and keep the device operational.\n\nDue to coexistence. For instance, the operating system will promote the image in the foreground to HDR and tone map to SDR images in the background.\n\nOr even if you, as the developer, want to present the HDR effect of a photo in a different manner.\n\nNow that we have introduced headroom and tone mapping, In the next section of the video, I will describe three technologies and their respective standards, which are the foundation for the new features and APIs. The first was introduced last year, and it is called ISO HDR. The ISO HDR standard is the first of its kind for HDR photography. Apple played an active role in its development, and it was published in 2023. ISO HDR images have been supported in our ecosystem since last year.\n\nKey aspects of the ISO HDR include: The ability to store 10 bits Perceptual Quantizer and Hybrid Log Gamma encoding. The definition of an HDR reference display. And the metadata needed to maintain the artistic intent of the creator.\n\nISO HDR images can be stored in various file formats, such as HEIF, AVIF, PNG, JPEG XL and others. For more information, please refer to the document number above.\n\nIt is important to note that ISO HDR files need to be adjusted to SDR when viewed on SDR displays. This is usually done using default tone mapping operators, such as those described in the ITU specifications 2408, 2446, and 2390. We will come back to the ITU tone mapper later in the video.\n\nThe second technology for HDR images is new this year, and we call it Adaptive HDR. You may ask, why do we need a new standard if we already have ISO HDR? Adaptive HDR builds upon ISO HDR and goes even further in three key areas.\n\nThe first one is the backward compatibility with SDR systems, decoders and applications.\n\nThe second one is the ability to store optimized representations of both HDR and SDR in a single file.\n\nAnd the third is the ability to easily tone map between HDR and SDR to accommodate for the available display headroom. We will see how Adaptive HDR implements all three.\n\nThe fundamental Idea behind the Adaptive HDR technology is to store in a file a fully backward-compatible SDR baseline representation of an image. Together with specific metadata and a map, that preserves the spatial locations of bright areas of the scene. This map is commonly called Gain Map because it allows for gaining parts of the SDR image to increase the brightness. When the Gain Map is applied to the baseline rendition, it will produce a beautiful HDR output. A sharp eye may have noticed something peculiar in the slide above. The title says Apple Gain Map, and not Adaptive HDR. This is not a mistake. Since 2020, iPhone cameras have been capturing images with embedded gain maps to enhance their appearance. Over a trillion images have been captured in this format! You can find more information about Apple Gain Map on the Apple Developer Portal.\n\nWhat is new this year is that we are driving an effort to standardize the Gain Map technology.\n\nWe are standardizing the mathematical formula for creating and applying the gain map to the baseline SDR. Adaptive HDR encodes the map as the logarithm of the ratio between the HDR and the SDR signal. It also defines new metadata and how to store the new information in common file formats like HEIF and JPEG.\n\nAdaptive HDR has now reached Committee Draft at ISO and we are working towards the final stage, Draft International Standard. If you require more details and are an ISO member you can locate the document number on this slide. This standard guarantees a uniform experience across software and hardware platforms, and we expect the imaging industry to adopt it widely.\n\nI will now explain how Adaptive HDR achieves the three improvements over ISO HDR mentioned before: The first, backward compatibility, is guaranteed because the file contains a SDR baseline fully decodable by older systems or SDR-only applications.\n\nSecondly, the file includes Dual Rendering uncompromised representations of SDR and HDR. This is due to the Gain Map containing information for each pixel of the image.\n\nThird, given that the Gain Map is defined as a ratio between SDR and HDR, it allows for easy tone mapping of the input content based on the display headroom.\n\nIn fact, any desired output headroom can be achieved by multiplying the SDR input by the gain map with a weight less than 1 It’s as easy as that.\n\nIt's worth noting, that Adaptive HDR enhances the representation of the Gain Map signal. It can be an RGB 3-channels map, providing greater control over the appearance of the image.\n\nThe standard also allows for symmetrical transformations. This means that the baseline rendition may be HDR, and the gain map can contain information to tone map to SDR.\n\nWith the release of iOS 18, we are transitioning to Adaptive HDR Gain Maps and related metadata. This new generation is based on the latest draft.\n\nThe iPhone 15 and 15 Pro will capture HDR images compliant with Adaptive HDR.\n\nLet’s now look at the anatomy of the new Adaptive HDR files.\n\nI want to point out that new HEIC files captured on iOS 18 will still contain only one image. In fact, calling CGImageSourceGetCount on a CGImageSource, will return 1, but now a developer can request an alternate look for the image.\n\nBy default, images will be decoded to present the Standard Dynamic Range look. This is the backward-compatible look that we are familiar with.\n\nIn this case only the metadata necessary for the SDR representation will be reported, and any additional information in the file will be disregarded.\n\nWhen apps request it, they can obtain the alternate representation of the image, or the HDR look. In this case, the extra information in the file, including the Gain Map, will be used and reported to the app.\n\nIn HEIF parlance, this representation is called the TMAP alternate, or the tone-mapped image. It is important to understand, that the file does not contain an HDR image at all. But rather a set of ingredients.\n\nAnd a recipe, that together will create the HDR look.\n\nWe have been working with the MPEG body to formalize and standardize the Adaptive HDR file format for HEIF, which is currently included in the working draft of the second amendment of the HEIF specifications.\n\nAnd we are also working with the International Color Consortium to promote Adaptive HDR as part of ICC profiles.\n\nJPEG files also fully support Adaptive HDR, with a slightly different syntax compared to HEIF. The Adaptive HDR draft standard provides more information.\n\nProRAW files will also support Adaptive HDR by including the Gain Map and the new metadata in the full-size thumbnail.\n\nAs mentioned, the iPhone 15 and iPhone 15 Pro are transitioning to the new Adaptive HDR from iOS 18. I will not review all the specifics of the table above, but you can pause the video to get a complete list of changes and how they may impact you.\n\nNow that you are HDR experts, I have a bonus topic related to how the operating system renders HDR images based on the format.\n\nDepending on the input content, there are 2 ways to tone map an HDR to SDR or a lower display headroom.\n\nFor ISO HDR images, since iOS 17 and macOS 14, the operating system was able to adjust from HDR to a lower headroom using ITU default global tone mapping techniques.\n\nThis year Apple has developed an new Reference White Tone Mapping Operator that preserves the output quality better than the default one. Highlight clipping is greatly reduced, and color reproduction is better maintained. This new global tone mapper will be used for ISO HDR files in the new iOS, macOS, tvOS, watchOS, and visionOS.\n\nAdaptive HDR images, on the other hand, will be adjusted down to the display’s headroom, using a curve optimized according to the Gain Map in the file.\n\nBefore David starts sharing the new APIs, I'd like to highlight the system apps we updated this year to utilize the upcoming technologies available to you. In iOS 17 and macOS 14, the Photos app was the only application capable of rendering HDR images using the full display headroom.\n\nOn iOS 18 and MacOS 15 we are adding messages, Quick Look and Preview.\n\nAnd it is worth noting, that we changed the Photos app to use all these new APIs. And now, David, the floor is yours! Thank you for that great overview, Davide. Next let’s discuss how to convert these concepts to code in your application. When working with HDR images, there are common operations that your app is likely to support.\n\nA full HDR pipeline involves reading, editing, displaying, and writing images. I will discuss all of these in this video.\n\nBut the first step is to read the file into memory.\n\nThe incredible thing about Adaptive HDR files is the flexibility they provide. Because of the Gain Map and associated metadata, the image can either be loaded as an SDR image for best backward compatibility or as an HDR image for maximum fidelity.\n\nBy default, reading a gain map image will load the SDR representation into memory. All you need to do is initialize a CIImage object with a URL or data. But to get the most impact from your images you will want to see them as HDR.\n\nLast year we introduced the CIImage option expandToHDR to support the Apple Gain Map image format. This same API now also works to read Adaptive HDR files. All you need to do is provide this option when initializing the CIImage.\n\nThis option is also available via the ImageIO API kCGImageSourceDecodeToHDR. As Davide mentioned earlier, it is critical that the image objects have an associated content headroom property. This property is necessary for the subsequent display of an HDR image. This year we have added it to key system image classes.\n\nQuerying the headroom of a CIImage is as simple as reading the new contentHeadroom property. For common SDR images, the returned headroom will be just 1. For iPhone HDR photos, the value will be greater than 1 and up to 8 depending on the scene content. For some images the property may return zero to indicate that the headroom is unknown.\n\nSimilarly, given a CGImageRef, there is a new CGImageGetContentHeadroom API to get its headroom.\n\nIOSurfaces have an equivalent property.\n\nand to easily get the headroom from a CVPixelBuffer, create a CIImage from it and get its content headroom.\n\nNext, lets discuss some recommendations, for how to edit Adaptive HDR images.\n\nGiven the flexibility of Adaptive HDR image files, there are several strategies that you can choose from when editing, displaying and saving these images. Perhaps the most obvious is to treat the file as an SDR image. I won’t discuss this today because you are likely familiar with this approach.\n\nAlternatively, you can treat the file as HDR as we described in last year’s session. Or you can treat the file as an SDR image and a coupled Gain Map image. Lastly, your app can treat the file as two images: One SDR and the other HDR. I’ll discuss these three strategies throughout the remainder of this video.\n\nTo use the HDR approach, read the image with the expandToHDR option to make an HDR image right when the image is loaded.\n\nThen the HDR image can be edited using filters that preserve HDR range. Please watch “Support HDR Images in Your App” for more information on CIFilters that preserve HDR.\n\nOne point to consider, is how editing an image will alter its content headroom property. For certain modifications, Core Image knows that the headroom will be unchanged. This works, if for example, you scale, crop, warp or apply certain convolutions. For other modifications, Core Image does not know how the headroom will be affected. In these cases, the resulting headroom property will be zero to indicate that it is unknown.\n\nTo use the SDR and Gain approach, load both the SDR and Gain Map components of the file as two in-memory image objects. Use the auxiliaryHDRGainMap option to load the Gain Map from a file as a CIImage object.\n\nKeep in mind that the base image is SDR so its content headroom will be 1.\n\nWhen editing the SDR image, analogous edits, where appropriate, are applied to the Gain Map.\n\nFor example, if the SDR image is cropped, then the Gain Map image should be cropped too. Note that the Gain image is typically half the size of the SDR image so edits need to account for the scale difference.\n\nTo use the SDR and HDR approach, use code like this to read both representations of the file as Image objects.\n\nKeep in mind that the SDR image headroom will be 1, and the HDR image headroom will be greater than 1.\n\nWhen editing the SDR image, analogous edits are applied to the HDR image. As long as the edits support HDR, they can be applied to both images.\n\nThese three strategies have advantages and disadvantages.\n\nThe HDR strategy is simpler to implement because your code only needs to track the one image.\n\nThis strategy also has the advantage of working with ISO HDR images that don’t have a Gain Map.\n\nOn the downside, some edit operations notably some photo blend modes don’t support HDR so alternatives need to be used. You can tell if a built-in CIFilter supports HDR by checking the filter attribute categories.\n\nAlso, once an edit has been applied in HDR, the original Gain Map can no longer be used for tone mapping down to SDR or to a different display headroom.\n\nThe SDR and Gain strategy has the advantage that it preserves the original Gain Map. This is convenient when tone mapping or saving the image with the best backward compatibility.\n\nThis strategy works best when doing simple edits such as rotations, warps, and crops. It can even work for some edits that only support SDR.\n\nOn the downside, some types of edits cannot be applied to the Gain Map. For example a filter that strongly alters the brightness of the SDR image, won’t have an appropriate effect when applied to the Gain Map.\n\nThe SDR and HDR strategy has the advantage that it allows the app to tune edits to optimize both SDR and HDR.\n\nAlso, given both SDR and HDR edits, it is possible to re-calculate a Gain Map so that the image file can be saved with maximum flexibility.\n\nOn the downside, there is the added complexity of editing two images and ensuring that both SDR and HDR edits look good.\n\nHere’s an example of code that uses the HDR edit strategy. First, it loads the image requesting the .expandToHDR option, Next, in this example I’ve chosen to apply the vignetteEffectFilter because it fully supports HDR content. Then this code applies the filter to the image to produce a new edited image.\n\nHere’s an example of code that uses the SDR and Gain edit strategy. First, it loads an image with no options to obtain the SDR image. Then, it loads the image again using the auxiliaryHDRGainMap option to get the Gain Map as a CIImage. This image needs to be scaled to match the size of the base SDR image.\n\nNext, in this example I’ve chosen to apply the stretchCropFilter. This filter warps the image so it should be applied to both the SDR and Gain images.\n\nHere the code applies the filter to the SDR image to produce an edited SDR image. And lastly, it applies the filter to the Gain image to produce an edited Gain image.\n\nNow that you understand how to load and edit Adaptive HDR images, let’s dive into how to tone map for display.\n\nOne key challenge of displaying an HDR image is that, given the wide variety of displays and environments, you may need to tone map the image. To do this optimally, we need to know both the image headroom and the display headroom.\n\nThis year we have new system tone mapping APIs so that images look great and consistent across applications.\n\nThe great news is that for applications that use a UIImageView or a SwiftUI view, this tone mapping is automatic. Let me describe that code next.\n\nIn this example I have an Adaptive HDR image file accessible via a URL and I want to display it using SwiftUI. All I have to do is to create a UIImage using UIImageReader. This reader correctly supports various HDR file formats. Then you can create a SwiftUI Image View and specify the allowedDynamicRange modifier to determine how much of the file’s dynamic range should be displayed. It's as easy as that! Similarly, if your app uses UIKit then you can create a UIImageView with the UIImage. Then set the preferredImageDynamicRange property to specify how much dynamic range should be displayed.\n\nIf your app needs performance or control beyond that provided by UIImage, then you can display using Core Image and Metal. This is appropriate when you want to interactively change the image. When displaying Adaptive HDR images with Core Image, the best approach depends on what edit strategy was used.\n\nRegardless of the strategy, the goal is to use the image content headroom and the display headroom to tone map so that it looks optimal for the current display state.\n\nIf your app uses the HDR edit strategy, use the new toneMapHeadroomFilter before display. If the file is an ISO HDR file, then the new Reference White Tone Mapping Operator will be used. If the file is an Adaptive HDR file, then the filter will apply a custom tone map function that is optimized according to the file’s unique Gain Map.\n\nHere is an example of code the uses the toneMapHeadroomFilter and displays the result in a MTKView. The first step is to setup the MTKView for extended range content. Next, apply CIFilters to create an edited CIImage. Then get the current display headroom state for the view and then apply the new CIToneMapHeadroom filter.\n\nThen render the resulting tone mapped image using the CIRenderDestination API. Please watch \"Display EDR Content With Core Image, Metal, and SwiftUI\" for more details on how to display CIImages efficiently in an MTKView.\n\nAlternatively, your app may choose to use the SDR and Gain edit strategy. If so, when it comes time for display, the two should be combined and tone mapped. This can be done in one operation by using the new imageByApplyingGainMap:headroom API.\n\nThis is an example of code that edits the SDR and Gain Map images separately and displays the combined result in an MTKView. The code to setup the MTKView is the same as the prior example. Next, apply CIFilters to create an edited CIImage and, apply appropriate filters to create an edited gain image.\n\nThen get the current display headroom for the view, and use applyGainMap API to combine the two images.\n\nAs before, the resulting toned mapped CIImage can be rendered using CIRenderDestination.\n\nIf you prefer, your code can render an HDR CGImage into a EDR CGBitmapContext. The first step is to use ImageIO to read the Adaptive HDR file using the kCGImageSourceDecodeToHDR option. Then you can use the CGImageGetContentHeadroom API if needed. For example you might want to know this if you are rendering more than one image to a context. Next create an extended range CGContext with RGBA half float pixels and an extended colorspace.\n\nThen you can use the CGContextSetEDRTargetHeadroom to tell CoreGraphics how much of the context range to use. The final step is to render the image into the context. Lastly, lets discuss the recommended ways to save an HDR image to a file. The best practice for saving depends on what strategy was used for loading and editing. First, if you have loaded and edited the image as HDR, then the most modern method is to save 10 bit HEIF files with a PQ colorspace. This allows the image to be saved with the best precision and range.\n\nAlternatively, if you have loaded and edited an image as SDR and HDR, then the most compatible method is to save an Adaptive HDR file To do this you need to call writeHEIFRepresentation with two CIImages. The first step is to provide the edited SDR image and colorspace. The edited HDR image is passed using the new HDRImage option.\n\nFrom these two images, Core Image will calculate the Gain Map and include it as an auxiliary image along with the base SDR image.\n\nIf your app uses the SDR and Gain edit strategy, then you can you should call writeHEIFRepresentation to save both of these images. Just pass the SDR image and colorspace. And also provide the edited gain image using the HDRGainMapImage option. If the Gain Map image has the original metadata properties from when it was loaded, then these will be used when saving to the Adaptive HDR file. Lastly, your app can use ImageIO to save an SDR CGImage and Gain Map data. The first step is to call CGImageDestinationAddImage with an SDR CGImage with an SDR CGColorSpace. The next step is to create a dictionary that describes the Gain Map. This should contain the actual pixel data of the Gain Map, a sub-dictionary that describes the height, width, and format of that data and a CGImageMetadata that describes how the pixel data should be converted to linear gain values. In most cases you can re-use the CGImageMetadata from the source file. Then, all that is needed is to call CGImageDestinationAddAuxiliaryDataInfo and pass the new kCGImageAuxiliaryDataTypeISOGainMap key and the info dictionary.\n\nThis concludes our discussion of the new Adaptive HDR file format. We've discussed in detail the features and principles behind this new format as well as the API and strategies that will allow you to support them in your application. I hope that this video and others related to this topic, will allow your apps to present amazing HDR photos to the user.",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Forum: Photos & Camera",
        "url": "https://developer.apple.com/forums/topics/media-technologies/photos-and-camera?cid=vf-a-0010"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10177/4/5F09C774-7C5B-4605-98F5-8C70C4A56CF0/downloads/wwdc2024-10177_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2024/10177/4/5F09C774-7C5B-4605-98F5-8C70C4A56CF0/downloads/wwdc2024-10177_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10181",
      "year": "2023",
      "title": "Support HDR images in your app",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10181"
    },
    {
      "id": "10114",
      "year": "2022",
      "title": "Display EDR content with Core Image, Metal, and SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10114"
    }
  ],
  "extractedAt": "2025-07-18T09:22:11.248Z"
}