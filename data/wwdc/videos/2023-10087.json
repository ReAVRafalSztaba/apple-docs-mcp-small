{
  "id": "10087",
  "year": "2023",
  "url": "https://developer.apple.com/videos/play/wwdc2023/10087/",
  "title": "Build spatial SharePlay experiences",
  "speakers": [],
  "duration": "",
  "topics": [
    "Spatial Computing"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Mellow instrumental hip-hop ♪ ♪ Willem Mattelaer: Hi, my name is Willem, and I'm an engineer working on group activities.\n\nI'll be joined by Mia to talk about how you can build great spatial SharePlay apps.\n\nSharePlay has always been about being present with others and doing something together, whether nearby or far apart.\n\nOn this platform, we can increase the feeling of being present while in FaceTime.\n\nIn FaceTime on this platform, all Spatial Personas will take up a physical space in your room instead of being constrained to a single window.\n\nThis increases the feeling of being together with others.\n\nOn top of this, we introduce shared context.\n\nShared context means that everyone will see everyone else in the same relative position.\n\nTo illustrate this, consider two different perspectives.\n\nThe left side shows Connor's perspective, and the right side shows Mia's.\n\nIf Connor points to the Persona of Mia, Mia will see Connor's Persona pointing to her.\n\nWe extend this to shared experiences, including SharePlay, where the system will place the window in the same relative position for everyone.\n\nIt uses templates for this.\n\nTemplates are used to determine how participants and a shared app will be arranged relative to each other.\n\nThis will lead to spatial consistency.\n\nApps don't need to handle displacement themselves and can rely on the system for this.\n\nOne thing that apps should worry about is having visual consistency.\n\nVisual consistency means that everyone is seeing the same content inside the app.\n\nImagine being in front of a whiteboard with others.\n\nEveryone will have the same view of the whiteboard.\n\nAnd whenever someone points to something, the others can see what they're pointing at.\n\nWe want to replicate this in spatial experiences with SharePlay.\n\nBringing it back to our earlier example, here the app doesn't have visual consistency.\n\nIf Connor points to the square in the app, Mia will see Connor's Persona point to the circle.\n\nThis breaks the illusion of being together.\n\nHowever, if the app had visual consistency, Mia would clearly see that Connor was pointing to the square.\n\nIt's the responsibility of the app to keep the content and its placement in sync for all participants.\n\nThis way, it feels like everyone is looking at the exact same app as if they were really together.\n\nIn the \"Design spatial SharePlay experiences\" session, we go in a lot more detail on these concepts.\n\nI strongly encourage you to watch that session to learn more.\n\nNow that we've gone over some of the new concepts that are introduced with FaceTime on this platform, let's dive into what a windowed app should consider when adopting SharePlay, and what additional steps an existing iOS SharePlay app should take to elevate their experience when used in a spatial setting.\n\nAfterwards, Mia will show you the new APIs to make incredible immersive SharePlay experiences.\n\nTo support SharePlay in windowed apps, we've added the new system coordinator for group sessions.\n\nSystem coordinator is responsible for two things: receiving system state for the active SharePlay session, and letting you provide additional configurations during SharePlay.\n\nI'll cover two of these which are relevant for both windowed and immersive apps: the isSpatial flag and template preferences.\n\nKnowing if a participant is spatial or not is important when determining the required level of visual consistency.\n\nFor instance, here we have Connor's first-person perspective.\n\nHe's in a call with Mia in red, looking at a document that I shared with SharePlay.\n\nMia's perspective of this scenario is on the right, where she sees Connor in blue.\n\nWhen Connor scrolls, we would want to synchronize the scroll position.\n\nThat way, Mia will see Connor scroll and we still have visual consistency.\n\nWe actually do this when panning in a Freeform document while in SharePlay.\n\nBut if you're not spatial, you don't have the context of the other person interacting with the document.\n\nSo if Connor would scroll, we shouldn't sync that, and Mia will keep seeing the document at the same spot.\n\nTo observe if the local participant is spatial, and adjust what you're syncing between participants, you first need to get the system coordinator for the group session.\n\nYou can know if the local participant is spatial by checking if isSpatial is true on the local participant state.\n\nTo observe the state, you can use the localParticipantState property, which returns an async sequence that will iterate through updates of the local participant state.\n\nThe system coordinator also offers apps a way to provide a template preference.\n\nTemplates are used to determine how all participants are placed by the system relative to the app to establish spatial consistency.\n\nWe support three different templates.\n\nSide-by-Side, we'll place all participants in an arc facing towards the shared app.\n\nThis is the default template that will be applied when the app is using a regular window scene.\n\nIn the Conversational template, all participants are placed in a half circle, with the app placed in front of that half circle.\n\nThis is great for experiences where the focus isn't on the content in the app.\n\nFor instance, when playing music in SharePlay.\n\nLastly, we have the Surround template.\n\nThis places the participants in a circle, and the app is put in the center of the circle.\n\nThis template is only available when the app is using a volumetric scene.\n\nThe distance between the participants and the app is based on the size of the app.\n\nIf the app is bigger, it will be placed further from the people.\n\nAnd if the app is smaller, it will get placed closer.\n\nA SharePlay app can provide a template preference through the system coordinator.\n\nFaceTime will try to apply this template while the group session is active.\n\nThere are three preferences available for SharePlay apps.\n\n.none, which will follow the system default behavior, where it will be Side-by-Side for vertical apps and Surround for volumetric ones.\n\nThis is the default preference that will be used.\n\nThere is also .sideBySide which will try to apply the Side-by-Side template, no matter what kind of app it is.\n\nAnd finally, there is .conversational, which will try to apply the corresponding template.\n\nTo configure the template preference, you just need to set it on the configuration of the system coordinator before calling join on the group session.\n\nTemplates are used to place the app and participant in an optimal position for the experience.\n\nBut what if your app has multiple window scenes and there is more than one currently foregrounded? In this example, we have an app with three scenes.\n\nSeen on the left is a browse view.\n\nThe small scene in the middle provides an easy way to navigate through the content.\n\nAnd the last scene provides detailed information about one piece of content.\n\nAll of these scenes can be open at the same time, so you can easily navigate the content while reading about it.\n\nWhen in SharePlay, we want the detail scene to be the shared scene.\n\nBut if all of them are open, the wrong scene could be used in the template.\n\nTo solve that, we've added scene association.\n\nThis is a way for the system to know which scene of the app is hosting the SharePlay activity.\n\nThere are two reasons we need to know this.\n\nFirst, it allows the Share menu above a window to show to the person which scene is shared.\n\nThis is a helpful indicator when there are multiple windows open and will help prevent possible embarrassing situations where someone was accidentally interacting with a shared window without realizing it.\n\nMore importantly, however, it determines which window scene will be used with the template.\n\nIf your app is a single-scene app, you don't need to worry about this.\n\nSince there's only ever one scene possible, we will automatically associate that scene with the group session.\n\nHowever, multiscene apps will need to consider this when adopting SharePlay.\n\nIf not adopted, a random open scene will be selected, and it might not be the right one.\n\nLet's go over how you can adopt scene association.\n\nWe'll start by looking at what happens for the person who started the SharePlay activity.\n\nWhen the group activity gets activated, we'll go through each of the scenes and check which scene can handle this.\n\nWe do that by evaluating the scene activation conditions against the activity identifier of the group activity.\n\nScene activation conditions consist of two checks, can and prefers.\n\nCan indicates that the scene could potentially handle it, while prefers will help direct it to a scene that is more ideally suited for it.\n\nSo we'll start by checking the scene on the left to see if it can or prefers to handle the activity identifier.\n\nIt can but doesn't prefer.\n\nNext, we'll check the middle scene, which can't.\n\nFinally, we'll check the last scene, which both can and prefers.\n\nSince the last scene can and is the preferred one, we'll associate it with the group session.\n\nIf no scene could handle the identifier, we will launch a new window scene.\n\nThis is great if your SharePlay experience requires its own scene to work in.\n\nIf multiple scenes can handle and none prefer, then one of those scenes will be randomly picked.\n\nFor the participants that didn't activate the group activity and are receiving it, the same logic will execute if the app is already running.\n\nIf your app is not running, it will get launched and the first scene will be associated.\n\nTo specify scene activation conditions for an app that uses the SwiftUI app lifecycle, you can use handlesExternalEvents.\n\nJust include the activity identifier of the group activity in either the preferring or allowing set of strings.\n\nIf your app uses the UIKit app life cycle, you can set the activation conditions on the UI scene by specifying predicates.\n\nTo learn more about scene activation conditions, check out this session from 2019.\n\nLet's consider one more example.\n\nIn this case, it's a document-based app where each scene represents a different document.\n\nNow we want to use SharePlay to collaborate on the first document.\n\nWe'll again use the group activity identifier to evaluate each of the scene's activation conditions.\n\nUnfortunately, there isn't anything inherently different about these scenes, so they all end up matching and the wrong scene gets associated.\n\nIn this case, we want to change the identifier that is used to match scenes with.\n\nTo accomplish this, we've added scene association behavior.\n\nThis allows an app to provide an identifier that will be used to find the right scene.\n\nGoing back to our example, we could use a unique identifier of each document that all participants agree on.\n\nWe'll then use that identifier to find the right scene.\n\nIf we evaluate the scenes now, we can easily configure the scene activation conditions so only the first scene is matched, and we'll end up with the right scene association.\n\nYou can specify the identifier that will be used by setting the scene association behavior on the metadata of your group activity.\n\nKeep in mind that the same identifier will be used for all other participants that join the SharePlay session.\n\nSo you want to use something that everyone will agree on.\n\nWe support three types of scene association behavior.\n\nDefault is the behavior we looked at first, where the identifier that is used to associate the scene will be the group activity identifier.\n\nAs the name indicates, this is a default behavior if you don't explicitly specify one.\n\nContent behavior allows you to specify a custom identifier.\n\nThis is meant for apps where each of the scenes will show different content, and the group activity is tied to that content.\n\nFinally, we offer the none behavior.\n\nThe none behavior will disable scene association.\n\nThis means that no scene will be associated, so the person won't see the shared banner above any of the scenes of your app.\n\nIt also means that spatial consistency is broken.\n\nThis should only be used in specific cases, such as immersive apps that don't need an additional scene, or in cases where the content that is displayed in the scene is different for each participant in the SharePlay session.\n\nSometimes you might need to know what scene a group session is associated with.\n\nThis might happen if multiple scenes could potentially be selected for scene association.\n\nTo get this information, we exposed a new property on the group session called sceneSessionIdentifier.\n\nThis property will include the identifier of the scene session that was associated with the group session.\n\nScene association is crucial to build great SharePlay experiences, so definitely apply it if you have an app that supports multiple scenes.\n\nFinally, let's talk about SharePlay from the Share menu.\n\nWhen in FaceTime, every window has a share banner above it.\n\nAs we just saw, it will indicate which scene is shared while in SharePlay.\n\nBut it's also useful when not in SharePlay.\n\nWhen a scene is not shared, it will show different ways that that scene can be shared.\n\nOne option is to simply share the window.\n\nEveryone else will see a noninteractive video feed of the window.\n\nThis works out of the box for all apps.\n\nA SharePlay app can take this further, however.\n\nBy exposing a group activity that is relevant to the current content of the window, it will get surfaced in that menu.\n\nThis is a great way to improve the discoverability of your SharePlay activity and can also remove the need to have a dedicated SharePlay button in your app's UI.\n\nThe way an app exposes the group activity is done through the same way as starting SharePlay via AirDrop.\n\nIn iOS 17, you can start SharePlay via AirDrop by having a SharePlay app open.\n\nTo fetch the group activity, the system goes through the UI responder chain of the scene that is being shown and tries to find a group activity that is specified in the activity items configuration of one of the responders.\n\nThat way you can just set the group activity on the activity items configuration of a view controller that is showing SharePlayable content, and it will get picked up automatically.\n\nTo configure the Activity Items configuration, you start by creating the activity that can be activated.\n\nNext you'll create an item provider and register the group activity on it.\n\nYou then initialize the UIActivityItemsConfiguration with the item provider.\n\nFinally, you'll need to make sure that the configuration exposes the right metadata, since that is what will be presented in the Share menu.\n\nTo do that, you can use the metadataProvider on UIActivityItemsConfiguration and provide an LPLinkMetadata object for the LinkPresentationMetadata key.\n\nThe title and image provider will be used in the Share menu.\n\nAll of this will also work if you use your own class that conforms to UIActivityItemsConfigurationReading.\n\nI just covered what you will need to consider when building windowed SharePlay experiences for this platform.\n\nMia, can you walk us through how to build shared experiences for immersive apps? Mia Ren: No problem, Willem.\n\nNow let's check out how SharePlay works for immersive apps.\n\nOn this platform, we can easily create immersive experiences using Immersive Space.\n\nImmersive Space is a special scene that allows an app to make its contents go beyond boundaries with different immersion styles.\n\nWhen the app opens an Immersive Space, the system backgrounds all other apps, and people can be fully focused in the unbounded world of this app.\n\nYou can check out this session to learn more about Immersive Space and Immersion Styles.\n\nDuring FaceTime, you can launch an Immersive Space at any time.\n\nWhen you are in a private immersive space, you are in your own private world, and you break shared context with everyone else.\n\nBecause of this, the system will hide other people for you.\n\nAnd they will see you as your contact photo, which indicates you are not with them right now.\n\nEveryone can still communicate by audio.\n\nBut come on, we don't want to be alone in FaceTime.\n\nLet's share the magical moments in the immersive world.\n\nI have got many great ideas of immersive experiences which I would love to share with my friend.\n\nFor example, it could be a group activity like this, hanging out in outer space and exploring our beautiful planet together.\n\nTo accomplish this, our shared app needs to configure a group immersive space that can be shared with everyone.\n\nIn the configuration of the system coordinator, you can find the supportsGroupImmersiveSpace flag.\n\nBy enabling it, the app tells the system that Immersive Space in this app is meant to be shared and wants to support immersive group activities.\n\nWhen people join a group session that has this flag enabled, their immersive space will become a group immersive space.\n\nThe system will move the space origin to a shared location defined by the template to establish a shared coordinate system for spatial consistency.\n\nPeople in the group immersive space will see each other as Personas.\n\nNow we have got a group immersive space with a shared coordinate system and people in there, we can place objects at the same location in it to get spatial consistency.\n\nIn the globe explore activity example, we can place a globe in the center above the origin and make sure we apply the same offset relative to the origin for everyone.\n\nEveryone will then see the globe at the same spot.\n\nNext, we will figure out how to maintain visual consistency.\n\nFor instance, if we want to rotate the globe, we will need to make sure that its orientation is synced between everyone.\n\nTo learn more about how to use GroupSession and GroupSessionMessenger to synchronize state, check out this SharePlay session.\n\nWe could also add some UI elements relative to each person in a group immersive space.\n\nFor example, we can give every participant a private control menu like this.\n\nIt's right in front of them.\n\nThey can use it to manipulate the shared globe easily.\n\nTo place this control properly, we have to know where the local user is in the group immersive space.\n\nWe can utilize the systemExperienceDisplacement method in GeometryReader3D.\n\nThis method tells you how the system has placed space origin away from the local user.\n\nit returns a Pose3D struct, which has both translation and rotation.\n\nIn order to get where the local user is relative to the space origin, we can invert this pose.\n\nThen we can use it to offset and rotate the control, so it will appear relative to the local user.\n\nOne thing to note is that the displacement does not update if the user moves.\n\nIt only provides a displacement of the space when it was initially placed.\n\nThis offers an easy way to place content relative to the person without needing to fully track where they are.\n\nThe surround template is great for the globe explore activity, where the app only has a group immersive space with a shared content in the center.\n\nBut what if your group activity has both a shared window and a group immersive space? For example, I want to build a group activity for studying the solar system like this, where people can start by reading about a planet on a shared window.\n\nAnd they can press a button to take a closer look at the planet model in a group immersive space.\n\nI would love people to always stay side by side in both cases.\n\nLet's check out what we can do with template.\n\nBy default, when your app only has a group immersive space, the Surround template will be applied, and the space origin will be placed in the center.\n\nThe same layout is applied when your app also has a shared volumetric scene.\n\nBut if your app has a shared vertical window, the Side-by-Side template will be chosen by default, and the space origin is right below the shared window.\n\nBut keep in mind, you can always change the template preference to the one that fits your group activity best.\n\nYou can choose the .conversational template or the .sideBySide template, which I think will be a great one for our solar exploration activity.\n\nAs we learned before, the distances in the template are dynamically adjusted based on the size of the shared window.\n\nYou may wonder how we can ensure that the distance is good when there's only a group immersive space.\n\nTo solve this, we have a useful knob to tweak templates called content extent.\n\nIt's a modifier on the template preference, which works for both immersive and window-based group activities.\n\nApps can set this value as the distance from the center of the content to its farthest edge in points.\n\nWhen content extent is set, the active template will factor in this value for placing the people relative to the app.\n\nAll right, let's apply what we learned about template and configure the group session for the solar explore activity we showed before.\n\nFirst, we should enable supportsGroupImmersiveSpace so people can view the object together while immersive.\n\nNext, let's set the template preference to .sideBySide and also add a modifier for the contentExtent so people can always stay side by side and have a great distance with the shared content.\n\nCool. Let's check out what this group activity would look like with people.\n\nHere, I'm with my friend Connor, and we're browsing planets on a shared window side by side.\n\nLater, I press a button, which lets me go into a group immersive space to explore Saturn.\n\nWhile I am amazed by how beautiful this model is, I also find Connor is not with me anymore, and all I see is his contact photo.\n\nBut actually, Connor is left behind, still watching the window.\n\nHe needs to press the button himself to enter the group immersive space.\n\nAs we learned before, when people are not in the group immersive space together, they would have no shared context.\n\nSo the system will hide Spatial Personas and show contact photos.\n\nIf we can still see each other's Persona, Connor may feel really confused when I look surprised at something he doesn't see.\n\nSame situation could happen if our group immersive spaces are presenting in different immersion styles.\n\nFor example, I'm looking around in a fully immersive environment, but Connor remains in passthrough.\n\nBut it would be so nice if Connor can just follow me into the same group immersive space automatically.\n\nAnd when he's not with me there, he could know where I am and join me easily.\n\nTo minimize split contacts in your immersive group activity, we have a great tool you can utilize in the system coordinator called groupImmersionStyle.\n\nIt provides an async sequence of optional immersion style, which tells your app a specific immersion style of the group immersive space that other people join, or nil when they leave a group immersive space.\n\nFor example, when I open a group immersive space, Connor's app will receive the immersion style of it, and his app can open a group immersive space with a matching style.\n\nThen we will be together in the group immersive space and have shared context again.\n\nLikewise, when Connor presses the button and leaves the group immersive space, my app will receive nil and can dismiss immersive space.\n\nNow with the help of group immersion style, everyone can always be together.\n\nSometimes you may want to step out of the immersive experience temporarily for something urgent.\n\nYou can do it with a single press on the Digital Crown.\n\nIn this case, the system will not disturb other people and change their group immersion style.\n\nWhen you step out, you will see a SharePlay banner notice, which tells you where the rest of the group is and also provides you a button to join back to the group immersive space easily.\n\nWhen you tap on the Join button, a group immersion style will be sent to your app for setting up the group immersive space.\n\nAll right, we have seen a lot in this session.\n\nLet's recap! We learned about shared context and how to use system coordinator and scene association to manage spatial and visual consistency in both windowed and immersive shared apps.\n\nWe introduced template preferences for your app to place people properly.\n\nAnd finally, we also showed you a new way to start SharePlay using the Share menu.\n\nThanks for tuning in.\n\nWe can't wait to see what incredible experiences you’re going to build with SharePlay.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "4:08",
      "title": "Observe the local participant state",
      "language": "swift",
      "code": "for await session in ExploreActivity.sessions() {\n    guard let systemCoordinator = await session.systemCoordinator else { continue }\n\n    let isLocalParticipantSpatial = systemCoordinator.localParticipantState.isSpatial\n\n    Task.detached {\n        for await localParticipantState in systemCoordinator.localParticipantStates {\n            if localParticipantState.isSpatial {\n                // Start syncing scroll position\n            } else {\n                // Stop syncing scroll position\n            }\n        }\n    }\n}"
    },
    {
      "timestamp": "6:10",
      "title": "Configure the spatial template preferences",
      "language": "swift",
      "code": "for await session in ExploreActivity.sessions() {\n    guard let systemCoordinator = await session.systemCoordinator else { continue }\n\n    var configuration = SystemCoordinator.Configuration()\n    configuration.spatialTemplatePreference = .sideBySide\n    systemCoordinator.configuration = configuration\n\n    session.join()\n}"
    },
    {
      "timestamp": "9:10",
      "title": "Configuring scene activation conditions",
      "language": "swift",
      "code": "@main\nstruct ExploreTogetherApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .handlesExternalEvents(\n                    preferring: [\"com.example.explore-together.activity\"],\n                    allowing: [\"com.example.explore-together.activity\"]\n                )\n        }\n    }\n}"
    },
    {
      "timestamp": "9:30",
      "title": "Configuring scene activation conditions",
      "language": "swift",
      "code": "class SceneDelegate: NSObject, UISceneDelegate {\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // ...\n\n        scene.activationConditions.canActivateForTargetContentIdentifierPredicate =\n                NSPredicate(format: \"self == %@\", \"com.example.explore-together.activity\")\n\n        scene.activationConditions.prefersToActivateForTargetContentIdentifierPredicate =\n                NSPredicate(format: \"self == %@\", \"com.example.explore-together.activity\")\n    }\n}"
    },
    {
      "timestamp": "10:40",
      "title": "Setting scene association behavior",
      "language": "swift",
      "code": "struct ExploreActivity: GroupActivity {\n    var metadata: GroupActivityMetadata {\n        var metadata = GroupActivityMetadata()\n        // ...\n        metadata.sceneAssociationBehavior = .content(\"document-1\")\n        return metadata\n    }\n}"
    },
    {
      "timestamp": "13:44",
      "title": "Starting SharePlay",
      "language": "swift",
      "code": "// Create the activity\nlet activity = ExploreActivity()\n\n// Register the activity on the item provider\nlet itemProvider = NSItemProvider()\nitemProvider.registerGroupActivity(activity)\n\n// Create the activity items configuration\nlet configuration = UIActivityItemsConfiguration(itemProviders: [itemProvider])\n\n// Provide the metadata for the group activity\nconfiguration.metadataProvider = { key in\n    guard key == .linkPresentationMetadata else { return nil }\n    let metadata = LPLinkMetadata()\n    metadata.title = \"Explore Together\"\n    metadata.imageProvider = NSItemProvider(object: UIImage(named: \"explore-activity\")!)\n    return metadata\n}\nself.activityItemsConfiguration = configuration"
    },
    {
      "timestamp": "16:03",
      "title": "Configure group ImmersiveSpace",
      "language": "swift",
      "code": "for await session in ExploreActivity.sessions() {\n    guard let systemCoordinator = await session.systemCoordinator else { continue }\n\n    var configuration = SystemCoordinator.Configuration()\n    configuration.supportsGroupImmersiveSpace = true\n    systemCoordinator.configuration = configuration\n}"
    },
    {
      "timestamp": "17:51",
      "title": "System Experience Displacement",
      "language": "swift",
      "code": "// Use immersiveSpaceDisplacement to offset contents in group immersive space\n\nvar body: some Scene {\n    ImmersiveSpace(id: \"earth\") {\n        GeometryReader3D { proxy in\n            let displacement = proxy.immersiveSpaceDisplacement(in: .global).inverse\n\n            Control()\n                .offset(displacement.position)\n                .rotation3DEffect(displacement.rotation)\n        }\n    }\n}"
    },
    {
      "timestamp": "20:46",
      "title": "Spatial Template Preferences",
      "language": "swift",
      "code": "// Configure the spatial template preferences with content extent\n\nfor await session in ExploreSolarActivity.sessions() {\n    guard let systemCoordinator = await session.systemCoordinator else { continue }\n\n    var configuration = SystemCoordinator.Configuration()\n    configuration.supportsGroupImmersiveSpace = true\n    configuration.spatialTemplatePreference = .sideBySide.contentExtent(200)\n    systemCoordinator.configuration = configuration\n}"
    },
    {
      "timestamp": "22:32",
      "title": "Receive group immersion style to configure group immersive space",
      "language": "swift",
      "code": "// Receive group immersion style to configure group immersive space\n\nfor await session in ExploreSolarActivity.sessions() {\n    guard let systemCoordinator = await session.systemCoordinator else { continue }\n\n    Task.detached {\n        for await immersionStyle in systemCoordinator.groupImmersionStyle {\n            if let immersionStyle {\n                // Open an immersive space with the same immersion style\n            } else {\n                // Dismiss the immersive space\n            }\n        }\n    }\n}"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "SystemCoordinator",
        "url": "https://developer.apple.com/documentation/GroupActivities/SystemCoordinator"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10087/4/36E3D439-2B36-408C-9249-3929F2E75FBD/downloads/wwdc2023-10087_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2023/10087/4/36E3D439-2B36-408C-9249-3929F2E75FBD/downloads/wwdc2023-10087_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10239",
      "year": "2023",
      "title": "Add SharePlay to your app",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10239"
    },
    {
      "id": "10075",
      "year": "2023",
      "title": "Design spatial SharePlay experiences",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10075"
    },
    {
      "id": "10111",
      "year": "2023",
      "title": "Go beyond the window with SwiftUI",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10111"
    },
    {
      "id": "10187",
      "year": "2021",
      "title": "Build custom experiences with Group Activities",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10187"
    },
    {
      "id": "259",
      "year": "2019",
      "title": "Targeting Content with Multiple Windows",
      "url": "https://developer.apple.com/videos/play/wwdc2019/259"
    }
  ],
  "extractedAt": "2025-07-18T10:45:38.154Z"
}