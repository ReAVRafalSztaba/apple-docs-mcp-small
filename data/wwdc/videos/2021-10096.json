{
  "id": "10096",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10096/",
  "title": "Get ready for iCloud Private Relay",
  "speakers": [],
  "duration": "",
  "topics": [
    "Privacy & Security",
    "System Services"
  ],
  "hasTranscript": true,
  "hasCode": false,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Tommy Pauly: Hi, I'm Tommy Pauly, and along with my colleague, Delziel, I'll be giving you an introduction to an exciting new feature in internet privacy.\n\niCloud Private Relay is a new service that prevents networks and servers from monitoring user activity across the internet.\n\nAnd it's available as part of every iCloud+ subscription.\n\nPrivate Relay not only protects users when they're browsing the web, but also adds protection to the traffic generated by your app to make sure you're not unintentionally leaking user information or exposing users to security attacks.\n\nToday, you'll learn what iCloud Private Relay is and how it affects your app; how to ensure that your app works great with Private Relay; how to prepare your websites and servers; and, lastly, how to manage a network and monitor your traffic when Private Relay is enabled.\n\nLet's get started.\n\nPrivate Relay is built into iOS and macOS, so you don't need to do anything to adopt it from your app.\n\nIt's also important to understand that it won't always be affecting your app.\n\nIt will only apply when a user is an iCloud+ subscriber and has Private Relay enabled.\n\nYou're probably wondering, What does it actually do? Here's how things currently work without Private Relay.\n\nWhen someone accesses the internet, anyone on their local network can see the names of all of the websites they access based on inspecting DNS queries.\n\nThis information can be used to fingerprint a user and build a history of their activity over time.\n\nNo one should be able to silently collect all of this information, whether it's a public Wi-Fi operator, another user on the network, or an internet service provider.\n\nWhen connections reach the servers that run websites, those servers can see the user's IP address.\n\nThis allows the servers to determine user location without explicit permission.\n\nEven worse, the servers are able to fingerprint user identity and recognize users across different websites, even when tools like Intelligent Tracking Prevention in Safari are preventing correlation via cookies.\n\nThese are big problems for user privacy, and in order to fix them, we need a new approach that has privacy built in by design.\n\niCloud Private Relay adds multiple secure proxies to help route user traffic and keep it private.\n\nThe proxies are run by separate entities.\n\nOne is Apple, and one is a content provider.\n\nNow, when someone accesses the internet, only the client IP address is visible to both the network provider and to the first proxy.\n\nThe second proxy only sees the name the user is requesting and uses that to build the connection to the server.\n\nIt is critical to note that no one in this chain -- not even Apple -- can see both the client IP address and what the user is accessing.\n\nThe opportunities for fingerprinting have been removed.\n\nThis is privacy by design.\n\nPrivate Relay uses the latest transport protocols and privacy-preserving authentication to ensure that every transaction is both secure and fast.\n\nYou can learn more about this technology in the “Apple's privacy pillars in focus” session.\n\nPrivate Relay is focused on securing the most sensitive traffic on the system without impacting user experience.\n\nIn iOS 15 and macOS 12, Private Relay will apply to all web browsing in Safari, all DNS name resolution queries, and a small subset of traffic from apps.\n\nSpecifically, this will include all insecure HTTP traffic, such as TCP port 80.\n\nIf your app provides a content filter or a parental controls filter, it will still see traffic before it goes through Private Relay, so you can apply your filters just as before.\n\nYou can learn more about this in the \"Meet the Screen Time API\" session.\n\nNot all networking done by your app occurs over the public internet, so there are several categories of traffic that are not affected by Private Relay.\n\nAny connections your app makes over the local network or to private domain names will be unaffected.\n\nSimilarly, if your app provides a network extension to add VPN or app-proxying capabilities, your extension won't use Private Relay and neither will app traffic that uses your extension.\n\nTraffic that uses a proxy is also exempt.\n\nNext, let's cover what you need to do to make sure your app is ready to work well with Private Relay.\n\nThe great news is that for almost every app, you don't need to do anything new! Private Relay will just work.\n\nHowever, there are some best practices you should know about.\n\nPrivate Relay works no matter what networking API you're using.\n\nFor several years, we've recommended that your apps use modern APIs such as URLSession and NWConnection.\n\nNow, you have one more reason to adopt them throughout your apps.\n\nThese APIs provide you the best tools to understand how Private Relay is applying to your traffic.\n\nIf you use URLSession, you can use the Network Xcode Instrument to inspect your tasks, even when they are going through Private Relay.\n\nYou can learn more about how to do this in the \"Analyze HTTP traffic in Instruments\" session.\n\nAnd you can use metrics APIs in both URLSession and Network.framework to understand when your connections use Private Relay.\n\nIn TaskTransactionMetrics, you can check to see if your task used a proxy.\n\nIn NWConnection's EstablishmentReport, you can also inspect the timings of DNS name resolution and each stage of the proxied connection establishment.\n\nPrivate Relay takes a big step towards making unencrypted and insecure HTTP connections a thing of the past.\n\nYou can join in this effort too! If you're still using insecure HTTP -- that's connections on TCP port 80 -- now is the time to change.\n\nWhen Private Relay is enabled, these insecure connections will be proxied, which protects them from attackers on a local network between the client and the proxy.\n\nHowever, it’s still best to have your connections be secure end to end for all users.\n\nTo do this, make sure your server supports TLS and change your URLs from http:// to https://.\n\nYour app may have exceptions for App Transport Security to allow insecure traffic.\n\nYou can look at this list to audit what insecure traffic your app uses and remove these exceptions.\n\nIf your app provides functionality based on location, this is also a great time to make sure you're using APIs from Core Location instead of relying on servers inferring location from IP addresses.\n\nIP address geolocation is often unreliable and inaccurate.\n\nCore Location allows you to specify the precision of the location you need and is based on explicit user permission.\n\nYou can learn more about the latest enhancements to location access in the “Apple's privacy pillars in focus” session.\n\nOnce you've made sure your app is ready for Private Relay, try it out! Sign into an iPhone, iPad, or Mac with an iCloud+ subscription, and make sure Private Relay is enabled in the iCloud section of the Settings app or in System Preferences.\n\nYou can provide feedback with the tag \"iCloud Private Relay\" in the feedback app.\n\nNow I'll hand it off to my colleague, Delziel.\n\nDelziel Fernandes: Thanks, Tommy.\n\nHi, I'm Delziel Fernandes, and I'll be talking about how to prepare your server and manage your network with Private Relay.\n\nIf you have servers that your app relies on, or that user access in Safari, there are a few things you can do to prepare for Private Relay.\n\nYour servers can identify connections that come in using Private Relay by recognizing the proxy IP addresses.\n\nThese proxy IP addresses may be shared by many users within a region.\n\nEach address is mapped to a specific city or region.\n\nSo if you apply the correct geo IP mapping databases, your servers will still have the relevant information.\n\nPrivate Relay guarantees that users can't use the system to pretend to be from a different region, so you can continue to enforce region-based access restrictions.\n\nDetails about the proxy IP addresses will be available as an article associated with this session.\n\nNow let's take a look at network connections from devices using Private Relay.\n\nWhen a device tries to access a server, it first sets up a network connection to the ingress proxy.\n\nThis connection is set up using an IP address assigned by the network provider.\n\nThe device then uses the ingress proxy to forward network requests to the egress proxy using the ingress proxy IP address.\n\nThe egress proxy then forwards these requests to the destination servers by choosing an IP address that maps to the device's city or region.\n\nIn general, your servers and websites should stop solely relying on client IP address to determine user location or identity.\n\nIf you need location access, consider requesting the user's location explicitly, and only at the granularity you need.\n\nIf you need to identify users, request a login or some other form of explicit identification rather than assuming that the IP address is tied to the identity.\n\nLast, let's cover some tips for managing your network when Private Relay is in use.\n\nIf you're running a packet trace on your local network when Private Relay is in use, you'll see some new traffic patterns.\n\nYou'll now see a lot more traffic running on UDP port 443.\n\nThis is QUIC -- or HTTP/3 -- traffic that's being used to communicate with the Private Relay proxy.\n\nYou can make sure your traffic works well by allowing UDP port 443 on your network and by making sure your routers or Network Address Translators are tuned to handle it well.\n\nYou'll also see fewer cleartext UDP DNS queries on your network.\n\nLet's go over a typical network connection request from a device when Private Relay is not in use.\n\nWhen a device tries to access a server, it first sends a DNS query for the hostname of the server.\n\nOnce the hostname is resolved to an IP address, the device then connects to the IP address of the server using a transport protocol like TCP.\n\nThe device then performs a TCP three-way handshake with the server followed by a TLS exchange to set up a secure connection with the server.\n\nBut as you can see, without Private Relay, the hostname of the server and the IP address of the device connecting to the server are visible by simply observing packets on the network.\n\nWith Private Relay, the device first sets up a connection to the ingress Proxy using QUIC, or HTTP/3.\n\nIn packet captures, you will notice UDP packets sent to port 443 of the ingress proxy.\n\nOnce the network connection is established to the ingress proxy, access to a server is secured within the connection to the ingress proxy.\n\nOn the server end, there is no change in protocol.\n\nThe TCP/TLS exchange is similar to traffic without Private Relay.\n\nThe only difference is that the server sees the incoming connection from a proxy IP address instead of a device's IP address.\n\nMost networks don't need to audit or monitor all user traffic.\n\nHowever, if you run an enterprise or school network, your network may have policies that require intercepting all traffic.\n\nTo support this use case, you can block the hostname of the iCloud Private Relay proxy server.\n\nThen, when a device connects to your network, the user will receive a prompt indicating that Private Relay is blocked on the current network.\n\nThey can then choose to either disable Private Relay for that network or switch networks.\n\nInformation about the proxy hostname will be available as an article associated with this session.\n\nFor parental controls, the best solution is to use content filter APIs provided by NetworkExtension framework.\n\nThis allows traffic to be audited on device even when Private Relay is enabled.\n\nFor more information on content Filter APIs, watch \"Meet the Screen Time API\" and \"Network extension for the modern Mac\" sessions.\n\nTo wrap things up, use modern secure networking APIs like URLSession in your apps; test your apps with Private Relay; and make sure your servers and websites work well when they receive connections routed through Private Relay.\n\nThanks for watching, everyone! ♪",
    "segments": []
  },
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Protecting the User’s Privacy",
        "url": "https://developer.apple.com/documentation/UIKit/protecting-the-user-s-privacy"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10096/8/601CAC32-E343-4373-9758-85F33CAAB3D8/downloads/wwdc2021-10096_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10096/8/601CAC32-E343-4373-9758-85F33CAAB3D8/downloads/wwdc2021-10096_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10002",
      "year": "2023",
      "title": "Ready, set, relay: Protect app traffic with network relays",
      "url": "https://developer.apple.com/videos/play/wwdc2023/10002"
    },
    {
      "id": "10085",
      "year": "2021",
      "title": "Apple’s privacy pillars in focus",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10085"
    },
    {
      "id": "10123",
      "year": "2021",
      "title": "Meet the Screen Time API",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10123"
    },
    {
      "id": "714",
      "year": "2019",
      "title": "Network Extensions for the Modern Mac",
      "url": "https://developer.apple.com/videos/play/wwdc2019/714"
    }
  ],
  "extractedAt": "2025-07-18T10:43:05.378Z"
}