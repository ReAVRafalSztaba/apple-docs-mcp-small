{
  "id": "10221",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10221/",
  "title": "Streamline your localized strings",
  "speakers": [],
  "duration": "",
  "topics": [
    "Accessibility & Inclusion",
    "Essentials"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Thomas Naudet: Hello, and welcome to WWDC.\n\nI'm Thomas from the localization team at Apple, and today I'll be showing you how to streamline your localized strings.\n\nYou will see the easiest way to make your app work in many languages.\n\nWe'll start by writing UI code.\n\nThen we'll see how to organize strings in your targets.\n\nAfter that we'll let Xcode do the heavy lifting for us.\n\nLastly, we'll learn new techniques for advanced strings.\n\nWith all this, we'll guarantee your app is prepared for great translations.\n\nThis is super important because text is everywhere in our lives.\n\nWe use text to communicate and get information in the real world.\n\nIt's obviously all the more true on our connected devices with all the apps, notifications, and articles we read every day.\n\nMore than ever, it's crucial the text can be read, be accurate, and be accessible.\n\nImagine being completely lost in this street trying to find a small shop among all those signs.\n\nIt could be the same for users of your app.\n\nText is such a core feature -- it guides users and brings familiarity.\n\nIn that way, localizing your app is an opportunity to reach all users around the world, especially in all the markets the App Store provides.\n\nAs a developer, you are already familiar with text, since us developers enjoy naming things.\n\nWe called text \"strings.\" Strings are everywhere: titles, buttons, user content, online content, search queries, graphics, accessibility labels, and so on.\n\nThink about all the strings in your app as movie subtitles.\n\nIn the movie you watch, you want all subtitles to be in the right language, at the right time, with the right context, and consistent throughout the movie.\n\nThis is the exact same here.\n\nYour strings convey meaning to your visual content and help the user navigate through the streets of your app.\n\nLet's see now, from a developer perspective, what the localization process is.\n\nYour user interface presents strings in views.\n\nThose strings live in their own files.\n\nThis helps separate the concerns between your visual content -- which is generic for all languages -- and your specific translations.\n\nIn between, the Foundation framework links your user interface and all your strings.\n\nIn this talk I'll go into details about each of these components.\n\nThat looks like a lot, but we'll uncover everything step by step.\n\nThen let's start by defining strings in your user interface.\n\nDisplaying localized strings is easy by combining the latest Apple technologies.\n\nI encourage you to use these techniques in your app, so that you never have to think twice about localization again! Well, any string you define in UI needs to be localized.\n\nThere are two types of visible strings.\n\nOne is directly defined as you create your view.\n\nHere, I've defined a label in SwiftUI and Storyboard.\n\nAnd yes! Both are localizable.\n\nI told you it was easy! The second type of strings is more general and can be found in model code in SwiftUI but also in AppKit or UIKit.\n\nYou might need to store a string in a variable, or return it from a function.\n\nIn all these cases, you can use NSLocalizedString.\n\nNew in iOS 15 and macOS Monterey, you can use our refined method for Swift, String(localized:).\n\nLet's focus on the first method in SwiftUI for a moment.\n\nEverything you present in the interface is indeed a view, whether this a text label or a button, it's all localizable by default, ready to host your future translated strings.\n\nSince this is enabled by default, if you have mock content such as previews, make sure you opt out by using verbatim.\n\nThis will avoid unnecessary work for translators.\n\nYou can learn more techniques in this related session.\n\nNow that we've covered the basics, let's learn how to make this string more dynamic.\n\nI'm currently showing a localized button to place an order.\n\nYou might not know I love concerts, and I love seeing artists live with friends even more! In this app, it's not obvious how many tickets I'm ordering for all my friends.\n\nSo let's improve that button to include the number of tickets I've selected.\n\nThat was easy.\n\nI just inserted a variable in the string like I'm used to in Swift.\n\nHere, count will be replaced at runtime by the actual number, 3.\n\nNow that we've seen all our options, I want to call out a common pitfall: String with (format:).\n\nString with (format:) is great, but it's not intended to be used for localized strings.\n\nLet's see why with an example in Arabic where the text direction and the digits can be different.\n\nThe good news is both are managed automatically when you use String(localized:).\n\nNow, the number \"three\" is correctly written in Arabic in the button, according to the user's preferred digits in Settings.\n\nString(localized:) also supports plurals, and isolation of each part of the string, meaning words are not shuffled around in bidirectional text.\n\nLastly, be careful not to overuse variables.\n\nGluing strings together is handy but could lead to translation problems.\n\nHere the word “Order\" could be written differently in some languages whether you order now or order later.\n\nIt's safer to use two separate strings.\n\nAll right. There's one major, final aspect we need to see that I secretly kept from you until now.\n\nThe strings you've defined will need to be translated by somebody other than you.\n\nTranslators don't have the full app UI in front of them while they translate string by string, and they need to stay consistent in all strings.\n\nSo you need to help them, just like you help your coworkers understand your code by adding code comments.\n\nI insist, no matter the string, you should always define a comment.\n\nAnd don't forget your Storyboard files; they have a comment field in the identity inspector.\n\nLet me share some tips to help translators.\n\nFirst, comments should explain where the string is visible.\n\nFor instance, is this a button? A label? Some VoiceOver text? Knowing if this is an action -- to order -- or a statement -- an order -- is critical.\n\nSecond, they should explain the context.\n\nIf I press Order, am I completing a transaction or sorting a list? Lastly, comments should explain variables.\n\nWhen localizers see your strings, they don't see your code, so they don't see the name of your variables to get a clue, only a generic placeholder instead.\n\nSo for the last example here, what does the number before “Ordered\" represent? Is this the number of past orders? The number of tickets I've just ordered? Yes! Thanks to the comment, I know it' s the total number of tickets.\n\nTranslators in lots of languages will be able to correctly translate according to the gender of the word \"tickets.\" Sometimes the easiest is also to write an example value of the variable in the comment.\n\nWith that in mind, there it is.\n\nYou have your UI code ready for localization.\n\nNow, we'll learn how you can maintain your UI code separately from your strings.\n\nBasically, you'll be able to organize where your strings will live.\n\nIn order to do this, let's see how Foundation will make sure that your code loads the correct localized strings files.\n\nOf course, localization starts with a language.\n\nYou can head into your project settings to add a new one.\n\nLet's take a look at Xcode.\n\nSelect your project and click the plus(+) button to add a localization.\n\nYou will see the menu gained lots of new languages in the latest version.\n\nLet's see... In our app list of localizations, it starts with Base at the top.\n\nIndeed, this where the UI elements live because they are shared across languages.\n\nFor instance, a Storyboard file is shared; a Siri Intents file is shared too.\n\nThen they need to be added to Base.\n\nSo make sure you click the Localize button for all shared assets.\n\nOK but your strings, on the other hand, are not shared.\n\nStrings belongs to one language.\n\nSo you will have your strings in English and all your strings in Arabic.\n\nTo test your app with strings in a certain language, you can change the preview environment in SwiftUI or change the app scheme settings.\n\nIf the device is in a language your app doesn't support, Foundation tries to find the best alternative.\n\nIf my phone is in Mexican Spanish, Foundation will try to fallback on Latin American Spanish, then to Spanish, then to your app development language -- for instance, English.\n\nLastly, when strings come from a server, make sure you respect the user's preferred language.\n\nGreat.\n\nWe've seen that each language has a collection of strings.\n\nThose strings can be further organized into files called \"tables.\" You can use this feature to organize every string as you'd like.\n\nFor instance, you could have a table for each feature, or each screen.\n\nSince this is optional by default, all strings are put in a table named Localizable.\n\nConcretely, this means all strings are stored in a file named Localizable.strings.\n\nLet's look at an example to recap what we've learned so far.\n\nI have the following code declaring a string with a variable, a customized table name, and a comment.\n\nLet's say my app supports French.\n\nIn Xcode, you will then need a UserProfile.strings file containing the French translation from English.\n\nIt will be stored in a French resource folder named by convention, fr.lproj.\n\nThe comment was very useful for the French translator.\n\nThey used an \"e\" to mark the feminine, as \"places;\" French for tickets is feminine.\n\nLet's spice things up a little bit and talk about bundle.\n\nThis parameter allows loading strings across targets.\n\nThe bundle parameter is main by default.\n\nIn your own app, you don't need it.\n\nMain is that app.\n\nIn your app extension, main refers to your own extension, so you don't need it either.\n\nBut let's say you want to share a string between your app and its extension.\n\nIn your extension, you will need to provide the bundle of the main app.\n\nDoing so avoids duplicating the strings between the two.\n\nYou could also get your strings from a framework.\n\nIn that case, either you tap directly into the framework's strings by specifying its bundle in your app code, or the framework vends you variables you can directly use.\n\nThose localized string variables have been defined in the framework by specifying the framework's own bundle.\n\nLet's look back at our model, only now we'll update it to make our app load the string provided by the framework.\n\nThe framework defines the string and informs Foundation the translation is stored inside its own bundle in a strings file.\n\nWithout this parameter, the string would be fetched from the hosting app instead and not found.\n\nIn practice, it looks like this.\n\nYou supply the bundle where your text is stored.\n\nThe framework will look for the strings into its own bundle.\n\nThen it's easy for your app.\n\nThe string can be used in a simple line of code.\n\nMoreover, if you implement localization in your frameworks this way, you won't even have to create the strings file presented here containing “Complete.” Let's now see why.\n\nWe've seen everything you can do in code to declare and organize strings.\n\nBut we haven't seen how to actually create the files that will hold your translations.\n\nIt turns out you actually don't need to create those strings files.\n\nXcode can take care of creating all the .strings files for you.\n\nWhen you use Export Localizations it reads your code and extracts all your strings.\n\nThis is great because you don't have to maintain strings files.\n\nIf you used to forget to localize the string you've just coded in your UI, this is for you.\n\nIf you struggle with ‘genstrings,’ this is for you too.\n\nThis year, in Xcode 13, we've added compiler support for Swift strings extraction.\n\nAlso, workspaces are now fully supported.\n\nThis further separates the concerns between your logic and your translations.\n\nXcode will detect and extract text from the Swift and Foundation methods we've seen earlier.\n\nPlease be aware, if you have custom code that wraps those APIs, this will not work by default.\n\nYou shouldn't have to use a method or macro usually, but if you really need to, you can add them to your build settings under Localized String Macro Names.\n\nFor the rest, Xcode will extract for localization your app name and privacy descriptions defined in Info.plist, and in general all assets marked as Localized in Xcode's inspector.\n\nIf you have existing localizations, you can already transition to Xcode's export for your new UIs.\n\nThe new strings will be automatically added to your existing files.\n\nThis is great if you want to convert your project at your own pace.\n\nAs a bonus, screenshots from your UI tests are now included.\n\nIt's great for your localizers so that they get context where a string is, and it's awesome for you to showcase localized screenshots of your app on the App Store.\n\nAll right, Xcode extracted all the localization catalogs, so you'd think it's the translators' turn to work now.\n\nActually, you can do it too! New in Xcode 13, exported localization catalogs can be viewed and edited directly in Xcode.\n\nYou can see each generated file -- so each table -- in their bundles on the left.\n\nAnd for your selection, you can see all the contained strings, images, and files.\n\nYou can filter strings, sort them, see comments, screenshots, and even translate! This is very convenient if you develop and translate your own app.\n\nIt lets you review and bugfix strings yourself, too.\n\nWhen translators send you back the translated string catalogs, you can import them into your project using the Product menu in Xcode.\n\nAnd boom! Your strings files, stringsdicts, and other assets will be created and updated.\n\nUsing the command line equivalents, you can run an automated export and import on a continuous integration system.\n\nBy calling them regularly, your project gets the most up-to-date strings, and a fast turnaround at getting your new UI translated.\n\nYou can see the enhanced workflow in action in this year's session, \"Localize your SwiftUI app\" and learn more in the introductry session.\n\nThat's it! You've witnessed how strings are born and live in your app.\n\nTo conclude, I'll show you how to deal with some more complex strings.\n\nAnd I'm sure you'll love the new features we have in store.\n\nLet's start with a great one! We've improved attributed strings to have built-in localization.\n\nIt's now possible with the support of the Markdown syntax! You can now localize your strings without losing any formatting.\n\nNo more risky character operations, just to make one word in bold.\n\nSpeaking of which, here I use asterisks to put a strong emphasis on “complete.” I encourage you to check \"What's new in Foundation\" to learn how you can add a link, an emphasis, monospace text, and so on.\n\nWe've seen that one string you define in code will have one translation in a strings file.\n\nBut sometimes you need your string to have multiple representations.\n\nThis is possible with a stringsdict file, a collection of strings adapting to rules you define.\n\nFor instance, remember our example where we would like to order several tickets? In English, we would add an \"s\" as a suffix if there are multiple tickets and no \"s\" for one ticket.\n\nTo keep your code simple and correct, you need to define this plural rule using a stringsdict.\n\nBecause if you localize your app, those rules will be different for each language.\n\nLook at some of the cases in Russian.\n\nYou don't want to deal with that in code, it's rather something localization should take care of.\n\nLet's see how we would implement that.\n\nNo code change needed; we will still use our existing code above.\n\nFirst, compared to strings files being made for you, stringsdict is a manual opt-in.\n\nSo create one using the Xcode template, and make sure you clicked Localize in the inspector.\n\nAll right, it all starts with the string you've defined in code.\n\nIf you have multiple plural strings in code, you can add this root entry here for each of them.\n\nInside, you define the actual value presented.\n\nThis value follows a search-replace mechanism.\n\nHere in this example I've defined one token named \"tickets.\" It will hold the fulll final string.\n\nIt's best to include most of the text inside tokens, but that field will be localizable in case translators need to add a prefix, a suffix, or move the tokens around in case you have multiple variables.\n\nOK, that token will vary according to your one variable in code.\n\nThen let's define that tickets token.\n\nFirst, we just confirm that we're doing some pluralization.\n\nThen we indicate the variable is a number with the C-style formatter d.\n\nAnd finally, we can write the plural rules.\n\nIn English, we can just declare the rule \"one\" and \"other\" and \"zero\", if you'd like.\n\nFor each entry, we write the actual value of the tickets token.\n\nThen, if we have three tickets, in English it will use \"other\" and generate “Order 3 Tickets\".\n\nby replacing %d with the number 3.\n\nIf a language needs more cases, don't worry.\n\nXcode will add them for you at export time.\n\nIn Russian it will add “few” and “many” on top of the existing ones.\n\nThat's it! Our string will be pluralized at runtime.\n\nBefore we move on, I want to call out one case.\n\nAlthough stringsdict should be used for plurals, it's meant for strings containing a number.\n\nWe've seen earlier the case \"one\" for singular in English.\n\nIt is indeed for the number one in Russian as well, but, it's also used for 21, 31, and so on.\n\nThen in that case, using stringsdict would not be correct as you just want equals to one only.\n\nIn this example, the plural varies on this, both, or all.\n\nThere is no number; please don't use a stringsdict.\n\nImagine me booking 21 tickets for all my friends, and I would see in Russian, \"Order This Ticket\" instead of \"Order All Tickets.\" I would ask you, \"Where's my money?\" Instead use this simple but effective if/else for correct pluralization of each of the three strings, in all languages.\n\nAnd that was plural support, but stringsdict can handle many more variant types of a string.\n\nI invite you to watch the related sessions to learn more.\n\nThis is great, but we wanted to provide you a simpler way.\n\nYes, Foundation learned this year how to do grammar for you! With Markdown support added to attributed strings, use this new format with the inflect attribute, and you'll get the right value computed at runtime, like on this button.\n\nThis is a great new addition to iOS 15 and macOS Monterey, currently available in select languages.\n\nIf you want more control, you can use a stringsdict.\n\nWe didn't stop at adding plural support.\n\nWe wanted our software strings to be more inclusive.\n\nFor instance, when an app welcomes users, it's pretty straightforward in English.\n\nBut it is not in Spanish because it depends on the user's term of address.\n\nUp to now, you had to present a nonpersonalized string, which is correct but stilted to most Spanish users.\n\nLiterally, \"We give you our welcome.\" So what if we could personalize the string for the user? With our new Markdown notation, you can do that now! The string will now follow the term of address you select in the language settings of your device.\n\nSo “Bienvenida\" for users who want to be referred to in the feminine, “Bienvenido\" in the masculine, and if we do not know, we'll use the existing inflection alternative.\n\nInline inflections for plural and term of address can be defined either in your code or your translations.\n\nWe are super excited about this new addition to select languages, and we can't wait to see your app use it.\n\nFinally, we've seen today all the ways you can write localizable strings.\n\nBut if you want to present data, you should actually let the frameworks write them for you.\n\nOur formatters handle hundreds of combinations of languages and regions, and a variety of types and units.\n\nSo don't hardcode; let us do the hard work.\n\nAnd this is easier than ever starting this year to adopt formatters in Swift.\n\nWe made them easy to use inline in your string interpolation.\n\nCheck this year's \"What's new in Foundation\" to find your new favorite API and get details about all those we've seen today.\n\nIf you need to deploy to previous releases or want details on formatters, check last year's session.\n\nAll right, what I want you to take away today is that if you write code using modern APIs, Xcode will generate all the strings for you.\n\nWe saw how you can organize your strings across bundles, and we discovered new APIs to make grammar and formatting easy for you.\n\nIf you follow all these techniques, adding a new language won't require any code changes! Lastly, always test.\n\nNo matter how much effort you put into localizing your strings, you should test your app to make sure it runs great in all languages.\n\nWith that, I can't wait to book concerts with your fully localized app.\n\nEnjoy the rest of WWDC, thank you for watching.\n\n♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "3:30",
      "title": "Declaring a string",
      "language": "swift",
      "code": "Button(\"Order\")"
    },
    {
      "timestamp": "3:44",
      "title": "Declaring a string anywhere else",
      "language": "swift",
      "code": "button.title = NSLocalizedString(\"Order\", comment: \"…\")\nbutton.title = String(localized: \"Order\")"
    },
    {
      "timestamp": "4:20",
      "title": "Declaring a string in a SwiftUI view 2",
      "language": "swift",
      "code": "Text(\"Your order is ready.\")\nButton(\"Order\") {\n  // Action…\n}"
    },
    {
      "timestamp": "4:33",
      "title": "Declare a string in SwiftUI view with verbatim",
      "language": "swift",
      "code": "Text(verbatim: \"Sample data\")"
    },
    {
      "timestamp": "4:54",
      "title": "Button to place an order",
      "language": "swift",
      "code": "// SwiftUI\nButton(\"Order\") { … }\n\n\n// Swift\nbutton.title = String(localized: \"Order\")"
    },
    {
      "timestamp": "5:15",
      "title": "Button to place an order with a variable",
      "language": "swift",
      "code": "let count = 3\n\n\n// SwiftUI\nButton(\"Order \\(count) Tickets\") { … }\n\n\n// Swift\nbutton.title = String(localized: \"Order \\(count) Tickets\")"
    },
    {
      "timestamp": "5:36",
      "title": "Button to place an order with a variable 2",
      "language": "swift",
      "code": "let count = 3\n\n// Supports user’s preferred numbers,\n// pluralization, RTL variables isolation…\n// Previously: .localizedStringWithFormat()\nString(localized: \"Order \\(count) Tickets\")"
    },
    {
      "timestamp": "6:21",
      "title": "Use 2 separate strings",
      "language": "swift",
      "code": "// Recommended for all languages\nString(localized: \"Order Now\")\nString(localized: \"Order Later\")"
    },
    {
      "timestamp": "6:57",
      "title": "Button to place an order 2",
      "language": "swift",
      "code": "// SwiftUI\nText(\"Order\")\n\n\n// Swift\nString(localized: \"Order\")"
    },
    {
      "timestamp": "7:09",
      "title": "Button to place an order with comment",
      "language": "swift",
      "code": "// SwiftUI\nText(\"Order\", comment: \"Button: confirms concert tickets booking”)\n\n\n// Swift\nString(localized: \"Order\", comment: \"Button: confirms concert tickets booking\")"
    },
    {
      "timestamp": "7:36",
      "title": "What makes a good comment",
      "language": "swift",
      "code": "Text(\"Order\", comment: \"Button: confirms concert tickets booking\")\nText(\"Order\", comment: \"Button: confirms concert tickets booking\")\nText(\"\\(ticketCount) Ordered\", comment: \"Order summary: total number of tickets ordered\")"
    },
    {
      "timestamp": "10:52",
      "title": "Request server strings in the user's language",
      "language": "swift",
      "code": "Bundle.preferredLocalizations(from: allServerLanguages).first"
    },
    {
      "timestamp": "11:37",
      "title": "Declare a string with a variable, customized table name, and a comment",
      "language": "swift",
      "code": "Text(\"\\(ticketCount) Ordered\",\n     tableName: \"UserProfile\",\n     comment: \"Profile subtitle: total number of tickets ordered\")"
    },
    {
      "timestamp": "13:49",
      "title": "Using a framework",
      "language": "swift",
      "code": "/* —-----------—------------—-—---- In TicketKit Framework —---------—------------—-—---- */\n\n// TicketKit/OrderStatus.swift\npublic enum OrderStatus {\n    case pending, processing, complete, canceled, invalid(Error)\n\n    var displayName: String {\n        switch self {\n        case .complete: return String(localized: \"Complete\",\n                                      bundle: Bundle(for: AnyClassInTicketKit.self),\n                                      comment: \"Standalone ticket status: order finalized\")\n          \n/* —-----------—-----------—---—---       In Host App      —---------—------------—-—---- */\n\nimport TicketKit\nText(OrderStatus.complete.displayName)"
    },
    {
      "timestamp": "17:43",
      "title": "Import translated strings catalogs",
      "language": "swift",
      "code": "xcodebuild -exportLocalizations -workspace VacationPlanet.xcworkspace -localizationPath ~/Documents\nxcodebuild -importLocalizations -workspace VacationPlanet.xcworkspace -localizationPath ~/Documents/de.xcloc"
    },
    {
      "timestamp": "18:28",
      "title": "Localized attributed strings",
      "language": "swift",
      "code": "AttributedString(localized: \"Your order is **complete**!\",\n                 comment: \"Ticket order confirmation title\")"
    },
    {
      "timestamp": "19:22",
      "title": "Plural with stringsdict",
      "language": "swift",
      "code": "String(localized: \"Order \\(ticketCount) Ticket(s)\")"
    },
    {
      "timestamp": "22:46",
      "title": "Plural for strings without a number",
      "language": "swift",
      "code": "if ticketCount == 1 {\n    button.text = String(localized: \"Order This Ticket\")\n} else if ticketCount == 2 { // If needed\n    button.text = String(localized: \"Order Both Tickets\")\n} else {\n    button.text = String(localized: \"Order All Tickets\")\n}"
    },
    {
      "timestamp": "23:31",
      "title": "Automatic grammar agreement",
      "language": "swift",
      "code": "AttributedString(localized: \"Order ^[\\(ticketsCount) Ticket](inflect: true)\")"
    },
    {
      "timestamp": "25:45",
      "title": "Format data in strings",
      "language": "swift",
      "code": "[\"pop\", \"rock\", \"electronic\"].formatted(.list(type: .or)) // pop, rock, or electronic\n\nText(\"Total: \\(price, format: .currency(code: \"USD\"))\", // Total: $9.41\n     comment: \"Order subtitle: total price of all tickets\")"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "Localization",
        "url": "https://developer.apple.com/documentation/Xcode/localization"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10221/4/E712C2D5-BD11-435B-8F19-C4ACFD79160A/downloads/wwdc2021-10221_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10221/4/E712C2D5-BD11-435B-8F19-C4ACFD79160A/downloads/wwdc2021-10221_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10110",
      "year": "2022",
      "title": "Build global apps: Localization by example",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10110"
    },
    {
      "id": "10107",
      "year": "2022",
      "title": "Get it right (to left)",
      "url": "https://developer.apple.com/videos/play/wwdc2022/10107"
    },
    {
      "id": "10220",
      "year": "2021",
      "title": "Localize your SwiftUI app",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10220"
    },
    {
      "id": "10109",
      "year": "2021",
      "title": "What's new in Foundation",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10109"
    },
    {
      "id": "10160",
      "year": "2020",
      "title": "Formatters: Make data human-friendly",
      "url": "https://developer.apple.com/videos/play/wwdc2020/10160"
    },
    {
      "id": "403",
      "year": "2019",
      "title": "Creating Great Localized Experiences with Xcode 11",
      "url": "https://developer.apple.com/videos/play/wwdc2019/403"
    }
  ],
  "extractedAt": "2025-07-18T09:08:55.274Z"
}