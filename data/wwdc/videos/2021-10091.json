{
  "id": "10091",
  "year": "2021",
  "url": "https://developer.apple.com/videos/play/wwdc2021/10091/",
  "title": "Send communication and Time Sensitive notifications",
  "speakers": [],
  "duration": "",
  "topics": [
    "App Services"
  ],
  "hasTranscript": true,
  "hasCode": true,
  "transcript": {
    "fullText": "♪ Bass music playing ♪  ♪ Kritarth Jain: Hi there and welcome to \"Send communication and Time Sensitive notifications.\" I am Kritarth, an engineer on the Notifications team, and later I will be joined by my colleague, Kevin.\n\nNotifications are a key component of the application experience and we will cover new ways to enhance them, along with elevating certain categories of notifications.\n\nWe will start out by covering some visual updates to notifications and how to augment them with new API.\n\nThen we will do an overview of new management controls and how these are relevant to communication and Time Sensitive notifications.\n\nThen we will focus on notification interruptions and cover new APIs to control them.\n\nAfter which, we will hone in on the two types of notifications -- Time Sensitive and communication -- and cover ways in which these can be configured.\n\nLet's begin by going over some visual updates to notifications.\n\nNow, notifications have a new look with greater focus on the content and the associated media along with the application icon.\n\nThe rich notification presentation and accompanying actions have been updated to match the system style.\n\nYou can now associate notification actions with icons.\n\nIconography conveys what the action will do and provides visual context next to the action.\n\nHere there are two notification actions -- like and comment -- and these are set on the custom notification category.\n\nTo add icons to these actions, create objects of type UNNotificationActionIcon with the image name, either for a system image or a template image.\n\nThen provide these icons to the respective constructors for UNNotificationAction.\n\nWhen a notification associated with this category is expanded, the actions are presented along with the icons that were provided for them.\n\nBecause notifications display the app icon at a larger size, provide a high-resolution icon with the application bundle.\n\nEnsure content extensions continue to work with the new presentation and layout of the rich notifications, and adopt icons for notification actions to add more context.\n\nNext, let's go over new notification management options.\n\nThere are new system controls which affect the delivery and interruption of notifications from applications.\n\nThese are notification summary and Focus.\n\nLet's discuss notification summary first.\n\nNotifications can now be delivered at scheduled times in the day as a summary.\n\nThis reduces the number of active interruptions from incoming notifications and presents them collectively at preset times.\n\nAll notifications delivered to the summary on a schedule are present in the notification list on the Lock screen.\n\nInclude media attachments with the notification content so there is a better chance for that notification to be featured at the top of the notification summary.\n\nAdopt the new API to provide a relevance score for the notification content so the right notifications from the application get featured in the notification summary as well.\n\nThe other management tool relevant to notifications is Focus.\n\nThe device can be set in a particular Focus based on the activity or time of day such as Reading, Sleep, or Work.\n\nWhen in such a configuration, the device will filter the presentation and interruption of notifications.\n\nFocus configuration allows selecting people and applications that can send interruptive notifications.\n\nFor example, during the Work Focus, Mail and Messages are allowed to send notifications, along with direct communication from coworkers.\n\nSo notification summary and Focus control which applications can send interruptive notifications and when.\n\nThis allows better management of interruptions throughout the day.\n\nThere is opportunity for notifications to break through these management controls, but only if allowed to do so.\n\nIt is also possible for communication and Time Sensitive notifications to break through.\n\nNext let's discuss how applications can control interruptions tied to notifications.\n\nThere is a new API for interruption levels as part of the UserNotifications framework.\n\nThere are four distinct interruption levels that are supported.\n\nThese are Passive, Active, Time Sensitive, and Critical.\n\nNotifications with Passive interruption level do not alert or light up the screen, and do not break through system controls.\n\nThese notifications are delivered to the notification list silently and are available the next time the list is viewed.\n\nPassive interruption should be used for notifications that do not require immediate attention to interrupt but should be seen eventually.\n\nSome examples are dining recommendations and new episode availability.\n\nActive interruption resembles the behavior that exists today, where notifications will play sound and vibrations and light up the screen.\n\nThese notifications will not break through system management of notifications.\n\nThis is the default interruption level.\n\nActive interruption should be used for notifications that do not warrant interrupting if the system is configured not to be interrupted currently.\n\nSome examples are sports updates and live stream video notifications.\n\nTime Sensitive notifications alert just like active notifications.\n\nThese are special because they can break through system controls such as notification summary and Focus, if it has been allowed.\n\nThese notifications should only be used when it is relevant to actively interrupt, requiring immediate attention.\n\nSome instances are account security and package delivery alerts.\n\nLastly, Critical interruption level is equivalent to the Critical notification support that exists in iOS 14.\n\nNotifications with this interruption level actively alert, break through system controls, and also bypass the ringer switch on the device.\n\nBecause of this disruptive behavior, critical interruption will continue to require an approved entitlement.\n\nSome use cases for critical notifications are severe weather and local safety alerts.\n\nTo support the new API in the UserNotifications framework, there is a new enum for UNNotificationInterruptionLevel with the different levels defined.\n\nSet this interruption level while configuring the content object for the notification request.\n\nPassive is set in this example.\n\nIf no interruption level is provided, then the default level is used.\n\nFor a push notification payload, provide a new key-value pair, with the key interruption level.\n\nHere again, set the interruption level as passive.\n\nWhen this notification is delivered to the device, it will be visible on the Lock screen without any interruptions, since it was configured as passive.\n\nAnother form of interruption tied to notifications is Announce.\n\nSiri can announce notifications if there are compatible devices -- such as AirPods Pro and AirPods Max -- connected.\n\nTo get this announce behavior in iOS 14, notifications had to be tied to a category that requests the AllowAnnouncement option.\n\nIn iOS 15, the requirement for this category option is deprecated.\n\nNow announce is supported for any notification while connected to a supported audio device.\n\nCommunication and Time Sensitive notifications will be announced by default.\n\nWhile connected to CarPlay, communication notifications can be configured to announce automatically, making the experience more seamless.\n\nNext let's focus on Time Sensitive notifications and how to configure them.\n\nTime Sensitive notifications are those that require immediate attention.\n\nBecause of their importance, these can breakthrough system controls such as notification summary and Focus if allowed to do so.\n\nAn example of a Time Sensitive notification is one from Reminders about taking medication.\n\nThis notification is posted immediately and prominently, breaking through the Work Focus.\n\nIt is important to maintain trust when sending Time Sensitive notifications.\n\nDo not overuse their interruptive nature and only use them when it is relevant to do so.\n\nKnow that there is an option to turn off Time Sensitive alerts or even all notifications from an application.\n\nTo configure Time Sensitive notifications, enable the associated capability via Xcode for your application.\n\nSet the Time Sensitive interruption level on the notification request being posted.\n\nFor a local notification, the Time Sensitive interruption level is set on the content object.\n\nFor a push payload, set the interruption-level key with value as time-sensitive.\n\nWhen delivered, this notification is posted prominently, highlighting the urgency.\n\nLet's discuss communication notifications.\n\nAnd to tell you all about them, let me hand over to Kevin.\n\nKevin? Kevin Harrington: Thanks, Kritarth.\n\nI'm Kevin, an engineer on the Notifications team.\n\nThere's an importance for urgent notifications breaking through Focus and notification summaries.\n\nCommunications from people also warrant elevated notification delivery.\n\nThese communications can come in many forms, including calls and messages.\n\nI will highlight a new API that allows your applications to signal what notifications are communications, and the people associated with those communications.\n\nThe importance of communication notifications is determined by user decisions.\n\nSiri Suggestions helps inform these decisions, suggesting important people that should be allowed to interrupt.\n\nAs your user interacts with the device -- taking calls, joining FaceTimes, sending messages -- Siri learns who is a candidate to break through Focus and Notification Summaries.\n\nIn iOS 15, communication notifications get a richer user experience.\n\nMost visible are the prominent avatars.\n\nThe title and subtitle are standardized.\n\nIt always includes the sender in the title, and in the case of group communications, recipients in the subtitle.\n\nThe title and subtitle text are localized and formatted for all devices, across platforms.\n\nFor example, watch prefers to show just first names for recipients of a group communication.\n\nSiri will now announce the contents of communication notifications on supported devices including HomePod, AirPods, and CarPlay.\n\nAnd Siri will provide suggestions to help prioritize these communication notifications.\n\nPeople in your apps will get associated with people in Contacts.\n\nThese associations are shown as suggestions on notifications.\n\nOnce a user confirms a suggestion, Siri Shortcuts are available for tasks with those people in your app.\n\nSiri will suggest relevant people to break through in the Focus configuration -- including those people associated with communications in your app.\n\nTo make these decisions on what is and isn't a communication, this new API lets you add SiriKit call and message intents to Notifications.\n\nIntents are driven by common tasks.\n\nYour app donates these intents when events happen, like placing a call or receiving a message.\n\nFrom there, Siri provides shortcuts and suggestions based on these intents, like people in your apps to message from share sheet or to start a call from your app via Siri.\n\nThis new API associates these same intents with notifications to further integrate your apps into the Siri ecosystem.\n\nUsing SiriKit intents for communication notifications will increase engagement in your apps while maintaining consistency throughout your app, Siri, and system UI.\n\nThe intents that represent relevant communications are the StartCall and SendMessage intents.\n\nThe NotificationContentProviding protocol is the mechanism to associate intents with notifications.\n\nOn a NotificationContent object, call updating with a ContentProviding intent for communication treatment.\n\nStartCall and SendMessage intents conforms to providing.\n\nCommunication notifications are delivered through Apple Push Notification service.\n\nYou need to update a NotificationContent object with a SiriKit intent in your app's NotificationServiceExtension.\n\nSiriKit intents are local to the device, and thus must be serviced locally.\n\nThe service extension is for exactly these cases.\n\nIt is the place to customize the content of a remote notification before it is delivered.\n\nYou can also do this in your main app process for local notifications.\n\nIn your didReceive function, update the content of a push payload with an intent.\n\nFor messaging notifications, create a SendMessageIntent.\n\nAnd for call-related notifications, use a StartCallIntent.\n\nCreate an interaction to tell Siri intelligence what is happening.\n\nIn a notification extension, the interaction direction is always incoming.\n\nThis is an event that is happening to the user; they are receiving the incoming call.\n\nNext, you need to donate the interaction.\n\nDonations also help the system make better suggestions in the future.\n\nUpdate the content of your notification with the intent.\n\nAnd finally, call the contentHandler with the returned intent.\n\nDonations are required so Siri can learn from events that happen in your apps.\n\nThe interaction direction is always incoming for notifications.\n\nFor other SiriKit uses, the direction can be outgoing for actions initiated on the device, like sending an outgoing message or placing a call.\n\nOnly system objects that conform to content providing are supported.\n\nDo not conform your objects to content providing.\n\nTo send communication notifications, enable the communication capability via Xcode for your application.\n\nSupport communication intents by adding intent types to your user activity types array in Info.plist or by implementing an intents extension.\n\nDonate communication intents when the user takes actions in your app foreground, like when the users hits send after composing a message.\n\nSiri then uses outgoing intents to better aide in who should be suggested to break through Focus and Summaries.\n\nSame for Contacts suggestions.\n\nFor this feature, Siri only learns from outgoing intent donations, so Contacts are not cluttered by people not engaged with -- like spam callers.\n\nThe proper usage of communication intents is fundamental to an intelligent notification experience, and there are a few gotchas to cover.\n\nIntent persons are the building blocks of SendMessage and StartCall intents.\n\nEach and every parameter you populate provides a richer and more intelligent user experience.\n\nSame goes with creating intents with intent persons; each and every parameter you populate provides a richer and more intelligent user experience.\n\nStart using intents if you don't already.\n\nIntents will provide more visibility to your app in notifications, share sheet, Contacts, and Spotlight.\n\nAnd you can use SiriKit to offer Siri Shortcuts like sending a message or starting a call.\n\nGet in the habit of donating intents for both incoming and outgoing interactions.\n\nYou might already be donating outgoing intents.\n\nStart donating incoming StartCall and SendMessage intents in your service extension.\n\nThis is fundamental to the communication notification experience.\n\nIf your app doesn't already use a notification service extension, you'll want to add one.\n\nFinally, put the pieces together by using the content providing protocol to decorate each notification you want delivered as a communication.\n\nWe've covered a lot in this session, from visual updates to communication notifications.\n\nHere are a few takeaways.\n\nAccount for the new visual updates and management options and ensure that notifications work seamlessly with them.\n\nAdopt interruption levels to have better control over how a notification interrupts in synergy with system controls.\n\nUse Time Sensitive notifications when relevant to prominently interrupt and get automatic behaviors such as breakthrough and announce.\n\nImplement and donate call and messaging intents to get the upgraded communication experience tied to notifications, along with breakthrough and announce behavior.\n\nWe can't wait to see all the new and amazing experiences you build around notifications.\n\nWe hope you all have a great WWDC! ♪",
    "segments": []
  },
  "codeExamples": [
    {
      "timestamp": "1:57",
      "title": "Notification Action Icons",
      "language": "swift",
      "code": "// Setting up notification actions with icons\n\nlet likeActionIcon = UNNotificationActionIcon(systemImageName: \"hand.thumbsup\")\nlet likeAction = UNNotificationAction(identifier: \"like-action\",\n                                           title: \"Like\",\n                                         options: [],\n                                            icon: likeActionIcon)\n        \nlet commentActionIcon = UNNotificationActionIcon(templateImageName: \"text.bubble\")\nlet commentAction = UNTextInputNotificationAction(identifier: \"comment-action\",\n                                                       title: \"Comment\",\n                                                     options: [],\n                                                        icon: commentActionIcon,\n                                        textInputButtonTitle: \"Post\",\n                                        textInputPlaceholder: \"Type here…\")\n\nlet category = UNNotificationCategory(identifier: \"update-actions\",\n                                         actions: [likeAction, commentAction],\n                               intentIdentifiers: [], options: [])"
    },
    {
      "timestamp": "8:19",
      "title": "Notification Interruption Levels",
      "language": "swift",
      "code": "// Interruption levels\n\nlet enum UNNotificationInterruptionLevel : Int {\n    case passive = 0\n    case active = 1\n    case timeSensitive = 2\n    case critical = 3\n    public static var `default`: UNNotificationInterruptionLevel { get }\n}"
    },
    {
      "timestamp": "8:31",
      "title": "Passive Notification: Local",
      "language": "swift",
      "code": "// Interruption levels\n// Local notification\n\nimport UserNotifications\n\nlet content = UNMutableNotificationContent()\ncontent.title = \"Passive\"\ncontent.body = \"I’m a passive notification, so I won’t interrupt you.\"\ncontent.interruptionLevel = .passive\n\nlet trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\n\nlet request = UNNotificationRequest(identifier: \"passive-request-example\",\n                                       content: content,\n                                       trigger: trigger)"
    },
    {
      "timestamp": "8:47",
      "title": "Passive Notification: Push",
      "language": "swift",
      "code": "// Interruption levels\n// Push notification\n\n{\n    \"aps\" : {\n        \"alert\" : {\n            \"title\" : \"Passive\",\n            \"body\" : \"I’m a passive notification, so I won’t interrupt you.\"\n        }\n        \"interruption-level\" : \"passive\"\n    }\n}"
    },
    {
      "timestamp": "11:13",
      "title": "Time Sensitive Notification: Local",
      "language": "swift",
      "code": "// Time Sensitive\n// Local notification\n\nlet content = UNMutableNotificationContent()\ncontent.title = \"Urgent\"\ncontent.body = \"Your account requires attention.\"\ncontent.interruptionLevel = .timeSensitive\n\nlet trigger = UNTimeIntervalNotificationTrigger(timeInterval: 0, repeats: false)\n\nlet request = UNNotificationRequest(identifier: \"time-sensitive—example\",\n                                       content: content,\n                                       trigger: trigger)"
    },
    {
      "timestamp": "11:20",
      "title": "Time Sensitive Notification: Push",
      "language": "swift",
      "code": "// Time Sensitive\n// Push notification\n\n{\n    \"aps\" : {\n        \"alert\" : {\n            \"title\" : \"Urgent\",\n            \"body\" : \"Your account requires attention.\"\n        }\n        \"interruption-level\" : \"time-sensitive\"\n    }\n}"
    },
    {
      "timestamp": "15:20",
      "title": "Notification Content Providing",
      "language": "swift",
      "code": "// New UserNotifications API\n\n@available(macOS 12.0, *)\npublic protocol UNNotificationContentProviding : NSObjectProtocol {}\n\nopen class UNNotificationContent : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {\n    // ...\n\n    @available(macOS 12.0, *)\n    open func updating(from provider: UNNotificationContentProviding) throws \n                                                    -> UNNotificationContent\n\n    // ...\n}"
    },
    {
      "timestamp": "16:08",
      "title": "Communication Notification: Incoming message",
      "language": "swift",
      "code": "// Create a messaging notification\n// In UNNotificationServiceExtension subclass\n\nfunc didReceive(_ request: UNNotificationRequest,\n                withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n    let incomingMessageIntent: INSendMessageIntent = // ...\n    let interaction = INInteraction(intent: incomingMessageIntent, response: nil)\n    interaction.direction = .incoming\n    interaction.donate(completion: nil)\n    do {\n        let messageContent = try request.content.updating(from: incomingMessageIntent)\n        contentHandler(messageContent)\n    } catch {\n       // Handle error\n    }\n}"
    },
    {
      "timestamp": "16:20",
      "title": "Communication Notification: Incoming call",
      "language": "swift",
      "code": "// Create a call notification\n// In UNNotificationServiceExtension subclass\n\nfunc didReceive(_ request: UNNotificationRequest,\n                withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n    let incomingCallIntent: INStartCallIntent = // ...\n    let interaction = INInteraction(intent: incomingCallIntent, response: nil)\n    interaction.direction = .incoming\n    interaction.donate(completion: nil)\n    do {\n        let callContent = try request.content.updating(from: incomingCallIntent)\n        contentHandler(callContent)\n    } catch {\n       // Handle error\n    }\n}"
    },
    {
      "timestamp": "17:48",
      "title": "Communication Notification: Outgoing message",
      "language": "swift",
      "code": "func sendMessage(...) {\n    // ...\n\n    let intent: INSendMessageIntent = // ...\n    let interaction = INInteraction(intent: intent, response: nil)\n\n    interaction.direction = .outgoing\n    interaction.donate(completion: nil)\n}"
    },
    {
      "timestamp": "18:29",
      "title": "Communication Notification: INPerson",
      "language": "swift",
      "code": "// Create INPerson\n\nlet person = INPerson(personHandle: handle,\n                    nameComponents: nameComponents,\n                       displayName: displayName,\n                             image: image,\n                 contactIdentifier: contactIdentifier,\n                  customIdentifier: customIdentifier,\n                           aliases: nil,\n                    suggestionType: suggestionType)"
    },
    {
      "timestamp": "18:43",
      "title": "Communication Notification: INSendMessageIntent",
      "language": "swift",
      "code": "// Create INSendMessageIntent\n// In your notification service extension\n\nlet intent = INSendMessageIntent(recipients: [person2],\n                        outgoingMessageType: .outgoingMessageText,\n                                    content: content,\n                         speakableGroupName: speakableGroupName,\n                     conversationIdentifier: conversationIdentifier,\n                                serviceName: serviceName,\n                                     sender: person1,\n                                attachments: nil)\n\nlet interaction = INInteraction(intent: intent, response: nil)\ninteraction.direction = .incoming"
    }
  ],
  "resources": {
    "resourceLinks": [
      {
        "title": "Design",
        "url": "https://developer.apple.com/design/"
      },
      {
        "title": "INSendMessageIntent",
        "url": "https://developer.apple.com/documentation/Intents/INSendMessageIntent"
      },
      {
        "title": "INStartCallIntent",
        "url": "https://developer.apple.com/documentation/Intents/INStartCallIntent"
      },
      {
        "title": "SiriKit",
        "url": "https://developer.apple.com/documentation/SiriKit"
      },
      {
        "title": "User Notifications",
        "url": "https://developer.apple.com/documentation/UserNotifications"
      },
      {
        "title": "Documentation",
        "url": "https://developer.apple.com/documentation/"
      },
      {
        "title": "Forums",
        "url": "https://developer.apple.com/forums/"
      },
      {
        "title": "Apple Design Awards",
        "url": "https://developer.apple.com/design/awards/"
      }
    ],
    "hdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10091/4/A4152468-BE8D-45E4-BB60-043AC7854981/downloads/wwdc2021-10091_hd.mp4?dl=1",
    "sdVideo": "https://devstreaming-cdn.apple.com/videos/wwdc/2021/10091/4/A4152468-BE8D-45E4-BB60-043AC7854981/downloads/wwdc2021-10091_sd.mp4?dl=1"
  },
  "relatedVideos": [
    {
      "id": "10231",
      "year": "2021",
      "title": "Donate intents and expand your app’s presence",
      "url": "https://developer.apple.com/videos/play/wwdc2021/10231"
    }
  ],
  "extractedAt": "2025-07-18T09:15:57.332Z"
}